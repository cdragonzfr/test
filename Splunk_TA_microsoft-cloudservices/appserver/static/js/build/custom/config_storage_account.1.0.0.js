var e={d:(t,r)=>{for(var n in r)e.o(r,n)&&!e.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:r[n]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)},t={};function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){c(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t,r){return(t=u(t))in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,u(n.key),n)}}function u(e){var t=function(e,t){if("object"!==r(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var o=n.call(e,"string");if("object"!==r(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===r(t)?t:String(t)}e.d(t,{Z:()=>a});const a=function(){function e(t,r,n,o,c){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.globalConfig=t,this.serviceName=r,this.state=n,this.mode=o,this.util=c}var t,r;return t=e,(r=[{key:"onCreate",value:function(){}},{key:"onChange",value:function(e,t,r){if("account_secret_type"===e){var n="0"===r.account_secret_type?"optional":"Required";this.util.setState((function(e){return o(o({},e.data),{},{account_secret:{placeholder:n}})}))}}},{key:"onRender",value:function(){var e="0"===this.state.data.account_secret_type.value?"optional":"Required";this.util.setState((function(t){return o(o({},t.data),{},{account_secret:{placeholder:e}})}))}},{key:"onSave",value:function(e){return!("0"!==e.account_secret_type&&null===e.account_secret||"0"!==e.account_secret_type&&""===e.account_secret)||(this.util.setErrorMsg("Field Account Secret is required"),!1)}},{key:"onSaveSuccess",value:function(){}},{key:"onSaveFail",value:function(){}}])&&i(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();var l=t.Z;export{l as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlnX3N0b3JhZ2VfYWNjb3VudC4xLjAuMC5qcyIsIm1hcHBpbmdzIjoiQUFDQSxJQUFJQSxFQUFzQixDQ0ExQkEsRUFBd0IsQ0FBQ0MsRUFBU0MsS0FDakMsSUFBSSxJQUFJQyxLQUFPRCxFQUNYRixFQUFvQkksRUFBRUYsRUFBWUMsS0FBU0gsRUFBb0JJLEVBQUVILEVBQVNFLElBQzVFRSxPQUFPQyxlQUFlTCxFQUFTRSxFQUFLLENBQUVJLFlBQVksRUFBTUMsSUFBS04sRUFBV0MsSUFFMUUsRUNOREgsRUFBd0IsQ0FBQ1MsRUFBS0MsSUFBVUwsT0FBT00sVUFBVUMsZUFBZUMsS0FBS0osRUFBS0MsSSxvNENDaUVsRixRQTNEOEIsV0FnQjFCLFdBQVlJLEVBQWNDLEVBQWFDLEVBQU9DLEVBQU1DLEksNEZBQU1DLENBQUFBLEtBQUFBLEdBQ3REQyxLQUFLTixhQUFlQSxFQUNwQk0sS0FBS0wsWUFBY0EsRUFDbkJLLEtBQUtKLE1BQVFBLEVBQ2JJLEtBQUtILEtBQU9BLEVBQ1pHLEtBQUtGLEtBQU9BLENBQ2hCLEMsUUFrQ0MsTyxFQWpDREcsRyxFQUFBQSxDQUFBQSxDQUFBbEIsSUFBQUEsV0FBQW1CLE1BQ0EsV0FDQSxHQUFDLENBQUFuQixJQUFBQSxXQUFBbUIsTUFFRCxTQUFTQyxFQUFPRCxFQUFPRSxHQUVuQixHQUFjLHdCQUFWRCxFQUFnQyxDQUNoQyxJQUFNRSxFQUErQyxNQUFqQ0QsRUFBU0Usb0JBQTRCLFdBQVcsV0FDcEVOLEtBQUtGLEtBQUtTLFVBQVMsU0FBQUMsR0FBUyxjQUFTQSxFQUFVQyxNQUFJLElBQUdDLGVBQWlCLENBQUNMLFlBQUFBLElBQVksR0FDeEYsQ0FDSixHQUVBLENBQUF0QixJQUFBQSxXQUFBbUIsTUFDQSxXQUNJLElBRU1HLEVBQXNDLE1BRmxCTCxLQUFLSixNQUFNYSxLQUFLSCxvQkFBb0JKLE1BRVosV0FBYSxXQUMvREYsS0FBS0YsS0FBS1MsVUFBUyxTQUFBQyxHQUFTLGNBQVNBLEVBQVVDLE1BQUksSUFBRUMsZUFBZ0IsQ0FBRUwsWUFBQUEsSUFBYSxHQUN4RixHQUFDLENBQUF0QixJQUFBQSxTQUFBbUIsTUFFRCxTQUFPRSxHQUVILFFBQXNDLE1BQWpDQSxFQUFTRSxxQkFBMkQsT0FBNUJGLEVBQVNNLGdCQUE4RCxNQUFqQ04sRUFBU0UscUJBQTJELEtBQTVCRixFQUFTTSxrQkFDaElWLEtBQUtGLEtBQUthLFlBQVkscUNBQ2YsRUFHZixHQUFDLENBQUE1QixJQUFBQSxnQkFBQW1CLE1BRUQsV0FDQSxHQUNBLENBQUFuQixJQUFBQSxhQUFBbUIsTUFDQSxXQUNBLE0sb0VBQUMsRUF4RHlCLEciLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vU3BsdW5rX1RBX21pY3Jvc29mdC1jbG91ZHNlcnZpY2VzL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9TcGx1bmtfVEFfbWljcm9zb2Z0LWNsb3Vkc2VydmljZXMvLi9qcy9jb25maWdfc3RvcmFnZV9hY2NvdW50LjEuMC4wLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSByZXF1aXJlIHNjb3BlXG52YXIgX193ZWJwYWNrX3JlcXVpcmVfXyA9IHt9O1xuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLypcbiAqIFNQRFgtRmlsZUNvcHlyaWdodFRleHQ6IDIwMjEgU3BsdW5rLCBJbmMuIDxzYWxlc0BzcGx1bmsuY29tPlxuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuICpcbiAqL1xuXG5jbGFzcyBDb25maWdTdG9yYWdlQWNjb3VudEhvb2sge1xuICAgIC8qKlxuICAgICogRm9ybSBDb25maWdTdG9yYWdlQWNjb3VudEhvb2sgKEF6dXJlIFN0b3JhZ2UgQWNjb3VudCBDb25maWd1cmF0aW9uKVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZ2xvYmFsQ29uZmlnIC0gR2xvYmFsIGNvbmZpZ3VyYXRpb24uXG4gICAgKiBAcGFyYW0ge29iamVjdH0gc2VydmljZU5hbWUgLSBTZXJ2aWNlIG5hbWVcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSBzdGF0ZSAtIEluaXRpYWwgc3RhdGUgb2YgdGhlIGZvcm1cbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIC0gZWRpdCxjcmVhdGUgb3IgY2xvbmVcbiAgICAqIEBwYXJhbSB7b2JqZWN0fSB1dGlsIC0gT2JqZWN0IGNvbnRhaW5pbmcgdXRpbGl0eSBtZXRob2RzXG4gICAgKiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRTdGF0ZSxcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvck1zZyxcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRFcnJvckZpZWxkTXNnLFxuICAgICogICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyQWxsRXJyb3JNc2dcbiAgICAqICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICovXG4gICAgY29uc3RydWN0b3IoZ2xvYmFsQ29uZmlnLCBzZXJ2aWNlTmFtZSwgc3RhdGUsIG1vZGUsIHV0aWwpIHtcbiAgICAgICAgdGhpcy5nbG9iYWxDb25maWcgPSBnbG9iYWxDb25maWc7XG4gICAgICAgIHRoaXMuc2VydmljZU5hbWUgPSBzZXJ2aWNlTmFtZTtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLm1vZGUgPSBtb2RlO1xuICAgICAgICB0aGlzLnV0aWwgPSB1dGlsO1xuICAgIH1cbiAgICAvKiBPbiBDcmVhdGUgRXZlbnQgSGFuZGxpbmcgY29udHJvbCAqL1xuICAgIG9uQ3JlYXRlKCkge1xuICAgIH1cblxuICAgIG9uQ2hhbmdlKGZpZWxkLCB2YWx1ZSwgZGF0YURpY3QpIHtcbiAgICAgICAgLyogQ3JlYXRlIGNsaWNrIGV2ZW50IGZvciB0aGUgXCJhY2NvdW50X3NlY3JldF90eXBlXCIgYW5kIGNoYW5nZSBwbGFjZWhvbGRlciBhY2NvcmRpbmcgYWNjb3VudF9zZWNyZXRfdHlwZSAqL1xuICAgICAgICBpZiAoZmllbGQgPT09IFwiYWNjb3VudF9zZWNyZXRfdHlwZVwiKXtcbiAgICAgICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gZGF0YURpY3QuYWNjb3VudF9zZWNyZXRfdHlwZSA9PT0gXCIwXCI/XCJvcHRpb25hbFwiOlwiUmVxdWlyZWRcIlxuICAgICAgICAgICAgdGhpcy51dGlsLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoey4uLnByZXZTdGF0ZS5kYXRhICwgYWNjb3VudF9zZWNyZXQgOiB7cGxhY2Vob2xkZXJ9IH0pKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qIE9uIFJlbmRlciBFdmVudCBIYW5kbGluZyBjb250cm9sICovXG4gICAgb25SZW5kZXIoKSB7XG4gICAgICAgIHZhciBhY2NvdW50X3NlY3JldF90eXBlID0gdGhpcy5zdGF0ZS5kYXRhLmFjY291bnRfc2VjcmV0X3R5cGUudmFsdWU7XG4gICAgICAgIC8qIElmIGFjY291bnQgc2VjcmV0IHR5cGUgaXMgXCJOb25lIFNlY3JldFwiLCBzZXQgXCJvcHRpb25hbFwiIGFzIHBsYWNlaG9sZGVyIG90aGVyd2lzZSBzZXQgXCJSZXF1aXJlZFwiIGFzIHBsYWNlaG9sZGVyICovXG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0gYWNjb3VudF9zZWNyZXRfdHlwZSA9PT0gXCIwXCIgPyBcIm9wdGlvbmFsXCIgOiBcIlJlcXVpcmVkXCJcbiAgICAgICAgdGhpcy51dGlsLnNldFN0YXRlKHByZXZTdGF0ZSA9PiAoey4uLnByZXZTdGF0ZS5kYXRhLCBhY2NvdW50X3NlY3JldDogeyBwbGFjZWhvbGRlciB9IH0pKTtcbiAgICB9XG5cbiAgICBvblNhdmUoZGF0YURpY3QpIHtcbiAgICAgICAgLyogSWYgYWNjb3VudF9zZWNyZXRfdHlwZSBpcyBcIk5vbmUgU2VjcmV0XCIsIGFjY291bnRfc2VjcmV0IGZpZWxkIGlzIG5vdCByZXF1aXJlZCBvdGhlcndpc2UgaXQgaXMgcmVxdWlyZWQgYW5kIHJldHVybiBlcnJvciBpZiBpcyBub3QgcHJvdmlkZWQgKi9cbiAgICAgICAgaWYgKChkYXRhRGljdC5hY2NvdW50X3NlY3JldF90eXBlICE9PSBcIjBcIiAmJiBkYXRhRGljdC5hY2NvdW50X3NlY3JldCA9PT0gbnVsbCkgfHwgKGRhdGFEaWN0LmFjY291bnRfc2VjcmV0X3R5cGUgIT09IFwiMFwiICYmIGRhdGFEaWN0LmFjY291bnRfc2VjcmV0ID09PSBcIlwiKSkge1xuICAgICAgICAgICAgdGhpcy51dGlsLnNldEVycm9yTXNnKFwiRmllbGQgQWNjb3VudCBTZWNyZXQgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICBvblNhdmVTdWNjZXNzKCkge1xuICAgIH1cbiAgICAvKiBBY3Rpb24gbmVlZHMgdG8gcGVyZm9ybSBvbiBzYXZlIGZhaWx1cmUgKi9cbiAgICBvblNhdmVGYWlsKCkge1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29uZmlnU3RvcmFnZUFjY291bnRIb29rO1xuIl0sIm5hbWVzIjpbIl9fd2VicGFja19yZXF1aXJlX18iLCJleHBvcnRzIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJvYmoiLCJwcm9wIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZ2xvYmFsQ29uZmlnIiwic2VydmljZU5hbWUiLCJzdGF0ZSIsIm1vZGUiLCJ1dGlsIiwiX2NsYXNzQ2FsbENoZWNrIiwidGhpcyIsIl9jcmVhdGVDbGFzcyIsInZhbHVlIiwiZmllbGQiLCJkYXRhRGljdCIsInBsYWNlaG9sZGVyIiwiYWNjb3VudF9zZWNyZXRfdHlwZSIsInNldFN0YXRlIiwicHJldlN0YXRlIiwiZGF0YSIsImFjY291bnRfc2VjcmV0Iiwic2V0RXJyb3JNc2ciXSwic291cmNlUm9vdCI6IiJ9