(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{292:function(e,t,n){"use strict";n.d(t,"a",(function(){return u}));var r=n(72),a=n.n(r),o=n(0),i=n.n(o),l=n(3),c=n.n(l),s=Object(o.createContext)({rowData:{},setRowData:function(){}}),u=function(e){var t=e.children,n=Object(o.useState)({}),r=a()(n,2),l=r[0],c=r[1],u=Object(o.useState)(""),d=a()(u,2),p=d[0],f=d[1],h=Object(o.useState)("all"),m=a()(h,2),v=m[0],g=m[1],b=Object(o.useState)(10),y=a()(b,2),O=y[0],E=y[1],j=Object(o.useState)(0),k=a()(j,2),w=k[0],C=k[1];return i.a.createElement(s.Provider,{value:{rowData:l,setRowData:c,searchText:p,setSearchText:f,searchType:v,setSearchType:g,pageSize:O,setPageSize:E,currentPage:w,setCurrentPage:C}},t)};u.propTypes={children:c.a.oneOfType([c.a.arrayOf(c.a.node),c.a.node]).isRequired},t.b=s},293:function(e,t,n){"use strict";n.d(t,"a",(function(){return r})),n.d(t,"c",(function(){return a})),n.d(t,"d",(function(){return o})),n.d(t,"b",(function(){return i}));var r="clone",a="create",o="edit",i="config"},294:function(e,t,n){"use strict";n.d(t,"a",(function(){return p}));var r=n(288),a=n.n(r),o=n(52),i=n.n(o),l=n(141),c=n(140),s=n(47);function u(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?u(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):u(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var p=function(e){var t=e.serviceName,n=e.endpointUrl,r=e.params,a=e.body,o=e.cancelToken,u=e.customHeaders,p=void 0===u?{}:u,f=e.method,h=void 0===f?"get":f,m=e.handleError,v=void 0!==m&&m,g=e.callbackOnError,b=void 0===g?function(){}:g,y=t?Object(s.b)(t):n,O={app:l.app,owner:"nobody"},E={"X-Splunk-Form-Key":l.CSRFToken,"X-Requested-With":"XMLHttpRequest","Content-Type":"application/json"},j=Object.assign(E,p),k=Object(c.createRESTURL)(y,O),w={output_mode:"json"};r&&(w=d(d({},w),r));var C={params:w,method:h,url:k,credentials:"include",headers:j,cancelToken:o};return"post"===h&&(C.data=a),v?i()(C).catch((function(e){var t="";return i.a.isCancel(e)||(t=e.response?"Error response received from server: ".concat(e.response.data.messages[0].text):e.request?"No response received while making request to ".concat(y):"Error making ".concat(h," request to ").concat(y),Object(s.c)(t,"error"),b(e)),Promise.reject(e)})):i()(C)}},317:function(e,t,n){"use strict";n.d(t,"b",(function(){return u})),n.d(t,"a",(function(){return d}));var r,a,o,i=n(14),l=n.n(i),c=n(1),s=n(15),u=c.default.div.attrs({className:"pageTitle"})(r||(r=l()(["\n    &.pageTitle {\n        font-size: ",";\n        margin-bottom: 20px;\n    }\n"])),s.variables.fontSizeXXLarge),d=c.default.div.attrs({className:"pageSubtitle"})(a||(a=l()(["\n    &.pageSubtitle {\n        font-size: ",";\n        margin-bottom: 10px;\n    }\n"])),s.variables.fontSize);c.default.div(o||(o=l()(["\n    .table-caption-inner {\n        text-align: left;\n    }\n"])))},321:function(e,t,n){"use strict";var r=n(4);t.a=function(){return new URLSearchParams(Object(r.e)().search)}},322:function(e,t,n){"use strict";var r,a=n(33),o=n.n(a),i=n(34),l=n.n(i),c=n(129),s=n.n(c),u=n(36),d=n.n(u),p=n(37),f=n.n(p),h=n(21),m=n.n(h),v=n(288),g=n.n(v),b=n(14),y=n.n(b),O=n(0),E=n.n(O),j=n(3),k=n.n(j),w=n(35),C=n.n(w),R=n(30),S=n.n(R),x=n(1),N=n(76),P=n.n(N),M=n(7),_=n(293),T=n(325);function F(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=m()(e);if(t){var a=m()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return f()(this,n)}}var D=Object(x.default)(S.a)(r||(r=y()(["\n    width: 800px;\n"]))),V=function(e){d()(n,e);var t=F(n);function n(e){var r;return o()(this,n),r=t.call(this,e),g()(s()(r),"handleRequestClose",(function(){r.props.handleRequestClose()})),g()(s()(r),"handleSubmit",(function(){r.form.current.handleSubmit()&&r.handleRequestClose()})),g()(s()(r),"handleFormSubmit",(function(e,t){r.setState({isSubmititng:e}),t&&r.handleRequestClose()})),r.form=E.a.createRef(),r.state={isSubmititng:!1},e.mode===_.c?r.buttonText=Object(M._)("Add"):e.mode===_.a?r.buttonText=Object(M._)("Save"):e.mode===_.d?r.buttonText=Object(M._)("Update"):r.buttonText=Object(M._)("Submit"),r}return l()(n,[{key:"render",value:function(){return E.a.createElement(D,{open:this.props.open},E.a.createElement(S.a.Header,{title:this.props.formLabel,onRequestClose:this.handleRequestClose}),E.a.createElement(S.a.Body,null,E.a.createElement(T.a,{ref:this.form,page:this.props.page,serviceName:this.props.serviceName,mode:this.props.mode,stanzaName:this.props.stanzaName,handleFormSubmit:this.handleFormSubmit})),E.a.createElement(S.a.Footer,null,E.a.createElement(C.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(M._)("Cancel"),disabled:this.state.isSubmititng}),E.a.createElement(C.a,{className:"saveBtn",appearance:"primary",label:this.state.isSubmititng?E.a.createElement(P.a,null):this.buttonText,onClick:this.handleSubmit,disabled:this.state.isSubmititng})))}}]),n}(O.Component);V.propTypes={page:k.a.string,open:k.a.bool,handleRequestClose:k.a.func,serviceName:k.a.string,mode:k.a.string,stanzaName:k.a.string,formLabel:k.a.string},t.a=V},325:function(e,t,n){"use strict";var r,a=n(453),o=n.n(a),i=n(454),l=n.n(i),c=n(33),s=n.n(c),u=n(34),d=n.n(u),p=n(129),f=n.n(p),h=n(36),m=n.n(h),v=n(37),g=n.n(v),b=n(21),y=n.n(b),O=n(288),E=n.n(O),j=n(14),k=n.n(j),w=n(458),C=n.n(w),R=n(0),S=n.n(R),x=n(3),N=n.n(x),P=n(318),M=n.n(P),_=n(499),T=n(460),F=n.n(T),D=n(91),V=n.n(D),q=n(1),A=n(462),z=n.n(A),I=n(130),B=n.n(I),L=q.default.span(r||(r=k()(["\n    color: ",";\n"])),(function(e){return e.color}));function H(e){return S.a.createElement("div",{"data-test":"msg-markdown"},(t=e.text,"link"===e.markdownType?t=S.a.createElement(B.a,{to:e.link},e.text):"hybrid"===e.markdownType?(t=function(e,t){for(var n=[],r=0;r<e.length;r+=1){var a=t(e[r]);n=n.concat(a)}return n}(t.split(e.token),(function(t){return[t,S.a.createElement(B.a,{key:t,to:e.link},e.linkText)]}))).pop():"text"===e.markdownType&&(t=S.a.createElement(L,{color:e.color},e.text)),t));var t}H.propTypes={text:N.a.string,link:N.a.string,color:N.a.string,markdownType:N.a.string,token:N.a.string,linkText:N.a.string};var U=S.a.memo(H);function $(e){var t=e.controlOptions,n=t.text,r=t.link;return S.a.createElement(B.a,{to:r,openInNewContext:!0},n)}$.propTypes={controlOptions:N.a.object};var W,K=$,Z=n(297),G=n.n(Z);function X(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var J=Object(q.default)(G.a)(W||(W=k()(["\n    width: 320px !important;\n"]))),Q=function(e){m()(n,e);var t=X(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){var e,t;return S.a.createElement(J,{inline:!0,error:this.props.error,placeholder:null===(e=this.props)||void 0===e||null===(t=e.controlOptions)||void 0===t?void 0:t.placeholder,className:this.props.field,disabled:this.props.disabled,value:null===this.props.value||void 0===this.props.value?"":this.props.value.toString(),onChange:this.handleChange,type:this.props.encrypted?"password":"text"})}}]),n}(R.Component);Q.propTypes={value:N.a.oneOfType([N.a.string,N.a.number]),handleChange:N.a.func.isRequired,field:N.a.string,error:N.a.bool,controlOptions:N.a.object,encrypted:N.a.bool,disabled:N.a.bool};var Y,ee,te=Q,ne=n(72),re=n.n(ne),ae=n(358),oe=n.n(ae),ie=n(359),le=n.n(ie),ce=n(482),se=n.n(ce),ue=n(35),de=n.n(ue),pe=n(149),fe=n.n(pe),he=n(7),me=n(52),ve=n.n(me),ge=n(294),be=n(47);function ye(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Oe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ye(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ye(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Ee=Object(q.default)(le.a)(Y||(Y=k()(["\n    width: 320px !important;\n"]))),je=q.default.div(ee||(ee=k()(["\n    div:first-child {\n        width: 320px !important;\n    }\n"])));function ke(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.controlOptions,l=e.dependencyValues,c=oe()(e,["field","disabled","error","controlOptions","dependencyValues"]),s=i.endpointUrl,u=i.denyList,d=i.allowList,p=i.placeholder,f=void 0===p?Object(he._)("Select a value"):p,h=i.dependencies,m=i.createSearchChoice,v=i.referenceName,g=i.disableSearch,b=i.labelField,y=i.autoCompleteFields,O=i.hideClearBtn;function E(e,n){c.handleChange(t,n.value)}var j=m?se.a.Option:le.a.Option,k=m?se.a.Heading:le.a.Heading;function w(e){var t=[];return e.forEach((function(e){e.value&&e.label&&t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value})),e.children&&e.label&&(t.push(S.a.createElement(k,{key:e.label},e.label)),e.children.forEach((function(e){t.push(S.a.createElement(j,{label:e.label,value:e.value,key:e.value}))})))})),t}var C=Object(R.useState)(!1),x=re()(C,2),N=x[0],P=x[1],M=Object(R.useState)(null),_=re()(M,2),T=_[0],F=_[1];Object(R.useEffect)((function(){if(s||v||!y){var e=!0,t=ve.a.CancelToken.source(),n={cancelToken:t.token,handleError:!0,params:{count:-1}};return v?n.serviceName=v:s&&(n.endpointUrl=s),l&&(n.params=Oe(Oe({},n.params),l)),h&&!l||(P(!0),Object(ge.a)(n).then((function(t){e&&(F(w(Object(be.a)(t.data.entry,b,d,u))),P(!1))})).catch((function(){e&&P(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}F(w(y))}),[l]);var D=!!N||r,V=N?Object(he._)("Loading"):f,q=!D&&!O;return S.a.createElement(S.a.Fragment,null,m?S.a.createElement(je,{className:"dropdownBox"},S.a.createElement(se.a,{value:null===e.value?"":e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,inline:!0},T&&T.length>0&&T)):S.a.createElement(S.a.Fragment,null,S.a.createElement(Ee,{className:"dropdownBox","data-test-loading":N,value:e.value,name:t,error:o,placeholder:V,disabled:D,onChange:E,filter:!g,inline:!0},T&&T.length>0&&T),q?S.a.createElement(de.a,{"data-test":"clear",appearance:"secondary",icon:S.a.createElement(fe.a,null),onClick:function(){return c.handleChange(t,"")}}):null))}ke.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({autoCompleteFields:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,placeholder:N.a.string,dependencies:N.a.array,createSearchChoice:N.a.bool,referenceName:N.a.string,disableSearch:N.a.bool,labelField:N.a.string,hideClearBtn:N.a.bool})};var we,Ce=ke,Re=n(483),Se=n.n(Re),xe=n(8);function Ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Pe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ne(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var Me=Object(q.default)(Se.a)(we||(we=k()(["\n    width: 320px !important;\n"])));function _e(e){var t=e.field,n=e.disabled,r=void 0!==n&&n,a=e.error,o=void 0!==a&&a,i=e.value,l=e.controlOptions,c=e.dependencyValues,s=oe()(e,["field","disabled","error","value","controlOptions","dependencyValues"]),u=l.endpointUrl,d=l.denyList,p=l.allowList,f=l.items,h=l.dependencies,m=l.referenceName,v=l.placeholder,g=l.createSearchChoice,b=l.labelField,y=l.delimiter,O=void 0===y?",":y;function E(e){return e.map((function(e){return S.a.createElement(Se.a.Option,{label:e.label,value:e.value,key:e.value})}))}var j=Object(R.useState)(!1),k=re()(j,2),w=k[0],C=k[1],x=Object(R.useState)(null),N=re()(x,2),P=N[0],M=N[1];Object(R.useEffect)((function(){if(u||!f){var e=!0,t=ve.a.CancelToken.source(),n={cancelToken:t.token,handleError:!0,params:{count:-1}};return m?n.serviceName=m:u&&(n.endpointUrl=u),c&&(n.params=Pe(Pe({},n.params),c)),h&&!c||(C(!0),Object(ge.a)(n).then((function(t){e&&(M(E(Object(be.a)(t.data.entry,b,p,d))),C(!1))})).catch((function(){e&&C(!1)}))),function(){t.cancel("Operation canceled."),e=!1}}M(E(f))}),[c]);var _=!!w||r,T=w?Object(xe.a)(115):v,F=i?i.split(O):[];return S.a.createElement(Me,{values:F,error:o,name:t,placeholder:T,disabled:_,allowNewValues:g,onChange:function(e,n){var r=n.values;s.handleChange(t,r.join(O))},inline:!0},P&&P.length>0&&P)}_e.propTypes={disabled:N.a.bool,value:N.a.string,error:N.a.bool,handleChange:N.a.func.isRequired,field:N.a.string,dependencyValues:N.a.object,controlOptions:N.a.shape({delimiter:N.a.string,placeholder:N.a.string,createSearchChoice:N.a.bool,referenceName:N.a.string,dependencies:N.a.array,endpointUrl:N.a.string,denyList:N.a.string,allowList:N.a.string,labelField:N.a.string,items:N.a.arrayOf(N.a.shape({label:N.a.string.isRequired,value:N.a.string.isRequired}))})};var Te=_e,Fe=n(300),De=n.n(Fe);function Ve(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var qe=function(e){m()(n,e);var t=Ve(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(){e.props.value&&!Object(be.e)(e.props.value)?e.props.handleChange(e.props.field,0):e.props.handleChange(e.props.field,1)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(De.a,{key:this.props.field,value:this.props.field,onClick:this.handleChange,disabled:this.props.disabled,selected:!(!this.props.value||Object(be.e)(this.props.value)),appearance:"checkbox"})}}]),n}(R.Component);qe.propTypes={value:N.a.oneOfType([N.a.bool,N.a.number,N.a.string]),handleChange:N.a.func.isRequired,field:N.a.string,disabled:N.a.bool};var Ae,ze=qe,Ie=n(486),Be=n.n(Ie);function Le(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var He=Object(q.default)(Be.a)(Ae||(Ae=k()(["\n    width: 320px;\n"]))),Ue=function(e){m()(n,e);var t=Le(n);function n(){var e;s()(this,n);for(var r=arguments.length,a=new Array(r),o=0;o<r;o++)a[o]=arguments[o];return e=t.call.apply(t,[this].concat(a)),E()(f()(e),"handleChange",(function(t,n){var r=n.value;e.props.handleChange(e.props.field,r)})),e}return d()(n,[{key:"render",value:function(){return S.a.createElement(He,{inline:!0,onChange:this.handleChange,value:this.props.value,key:this.props.field},this.props.controlOptions.items.map((function(e){return S.a.createElement(Be.a.Option,{key:e.value,value:e.value,label:e.label})})))}}]),n}(R.Component);Ue.propTypes={value:N.a.string,handleChange:N.a.func.isRequired,field:N.a.string,controlOptions:N.a.object};var $e=Ue,We=n(487),Ke=n.n(We);function Ze(e){var t=e.controlOptions.defaultValue;return S.a.createElement(Ke.a,null,t)}Ze.propTypes={controlOptions:N.a.object};var Ge=Ze,Xe=n(39);function Je(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var Qe=function(e){m()(n,e);var t=Je(n);function n(e){var r;return s()(this,n),r=t.call(this,e),E()(f()(r),"loadCustomControl",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(Xe.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;r(t)})):require(["app/".concat(n,"/js/build/custom/").concat(e)],(function(e){r(e)}))}))})),E()(f()(r),"setValue",(function(e){r.props.handleChange(r.props.field,e)})),r.state={loading:!0},r.shouldRender=!0,r}return d()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(be.d)(),n=t.meta.name;this.loadCustomControl(this.props.controlOptions.src,this.props.controlOptions.type,n).then((function(n){var r=new n(t,e.el,e.props.data,e.setValue,e.props.utilCustomFunctions);r.render(),"function"==typeof r.validation&&e.props.addCustomValidator(e.props.field,r.validation),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;return S.a.createElement(S.a.Fragment,null,this.state.loading&&Object(he._)("Loading..."),S.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(R.Component);Qe.propTypes={data:N.a.object,field:N.a.string,handleChange:N.a.func,controlOptions:N.a.object,addCustomValidator:N.a.func,utilCustomFunctions:N.a.object};var Ye,et,tt={text:te,singleSelect:Ce,helpLink:K,multipleSelect:Te,checkbox:ze,radio:$e,placeholder:Ge,custom:Qe};function nt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var rt=q.default.div(Ye||(Ye=k()(["\n    margin-left: 30px;\n"]))),at=Object(q.default)(z.a).attrs((function(e){return{"data-name":e.dataName}}))(et||(et=k()(["\n    width: 100%;\n    max-width: 100%;\n\n    > * {\n        &:first-child {\n            width: 240px !important;\n        }\n        &:nth-child(3) {\n            margin-left: 270px !important;\n            width: 320px;\n        }\n    }\n"]))),ot=function(e){m()(n,e);var t=nt(n);function n(e){var r;return s()(this,n),r=t.call(this,e),E()(f()(r),"isString",(function(e){return!!("string"==typeof e||e instanceof String)})),r.controlType=r.isString(e.entity.type)?tt[e.entity.type]:null,r}return d()(n,[{key:"render",value:function(){var e,t=this.props.entity,n=t.field,r=t.type,a=t.label,o=t.tooltip,i=t.help,l=t.encrypted,c=void 0!==l&&l,s=this.props.utilityFuncts,u=s.handleChange,d=s.addCustomValidator,p=s.utilCustomFunctions,f=this.props.markdownMessage||{},h=f.text,m=f.link,v=f.color,g=f.markdownType,b=f.token,y=f.linkText;if("custom"===this.props.entity.type){var O={value:this.props.value,mode:this.props.mode,serviceName:this.props.serviceName};e=this.controlType?S.a.createElement(this.controlType,{data:O,field:n,handleChange:u,addCustomValidator:d,utilCustomFunctions:p,controlOptions:this.props.entity.options}):"No View Found for ".concat(r," type")}else e=this.controlType?S.a.createElement(this.controlType,{handleChange:u,value:this.props.value,field:n,controlOptions:this.props.entity.options,error:this.props.error,disabled:this.props.disabled,encrypted:c,dependencyValues:this.props.dependencyValues}):"No View Found for ".concat(r," type");var E=S.a.createElement(S.a.Fragment,null,S.a.createElement(U,{text:h||"",link:m||"",color:v||"",markdownType:g||"",token:b||"",linkText:y||""}),i);return this.props.display&&S.a.createElement(at,{label:a,help:E,tooltip:o,error:this.props.error,dataName:n},S.a.createElement(rt,null,e))}}]),n}(S.a.PureComponent);ot.propTypes={mode:N.a.string,utilityFuncts:N.a.object,value:N.a.any,display:N.a.bool,error:N.a.bool,entity:N.a.object,disabled:N.a.bool,markdownMessage:N.a.object,serviceName:N.a.string,dependencyValues:N.a.object};var it=ot,lt={url:{regex:/^(?:(?:https?|ftp|opc\.tcp):\/\/)?(?:\S+(?::\S*)?@)?(?:(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]+-?_?)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]+-?)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,}))?)(?::\d{2,5})?(?:\/[^\s]*)?$/,inputValueType:Object(xe.a)(111)},email:{regex:/^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/,inputValueType:Object(xe.a)(112)},ipv4:{regex:/^(?:(?:[0-1]?\d{1,2}|2[0-4]\d|25[0-5])(?:\.|$)){4}$/,inputValueType:Object(xe.a)(113)},date:{regex:/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,inputValueType:Object(xe.a)(114)}},ct=n(109);var st,ut,dt=function(){function e(t){s()(this,e),E()(this,"checkIsFieldHasInput",(function(e){return void 0!==e&&""!==e&&null!==e})),this.entities=t,this.isName=t.find((function(e){return"name"===e.field}))}return d()(e,[{key:"RequiredValidator",value:function(e,t,n){return!this.checkIsFieldHasInput(n)&&{errorField:e,errorMsg:Object(xe.a)(6,[t])}}},{key:"StringValidator",value:function(e,t,n,r){var a=Object(ct.d)(n.minLength,n.maxLength).error;return a?{errorField:e,errorMsg:a}:this.checkIsFieldHasInput(r)&&r.length>n.maxLength?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(xe.a)(18,[t,n.maxLength])}:!!(this.checkIsFieldHasInput(r)&&r.length<n.minLength)&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(xe.a)(17,[t,n.minLength])}}},{key:"RegexValidator",value:function(e,t,n,r){var a=Object(ct.c)(n.pattern),o=a.error,i=a.result;return o?{errorField:e,errorMsg:o}:!(!this.checkIsFieldHasInput(r)||i.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(xe.a)(15,[t,n.pattern])}}},{key:"PreDefinedRegexValidator",value:function(e,t,n,r,a,o){var i=Object(ct.c)(a),l=i.error,c=i.result;return l?{errorField:e,errorMsg:l}:!(!this.checkIsFieldHasInput(r)||c.test(r))&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(xe.a)(19,[t,o])}}},{key:"NumberValidator",value:function(e,t,n,r){var a=Object(ct.b)(n.range).error;if(a)return{errorField:e,errorMsg:a};var o=Number(r);return Number.isNaN(o)?{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(xe.a)(16,[t])}:!!(this.checkIsFieldHasInput(r)&&o>n.range[1]||o<n.range[0])&&{errorField:e,errorMsg:n.errorMsg?n.errorMsg:Object(xe.a)(8,[t,n.range[0],n.range[1]])}}},{key:"doValidation",value:function(t){if(this.isName){var n=t.name,r=this.isName.label;if(void 0===n||""===n||null==n)return{errorField:"name",errorMsg:Object(xe.a)(0,[r])};if(!("string"==typeof n||n instanceof String))return{errorField:"name",errorMsg:Object(xe.a)(1,[r])};if(n.startsWith("_")||"."===n||".."===n||"default"===n.toLowerCase())return{errorField:"name",errorMsg:Object(xe.a)(3,[r])};if(["*","\\","[","]","(",")","?",":"].some((function(e){return n.indexOf(e)>-1})))return{errorField:"name",errorMsg:Object(xe.a)(3,[r])};if(n.length>=1024)return{errorField:"name",errorMsg:Object(xe.a)(22,[r])}}var a,o,i;for(o=0;o<this.entities.length;o+=1){if(!0===this.entities[o].required&&(a=this.RequiredValidator(this.entities[o].field,this.entities[o].label,t[this.entities[o].field])))return a;if(""!==t[this.entities[o].field]&&null!==t[this.entities[o].field]&&this.entities[o].validators)for(i=0;i<this.entities[o].validators.length;i+=1)switch(this.entities[o].validators[i].type){case"string":if(a=this.StringValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"regex":if(a=this.RegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"number":if(a=this.NumberValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field]))return a;break;case"url":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],lt.url.regex,lt.url.inputValueType))return a;break;case"date":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],lt.date.regex,lt.date.inputValueType))return a;break;case"email":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],lt.email.regex,lt.email.inputValueType))return a;break;case"ipv4":if(a=this.PreDefinedRegexValidator(this.entities[o].field,this.entities[o].label,this.entities[o].validators[i],t[this.entities[o].field],lt.ipv4.regex,lt.ipv4.inputValueType))return a;break;case"custom":if(a=e.CustomValidator(this.entities[o].validators[i].validatorFunc,this.entities[o].field,t[this.entities[o].field]))return a}}return!1}}],[{key:"CustomValidator",value:function(e,t,n){var r=e(t,n);return"string"==typeof r&&{errorField:t,errorMsg:r}}}]),e}(),pt=n(293),ft=n(50),ht=n(292);function mt(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function vt(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?mt(Object(n),!0).forEach((function(t){E()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):mt(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function gt(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=y()(e);if(t){var a=y()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return g()(this,n)}}var bt=Object(q.default)(F.a)(st||(st=k()(["\n    span {\n        button {\n            background-color: transparent;\n            font-size: 16px;\n            margin: 10px 0;\n\n            &:hover:not([disabled]),\n            &:focus:not([disabled]),\n            &:active:not([disabled]) {\n                background-color: transparent;\n                box-shadow: none;\n            }\n        }\n    }\n\n    .collapsible-element {\n        padding-top: 15px;\n    }\n"]))),yt=q.default.div(ut||(ut=k()(["\n    padding: 6px 10px;\n    background-color: #f2f4f5;\n"]))),Ot=function(e){m()(n,e);var t=gt(n);function n(e,r){var a;s()(this,n),a=t.call(this,e),E()(f()(a),"updateEntitiesForGroup",(function(e){a.groups&&a.groups.length&&a.groups.forEach((function(t){var n;t&&null!==(n=t.fields)&&void 0!==n&&n.length&&t.fields.forEach((function(t){var n=e.entity.findIndex((function(e){return e.field===t}));if(-1!==n){var r=JSON.parse(JSON.stringify(e.entity[n]));r.isGrouping=!0,a.entities.splice(n,1,r)}}))}))})),E()(f()(a),"handleSubmit",(function(){if((a.clearErrorMsg(),a.props.handleFormSubmit(!0,!1),a.datadict={},Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),a.hook&&"function"==typeof a.hook.onSave)&&!a.hook.onSave(a.datadict))return void a.props.handleFormSubmit(!1,!1);var e=function(){var e;if((Object.keys(a.state.data).forEach((function(e){a.datadict[e]=a.state.data[e].value})),[pt.c,pt.a].includes(a.props.mode))&&Boolean(Object.values(a.context.rowData).find((function(e){return Object.keys(e).find((function(e){return e===a.datadict.name}))})))){var t=a.entities.findIndex((function(e){return"name"===e.field}));return a.setErrorFieldMsg("name",Object(xe.a)(2,[a.entities[t].label,a.datadict.name])),void a.props.handleFormSubmit(!1,!1)}if(a.isOAuth){var n=[];Object.keys(a.authMap).forEach((function(e){e!==a.datadict.auth_type&&a.isAuthVal||(n=[].concat(l()(n),l()(a.authMap[e])))})),e=a.entities.map((function(e){return n.includes(e.field)?vt({required:!0},e):e}))}else e=a.entities;var r=new dt(e).doValidation(a.datadict);if(r?a.setErrorFieldMsg(r.errorField,r.errorMsg):a.options&&a.options.saveValidator&&(r=function(e,t){var n=Object(ct.a)(e),r=n.error,a=n.result;if(r)return{errorMsg:r};var o=a(t);return"string"==typeof o?{errorMsg:o}:void 0}(a.options.saveValidator,a.datadict))&&a.setErrorMsg(r.errorMsg),r)a.props.handleFormSubmit(!1,!1);else if(a.isOAuth&&(a.isSingleOauth||a.isAuthVal&&"oauth"===a.datadict.auth_type)){var i="?response_type=code&client_id=".concat(a.datadict.client_id,"&redirect_uri=").concat(a.datadict.redirect_url),c=null!=a.isoauthState&&a.isoauthState;"true"!==c&&!0!==c||(a.state_enabled=!0,a.oauth_state=Object(_.a)().replace(/-/g,""),i="".concat(i,"&state=").concat(a.oauth_state));var s="https://".concat(a.datadict.endpoint).concat(a.oauthConf.authCodeEndpoint).concat(i);o()(C.a.mark((function e(){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return a.isCalled=!1,a.isError=!1,a.isResponse=!1,a.childWin=window.open(s,"".concat(a.appName," OAuth"),"width=".concat(a.oauthConf.popupWidth,", height=").concat(a.oauthConf.popupHeight)),window.getMessage=function(e){a.isCalled=!0,a.handleOauthToken(e)},e.next=7,a.waitForAuthentication(a.oauthConf.authTimeout);case 7:if(a.isCalled||!a.childWin.closed){e.next=11;break}return a.setErrorMsg("Authentication process interrupted. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 11:if(a.isCalled){e.next=15;break}return a.setErrorMsg("Request time out while authenticating. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 15:return e.next=17,a.waitForBackendResponse(30);case 17:if(a.isResponse||a.isError){e.next=22;break}return a.isError=!0,a.setErrorMsg("Request time out while getting accesstoken. Please try again."),a.props.handleFormSubmit(!1,!1),e.abrupt("return",!1);case 22:return e.abrupt("return",!0);case 23:case"end":return e.stop()}}),e)})))().then((function(){a.isError?a.props.handleFormSubmit(!1,!1):a.saveData()}))}else a.saveData()};a.hook&&"function"==typeof a.hook.onSave&&void 0!==a.onSavePromise?a.onSavePromise.then((function(){e()})):e()})),E()(f()(a),"saveData",(function(){var e=new URLSearchParams;Object.keys(a.datadict).forEach((function(t){null!=a.datadict[t]&&e.append(t,a.datadict[t])})),a.isAuthVal&&Object.keys(a.authMap).forEach((function(t){a.datadict.auth_type!==t&&a.authMap[t].forEach((function(t){e.set(t,"")}))})),a.isOAuth&&e.delete("redirect_url"),a.props.mode===pt.d&&e.delete("name"),Object(ge.a)({serviceName:a.endpoint,body:e,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){var t,n=null==e||null===(t=e.data)||void 0===t?void 0:t.entry[0];if(a.props.mode!==pt.b){var r={};r[n.name]=vt(vt(vt({},a.datadict),n.content),{},{id:n.id,name:n.name,serviceName:a.props.serviceName}),a.context.setRowData(M()(a.context.rowData,E()({},a.props.serviceName,{$merge:r})))}a.hook&&"function"==typeof a.hook.onSaveSuccess&&a.hook.onSaveSuccess(),a.props.mode===pt.d?Object(be.c)('Updated "'.concat(n.name,'"'),"success"):a.props.mode===pt.b?Object(be.c)('Updated "'.concat(a.mode_config_title?a.mode_config_title:n.name,'"'),"success"):Object(be.c)('Created "'.concat(n.name,'"'),"success"),a.props.handleFormSubmit(!1,!0)})).catch((function(e){var t=Object(xe.b)(e);a.setState({errorMsg:t}),a.hook&&"function"==typeof a.hook.onSaveFail&&a.hook.onSaveFail(),a.props.handleFormSubmit(!1,!1)}))})),E()(f()(a),"handleChange",(function(e,t){var n={};if("auth_type"===e&&Object.keys(a.authMap).forEach((function(e){e===t?a.authMap[e].forEach((function(e){n[e]={display:{$set:!0}}})):a.authMap[e].forEach((function(e){n[e]={display:{$set:!1}}}))})),a.dependencyMap.has(e)){var r=a.dependencyMap.get(e);Object.keys(r).forEach((function(o){var i={},l=!0;r[o].forEach((function(n){var r=!!a.entities.find((function(e){return e.field===n})).required,o=n===e?t:a.state.data[n].value;r&&!o?(l=!1,i[n]=null):i[n]=o})),l&&(n[o]={dependencyValues:{$set:i},value:{$set:null}})}))}n[e]={value:{$set:t}};var o=M()(a.state,{data:n}),i=a.clearAllErrorMsg(o);a.setState(i),a.hookDeferred&&a.hookDeferred.then((function(){"function"==typeof a.hook.onChange&&a.hook.onChange(e,t,i)}))})),E()(f()(a),"addCustomValidator",(function(e,t){var n=a.entities.findIndex((function(t){return t.field===e})),r=[{type:"custom",validatorFunc:t}];a.entities[n].validators=r})),E()(f()(a),"setErrorFieldMsg",(function(e,t){a.setState((function(n){var r=M()(n,{data:E()({},e,{error:{$set:!0}})});return r.errorMsg=t,r}))})),E()(f()(a),"setErrorField",(function(e){a.setState((function(t){return M()(t,{data:E()({},e,{error:{$set:!0}})})}))})),E()(f()(a),"clearErrorMsg",(function(){a.state.errorMsg&&a.setState((function(e){return vt(vt({},e),{},{errorMsg:""})}))})),E()(f()(a),"setErrorMsg",(function(e){a.setState((function(t){return vt(vt({},t),{},{errorMsg:e})}))})),E()(f()(a),"clearAllErrorMsg",(function(e){var t=vt({},e||a.state);t.errorMsg="",t.warningMsg="";var n=vt({},e?e.data:a.state.data),r={};return Object.keys(n).forEach((function(e){n[e].error?r[e]=vt(vt({},n[e]),{},{error:!1}):r[e]=n[e]})),t.data=r,e?t:null})),E()(f()(a),"generateErrorMessage",(function(){return a.state.errorMsg?S.a.createElement(V.a,{appearance:"fill",type:"error"},a.state.errorMsg):null})),E()(f()(a),"generateWarningMessage",(function(){return a.state.warningMsg?S.a.createElement(V.a,{appearance:"fill",type:"warning"},a.state.warningMsg):null})),E()(f()(a),"loadHook",(function(e,t,n){return new Promise((function(r){"external"===t?import("".concat(Object(Xe.a)(),"/custom/").concat(e,".js")).then((function(e){var t=e.default;a.hook=new t(n,a.props.serviceName,a.state,a.props.mode,a.util),r(t)})):require(["app/".concat(a.appName,"/js/build/custom/").concat(e)],(function(e){a.hook=new e(n,a.props.serviceName,a.state,a.props.mode,a.util),r(e)}))}))})),E()(f()(a),"handleOauthToken",(function(e){if(!e||e&&e.error||void 0===e.code)return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1;var t=e.state;if(!0===a.state_enabled&&a.oauth_state!==t)return a.setErrorMsg("Response not received from the expected sender. Please try again."),a.isError=!0,a.isResponse=!0,!1;var n=decodeURIComponent(e.code),r={method:"POST",url:"https://".concat(a.datadict.endpoint).concat(a.oauthConf.accessTokenEndpoint),grant_type:"authorization_code",client_id:a.datadict.client_id,client_secret:a.datadict.client_secret,code:n,redirect_uri:a.datadict.redirect_url},o=new URLSearchParams;Object.keys(r).forEach((function(e){o.append(e,r[e])}));var i="".concat(a.appName,"_oauth/oauth");Object(ge.a)({endpointUrl:i,body:o,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!1}).then((function(e){if(void 0===e.data.entry[0].content.error){var t=e.data.entry[0].content.access_token,n=e.data.entry[0].content.instance_url,r=e.data.entry[0].content.refresh_token;return a.datadict.instance_url=n,a.datadict.refresh_token=r,a.datadict.access_token=t,a.isResponse=!0,!0}return a.setErrorMsg(e.data.entry[0].content.error),a.isError=!0,a.isResponse=!0,!1})).catch((function(){return a.setErrorMsg("Error occurred while trying to authenticate. Please try Again."),a.isError=!0,a.isResponse=!0,!1}))})),E()(f()(a),"waitForAuthentication",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t-=1,!0!==a.isCalled){e.next=3;break}return e.abrupt("return",!0);case 3:if(0!==t&&!a.childWin.closed){e.next=6;break}return a.isError=!0,e.abrupt("return",!1);case 6:return e.next=8,a.sleep(a.waitForAuthentication,t);case 8:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"waitForBackendResponse",function(){var e=o()(C.a.mark((function e(t){return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t+=1,!0!==a.isResponse){e.next=3;break}return e.abrupt("return",!0);case 3:if(60!==t){e.next=5;break}return e.abrupt("return",!1);case 5:return e.next=7,a.sleep(a.waitForBackendResponse,t);case 7:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"sleep",function(){var e=o()(C.a.mark((function e(t){var n,r,o,i=arguments;return C.a.wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.next=2,a.timeout(1e3);case 2:for(n=i.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=i[o];return e.abrupt("return",t.apply(void 0,r));case 4:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}()),E()(f()(a),"timeout",(function(e){return new Promise((function(t){return setTimeout(t,e)}))})),E()(f()(a),"renderGroupElements",(function(){var e=null;return a.groups&&a.groups.length&&(e=a.groups.map((function(e){var t,n=(null===(t=e.fields)||void 0===t?void 0:t.length)&&e.fields.map((function(e){return a.entities.map((function(t){if(t.field===e){var n=a.state.data[t.field];return S.a.createElement(it,{key:t.field,utilityFuncts:a.utilControlWrapper,value:n.value,display:n.display,error:n.error,entity:t,serviceName:a.props.serviceName,mode:a.props.mode,disabled:n.disabled,markdownMessage:n.markdownMessage,dependencyValues:n.dependencyValues||null})}return null}))}));return e.options.isExpandable?S.a.createElement(bt,{title:e.label},S.a.createElement("div",{className:"collapsible-element"},n)):S.a.createElement(S.a.Fragment,null,S.a.createElement(yt,null,e.label),S.a.createElement("div",null,n))}))),e})),a.flag=!0,a.state={},a.currentInput={};var i=Object(be.d)();a.appName=i.meta.name,a.endpoint=e.mode===pt.d||e.mode===pt.b?"".concat(a.props.serviceName,"/").concat(encodeURIComponent(a.props.stanzaName)):"".concat(a.props.serviceName),a.util={setState:function(e){a.onSavePromise=new Promise((function(t){a.setState((function(t){return e(t)}),t)}))},setErrorFieldMsg:a.setErrorFieldMsg,clearAllErrorMsg:a.clearAllErrorMsg,setErrorMsg:a.setErrorMsg},a.utilControlWrapper={handleChange:a.handleChange,addCustomValidator:a.addCustomValidator,utilCustomFunctions:a.util},e.page===ft.b?i.pages.inputs.services.forEach((function(t){t.name===e.serviceName&&(a.groups=t.groups,a.entities=t.entity,a.updateEntitiesForGroup(t),a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),e.mode!==pt.d&&e.mode!==pt.a||(a.currentInput=r.rowData[e.serviceName][e.stanzaName]))})):i.pages.configuration.tabs.forEach((function(t){(t.table?t.name===e.serviceName:t.name===e.stanzaName)&&(a.entities=t.entity,a.options=t.options,t.hook&&(a.hookDeferred=a.loadHook(t.hook.src,t.hook.type,i)),!t.table||e.mode!==pt.d&&e.mode!==pt.a?e.mode===pt.b?(a.currentInput=e.currentServiceState,a.mode_config_title=t.title):a.currentInput=r.rowData[e.serviceName]:a.currentInput=r.rowData[e.serviceName][e.stanzaName])})),a.dependencyMap=new Map,a.isOAuth=!1,a.isAuthVal=!1,a.authMap={};var c={},u=[];a.entities.forEach((function(t){if("oauth"===t.type){if(a.isOAuth=!0,e.page===ft.a&&"account"===e.serviceName){var n,r,o,i=null==t||null===(n=t.options)||void 0===n?void 0:n.auth_type;if(a.isoauthState=void 0!==(null==t||null===(r=t.options)||void 0===r?void 0:r.oauth_state_enabled)?null==t||null===(o=t.options)||void 0===o?void 0:o.oauth_state_enabled:null,i.length>1){a.isAuthVal=!0;var l={};l.value=void 0!==a.currentInput.auth_type?a.currentInput.auth_type:i[0],l.display=!0,l.error=!1,l.disabled=!1,c.auth_type=l;var s={field:"auth_type",type:"singleSelect",label:"Auth Type"},d={basic:"Basic Authentication",oauth:"OAuth 2.0 Authentication"};s.options={},s.options.hideClearBtn=!0,s.options.autoCompleteFields=i.map((function(e){return{label:d[e],value:e}})),u.push(s)}else a.isSingleOauth=i.includes("oauth");if(i.forEach((function(n){var r=[],o=null==t?void 0:t.options[n];o&&(o.forEach((function(t){var o={};if(e.mode===pt.c)o.value=void 0!==(null==t?void 0:t.defaultValue)?t.defaultValue:null;else{var i=void 0!==(null==t?void 0:t.encrypted)&&(null==t?void 0:t.encrypted);o.value=i?"":a.currentInput[t.field]}o.display=void 0===c.auth_type||n===c.auth_type.value,o.error=!1,o.disabled=!1,c[t.field]=o,t.type=void 0!==(null==t?void 0:t.type)?t.type:"text","redirect_url"===t.field&&(o.value=window.location.href.split("?")[0].replace("configuration","".concat(a.appName.toLowerCase(),"_redirect")),o.disabled=!0),u.push(t),r.push(t.field)})),a.authMap[n]=r)})),i.includes("oauth")){var p={};p.popupWidth=t.options.oauth_popup_width?t.options.oauth_popup_width:600,p.popupHeight=t.options.oauth_popup_height?t.options.oauth_popup_height:600,p.authTimeout=t.options.oauth_timeout?t.options.oauth_timeout:180,p.authCodeEndpoint=t.options.auth_code_endpoint?t.options.auth_code_endpoint:null,p.accessTokenEndpoint=t.options.access_token_endpoint?t.options.access_token_endpoint:null,a.oauthConf=p}}}else{var f,h,m={};if(t.encrypted=void 0!==t.encrypted&&t.encrypted,e.mode===pt.c)m.value=void 0!==t.defaultValue?t.defaultValue:null,m.display=void 0===(null==t||null===(h=t.options)||void 0===h?void 0:h.display)||t.options.display,m.error=!1,m.disabled=!1,c[t.field]=m;else if(e.mode===pt.d){var v,g;m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:null,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(v=t.options)||void 0===v?void 0:v.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(g=t.options)||void 0===g?void 0:g.disableonEdit)&&(m.disabled=t.options.disableonEdit),c[t.field]=m}else if(e.mode===pt.a){var b;m.value="name"===t.field||t.encrypted?"":a.currentInput[t.field],m.display=void 0===(null==t||null===(b=t.options)||void 0===b?void 0:b.display)||t.options.display,m.error=!1,m.disabled=!1,c[t.field]=m}else{if(e.mode!==pt.b)throw new Error("Invalid mode :",e.mode);var y,O;t.defaultValue=void 0!==t.defaultValue?t.defaultValue:null,m.value=void 0!==a.currentInput[t.field]?a.currentInput[t.field]:t.defaultValue,m.value=t.encrypted?"":m.value,m.display=void 0===(null==t||null===(y=t.options)||void 0===y?void 0:y.display)||t.options.display,m.error=!1,m.disabled=!1,"name"===t.field?m.disabled=!0:void 0!==(null==t||null===(O=t.options)||void 0===O?void 0:O.disableonEdit)&&(m.disabled=t.options.disableonEdit),c[t.field]=m}var j=null===(f=t.options)||void 0===f?void 0:f.dependencies;j&&j.forEach((function(e){var n=a.dependencyMap.get(e);n?n[t.field]=j:a.dependencyMap.set(e,E()({},t.field,j))})),u.push(t)}})),a.entities=u;var d={};a.dependencyMap.forEach((function(e){d=vt(vt({},d),e)}));var p={};return Object.keys(d).forEach((function(e){var t=d[e],n={},r=!0;t.forEach((function(e){var t=!!a.entities.find((function(t){return t.field===e})).required,o=c[e].value;t&&!o?(r=!1,n[e]=null):n[e]=o})),r&&(p[e]={dependencyValues:{$set:n}})})),c=M()(c,p),a.state={data:c,errorMsg:"",warningMsg:""},a.hookDeferred&&a.hookDeferred.then((function(){if("function"==typeof a.hook.onCreate)try{a.hook.onCreate()}catch(e){console.error(e)}})),a}return d()(n,[{key:"render",value:function(){var e=this;return this.flag&&(this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onRender)try{e.hook.onRender()}catch(e){console.error(e)}})),this.props.mode===pt.d&&this.hookDeferred&&this.hookDeferred.then((function(){if("function"==typeof e.hook.onEditLoad)try{e.hook.onEditLoad()}catch(e){console.error(e)}})),this.flag=!1),S.a.createElement("div",null,S.a.createElement("form",{style:this.props.mode===pt.b?{marginTop:"25px"}:{}},this.generateWarningMessage(),this.generateErrorMessage(),this.renderGroupElements(),this.entities.map((function(t){var n;if(t.isGrouping)return null;var r=e.state.data[t.field];return r.placeholder&&(t=vt(vt({},t),{},{options:vt(vt({},t.options),{},{placeholder:r.placeholder})})),t.required||Object.prototype.hasOwnProperty.call(t,"oauth_field")||null!==(n=t.options)&&void 0!==n&&n.placeholder||(t.options=vt(vt({},t.options),{},{placeholder:"optional"})),S.a.createElement(it,{key:t.field,utilityFuncts:e.utilControlWrapper,value:r.value,display:r.display,error:r.error,entity:t,serviceName:e.props.serviceName,mode:e.props.mode,disabled:r.disabled,markdownMessage:r.markdownMessage,dependencyValues:r.dependencyValues||null})}))))}}]),n}(R.PureComponent);E()(Ot,"contextType",ht.b),Ot.propTypes={page:N.a.string,serviceName:N.a.string,stanzaName:N.a.string,currentServiceState:N.a.object,mode:N.a.string,handleFormSubmit:N.a.func};t.a=Ot},353:function(e,t,n){"use strict";n.d(t,"b",(function(){return r})),n.d(t,"a",(function(){return a}));var r="page",a="modal"},360:function(e,t,n){"use strict";var r=n(288),a=n.n(r),o=n(72),i=n.n(o),l=n(0),c=n.n(l),s=n(318),u=n.n(s),d=n(52),p=n.n(d),f=n(3),h=n.n(f),m=n(77),v=n(294),g=n(47),b=n(354),y=n.n(b),O=n(319),E=n.n(O),j=n(7),k=n(321),w=n(293),C=n(50),R=n(14),S=n.n(R),x=n(449),N=n.n(x),P=n(1),M=n(33),_=n.n(M),T=n(34),F=n.n(T),D=n(129),V=n.n(D),q=n(36),A=n.n(q),z=n(37),I=n.n(z),B=n(21),L=n.n(B),H=n(39);function U(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L()(e);if(t){var a=L()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var $=function(e){A()(n,e);var t=U(n);function n(e){var r;return _()(this,n),r=t.call(this,e),a()(V()(r),"loadCustomControl",(function(){return new Promise((function(e){if("external"===r.props.type)import("".concat(Object(H.a)(),"/custom/").concat(r.props.fileName,".js")).then((function(t){var n=t.default;e(n)}));else{var t=Object(g.d)().meta.name;require(["app/".concat(t,"/js/build/custom/").concat(r.props.fileName)],(function(t){return e(t)}))}}))})),r.state={loading:!0},r.shouldRender=!0,r}return F()(n,[{key:"componentDidMount",value:function(){var e=this,t=Object(g.d)();this.setState({loading:!0}),this.loadCustomControl().then((function(n){e.customControl=new n(t,e.props.serviceName,e.el,e.props.row,e.props.field),e.setState({loading:!1})}))}},{key:"shouldComponentUpdate",value:function(e,t){return this.props.row!==e.row||!(t.loading||!this.shouldRender)&&(this.shouldRender=!1,!0)}},{key:"render",value:function(){var e=this;if(!this.state.loading)try{this.customControl.render(this.props.row,this.props.field)}catch(e){console.error(e)}return c.a.createElement(c.a.Fragment,null,this.state.loading&&Object(j._)("Loading..."),c.a.createElement("span",{ref:function(t){e.el=t},style:{visibility:this.state.loading?"hidden":"visible"}}))}}]),n}(l.Component);$.propTypes={serviceName:h.a.string.isRequired,row:h.a.object.isRequired,field:h.a.string,fileName:h.a.string.isRequired,type:h.a.string};var W,K=$,Z=Object(P.default)(E.a.Cell)(W||(W=S()(["\n    border-top: none;\n"])));function G(e,t,n){var r=Object(g.d)().pages.inputs.table.customRow;return c.a.createElement(E.a.Row,{key:"".concat(t.id,"-expansion")},c.a.createElement(Z,{colSpan:e},r&&r.src?c.a.createElement(c.a.Fragment,null,c.a.createElement(K,{serviceName:t.serviceName,row:t,fileName:r.src,type:r.type})):c.a.createElement(N.a,{termWidth:250},function(e,t){var n=[];return null!=t&&t.length&&t.forEach((function(t){var r=Object(j._)(t.label);t.field in e&&null!==e[t.field]&&""!==e[t.field]&&(n.push(c.a.createElement(N.a.Term,{key:t.field},r)),n.push(c.a.createElement(N.a.Description,{key:"".concat(t.field,"_decr")},t.mapping&&t.mapping[e[t.field]]?t.mapping[e[t.field]]:String(e[t.field]))))})),n}(t,n))))}var X,J,Q=n(353),Y=n(76),ee=n.n(Y),te=n(300),ne=n.n(te),re=n(356),ae=n.n(re),oe=n(320),ie=n.n(oe),le=n(450),ce=n.n(le),se=n(451),ue=n.n(se),de=n(452),pe=n.n(de),fe=Object(P.default)(E.a.Cell)(X||(X=S()(["\n    padding: 2px;\n"]))),he=P.default.div(J||(J=S()(["\n    display: flex;\n\n    .toggle_switch {\n        padding: 0;\n        margin-right: 10px;\n    }\n"])));function me(e){var t=e.row,n=e.columns,r=e.headerMapping,a=e.handleToggleActionClick,o=e.handleEditActionClick,i=e.handleCloneActionClick,s=e.handleDeleteActionClick,u=Object(l.useCallback)((function(e){return c.a.createElement(fe,{"data-column":"actions",key:e.id},c.a.createElement(ae.a,null,c.a.createElement(ie.a,{content:Object(j._)("Edit")},c.a.createElement(m.a,{appearance:"flat",icon:c.a.createElement(ce.a,{screenReaderText:null,size:1}),onClick:function(){return o(e)},className:"editBtn"})),c.a.createElement(ie.a,{content:Object(j._)("Clone")},c.a.createElement(m.a,{appearance:"flat",icon:c.a.createElement(ue.a,{screenReaderText:null,size:1}),onClick:function(){return i(e)},className:"cloneBtn"})),c.a.createElement(ie.a,{content:Object(j._)("Delete")},c.a.createElement(m.a,{appearance:"destructive",icon:c.a.createElement(pe.a,{screenReaderText:null,size:1}),onClick:function(){return s(e)},className:"deleteBtn"}))))}),[o,i,s]),d="Enabled";return t.__toggleShowSpinner?d=c.a.createElement(ee.a,null):t.disabled&&(d=null!=r&&r.disabled&&r.disabled[t.disabled]?r.disabled[t.disabled]:"Disabled"),c.a.createElement(c.a.Fragment,null,c.a.createElement(E.a.Row,y()({key:t.id},e),n&&n.length&&n.map((function(e){var n="";if(e.customCell&&e.customCell.src)n=c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},function(e,n){return c.a.createElement(K,{serviceName:t.serviceName,field:n.field,row:e,fileName:n.customCell.src,type:n.customCell.type})}(t,e));else if("disabled"===e.field){var o,i;n=c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},c.a.createElement(he,null,c.a.createElement(ne.a,{key:t.name,value:t.disabled,onClick:function(){return a(t)},selected:!t.disabled,disabled:t.__toggleShowSpinner,appearance:"toggle",className:"toggle_switch",selectedLabel:Object(j._)(null!=r&&null!==(o=r.disabled)&&void 0!==o&&o.false?r.disabled.false:"Enabled"),unselectedLabel:Object(j._)(null!=r&&null!==(i=r.disabled)&&void 0!==i&&i.true?r.disabled.true:"Disabled")}),c.a.createElement("span",{"data-test":"status"},d)))}else n="actions"===e.field?u(t):c.a.createElement(E.a.Cell,{"data-column":e.field,key:e.field},r[e.field]&&Object.prototype.hasOwnProperty.call(r[e.field],t[e.field])?r[e.field][t[e.field]]:t[e.field]);return n}))))}me.propTypes={row:h.a.any,columns:h.a.array,headerMapping:h.a.object,handleToggleActionClick:h.a.func,handleEditActionClick:h.a.func,handleCloneActionClick:h.a.func,handleDeleteActionClick:h.a.func};var ve,ge=c.a.memo(me),be=n(322),ye=n(35),Oe=n.n(ye),Ee=n(30),je=n.n(Ee),ke=n(91),we=n.n(ke),Ce=n(292),Re=n(8);function Se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function xe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Se(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ne(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=L()(e);if(t){var a=L()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return I()(this,n)}}var Pe=Object(P.default)(je.a)(ve||(ve=S()(["\n    width: 800px;\n"]))),Me=function(e){A()(n,e);var t=Ne(n);function n(e){var r;return _()(this,n),r=t.call(this,e),a()(V()(r),"handleRequestClose",(function(){r.state.ErrorMsg="",r.props.handleRequestClose()})),a()(V()(r),"handleDelete",(function(){r.setState((function(e){return xe(xe({},e),{},{isDeleting:!0,ErrorMsg:""})}),(function(){Object(v.a)({serviceName:"".concat(r.props.serviceName,"/").concat(encodeURIComponent(r.props.stanzaName)),customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"delete",handleError:!1}).catch((function(e){var t=Object(Re.b)(e);return r.setState({ErrorMsg:t,isDeleting:!1}),Promise.reject(e)})).then((function(){r.context.setRowData(u()(r.context.rowData,a()({},r.props.serviceName,{$unset:[r.props.stanzaName]}))),r.setState({isDeleting:!1}),r.handleRequestClose(),Object(g.c)('Deleted "'.concat(r.props.stanzaName,'"'),"success")}))}))})),a()(V()(r),"generateErrorMessage",(function(){return r.state.ErrorMsg?c.a.createElement("div",null,c.a.createElement(we.a,{appearance:"fill",type:"error"},r.state.ErrorMsg)):null})),r.state={isDeleting:!1,ErrorMsg:""},r}return F()(n,[{key:"render",value:function(){var e;return e=this.props.page===C.b?Object(Re.a)(103,[this.props.stanzaName]):Object(Re.a)(102,[this.props.stanzaName]),c.a.createElement(Pe,{open:this.props.open},c.a.createElement(je.a.Header,{title:Object(Re.a)(101),onRequestClose:this.handleRequestClose}),c.a.createElement(je.a.Body,{className:"deletePrompt"},this.generateErrorMessage(),c.a.createElement("p",null,e)),c.a.createElement(je.a.Footer,null,c.a.createElement(Oe.a,{appearance:"secondary",onClick:this.handleRequestClose,label:Object(j._)("Cancel"),disabled:this.state.isDeleting}),c.a.createElement(Oe.a,{appearance:"primary",label:this.state.isDeleting?c.a.createElement(ee.a,null):Object(j._)("Delete"),onClick:this.handleDelete,disabled:this.state.isDeleting})))}}]),n}(l.Component);a()(Me,"contextType",Ce.b),Me.propTypes={page:h.a.string.isRequired,open:h.a.bool,handleRequestClose:h.a.func,serviceName:h.a.string,stanzaName:h.a.string};var _e=Me;function Te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Te(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function De(e){var t=e.page,n=e.serviceName,r=e.data,a=e.handleToggleActionClick,o=e.handleOpenPageStyleDialog,s=e.handleSort,u=e.sortDir,d=e.sortKey,p=Object(g.d)(),f=Object(l.useState)({open:!1}),h=i()(f,2),v=h[0],b=h[1],O=Object(l.useState)({open:!1}),R=i()(O,2),S=R[0],x=R[1],N=Object(l.useContext)(Ce.b).rowData,P=t===C.b?p.pages.inputs.table:p.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,M=P.moreInfo,_=P.header,T=P.header,F={};_.forEach((function(e){F[e.field]=e.mapping}));var D={};t===C.b&&p.pages.inputs.services.forEach((function(e){D[e.name]=e.style===Q.b?Q.b:Q.a}));var V=Object(k.a)();Object(l.useEffect)((function(){if(V&&(V.get("tab")===n||void 0===n))if(V.get("record")&&!v.open){var e=Object.keys(N).find((function(e){return void 0!==N[e][V.get("record")]}));if(e){var t=N[e][V.get("record")];b(Fe(Fe({},v),{},{open:!0,serviceName:t.serviceName,stanzaName:t.name,mode:w.d}))}}else!V.get("record")&&v.open&&b(Fe(Fe({},v),{},{open:!1}))}),[]);var q,A=function(){b(Fe(Fe({},v),{},{open:!1}))},z=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.d):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.d}))}),[v]),I=function(){x(Fe(Fe({},S),{},{open:!1}))},B=Object(l.useCallback)((function(e){"page"===D[e.serviceName]?o(e,w.a):b(Fe(Fe({},v),{},{open:!0,serviceName:e.serviceName,stanzaName:e.name,mode:w.a}))}),[v]),L=Object(l.useCallback)((function(e){x(Fe(Fe({},S),{},{open:!0,stanzaName:e.name,serviceName:e.serviceName}))}),[S]),H=(q=[],T&&T.length&&T.forEach((function(e){q.push(Fe(Fe({},e),{},{sortKey:e.field||null,isCustomMapping:!!e.mapping}))})),q.push({label:"Actions",field:"actions",sortKey:""}),q),U=Object(l.useCallback)((function(){return c.a.createElement(E.a.Head,null,H&&H.length&&H.map((function(e){return c.a.createElement(E.a.HeadCell,{key:e.field,onSort:function(t){return e.sortKey?s(t,e):null},sortKey:e.sortKey?e.sortKey:null,sortDir:e.sortKey&&e.sortKey===d?u:"none"},e.label)})))}),[H,s,u,d]);return c.a.createElement(c.a.Fragment,null,H&&H.length&&c.a.createElement(E.a,y()({stripeRows:!0},M?{rowExpansion:"single"}:{}),U(),c.a.createElement(E.a.Body,null,r&&r.length&&r.map((function(e){return c.a.createElement(ge,y()({key:e.id,row:e,columns:H,headerMapping:F,handleEditActionClick:z,handleCloneActionClick:B,handleDeleteActionClick:L,handleToggleActionClick:a},M?{expansionRow:G(H.length,e,M)}:{}))})))),r.length?null:c.a.createElement(m.b,null,"No records found"),function(){if(v.open){var e,n,r,a,o;if("inputs"===t)e=null===(r=(null===(n=p.pages)||void 0===n?void 0:n.inputs).services.find((function(e){return e.name===v.serviceName})))||void 0===r?void 0:r.title;else e=null===(o=(null===(a=p.pages)||void 0===a?void 0:a.configuration).tabs.find((function(e){return e.name===v.serviceName})))||void 0===o?void 0:o.title;return c.a.createElement(be.a,{page:t,open:v.open,handleRequestClose:A,serviceName:v.serviceName,stanzaName:v.stanzaName,mode:v.mode,formLabel:v.mode===w.a?Object(j._)("Clone ")+e:Object(j._)("Update ")+e})}return null}(),c.a.createElement(_e,{page:t,open:S.open,handleRequestClose:I,serviceName:S.serviceName,stanzaName:S.stanzaName}))}De.propTypes={page:h.a.string.isRequired,serviceName:h.a.string,data:h.a.array.isRequired,handleToggleActionClick:h.a.func,handleOpenPageStyleDialog:h.a.func,handleSort:h.a.func,sortDir:h.a.string,sortKey:h.a.string};var Ve=Object(l.memo)(De),qe=n(359),Ae=n.n(qe),ze=n(488),Ie=n.n(ze),Be=n(297),Le=n.n(Be);function He(e){var t,n,r;return c.a.createElement(Le.a,{appearance:"search",placeholder:"filter",onChange:(t=e.handleChange,n=200,function(){for(var e=arguments.length,a=new Array(e),o=0;o<e;o++)a[o]=arguments[o];var i=function(){r=null,t.apply(void 0,a)};clearTimeout(r),r=setTimeout(i,n)})})}He.propTypes={handleChange:h.a.func};var Ue,$e,We=He,Ke=P.default.div(Ue||(Ue=S()(["\n    display: flex;\n    justify-content: space-between;\n    border-top: 1px solid #ccc;\n    padding-top: 5px;\n    margin-bottom: 5px;\n"]))),Ze=P.default.div($e||($e=S()(["\n    max-width: 300px;\n    width: 100%;\n"])));function Ge(e){var t=e.page,n=e.services,r=e.totalElement,a=e.handleRequestModalOpen,o=Object(l.useContext)(Ce.b),i=o.pageSize,s=o.currentPage,u=o.setCurrentPage,d=o.setPageSize,p=o.searchType,f=o.setSearchType,h=o.setSearchText,v=t===C.b?"Input":"Item";return c.a.createElement(Ke,null,c.a.createElement("div",null,c.a.createElement("span",{className:"inputNumber"},r,r>1?Object(j._)(" ".concat(v,"s")):Object(j._)(" ".concat(v))),t===C.b?c.a.createElement(m.c,null,c.a.createElement(Ae.a,{value:i,className:"dropdownPage",onChange:function(e,t){var n=t.value;u(0),d(n)}},c.a.createElement(Ae.a.Option,{key:"10",label:Object(j._)("10 Per Page"),value:10}),c.a.createElement(Ae.a.Option,{key:"25",label:Object(j._)("25 Per Page"),value:25}),c.a.createElement(Ae.a.Option,{key:"50",label:Object(j._)("50 Per Page"),value:50})),function(){if(n.length<2)return null;var e=[];return(e=n.map((function(e){return c.a.createElement(Ae.a.Option,{key:e.name,label:e.title,value:e.name})}))).unshift(c.a.createElement(Ae.a.Option,{key:"all",label:Object(j._)("All"),value:"all"})),c.a.createElement(Ae.a,{value:p,className:"dropdownInput",onChange:function(e,t){var n=t.value;u(0),f(n)}},e)}()):null),c.a.createElement(Ze,null,c.a.createElement(We,{handleChange:function(e,t){var n=t.value;u(0),h(n)}})),c.a.createElement("div",null,c.a.createElement(Ie.a,{onChange:function(e,t){var n=t.page;return u(n-1)},current:s+1,alwaysShowLastPageLink:!0,totalPages:Math.ceil(r/i)}),t===C.b?null:c.a.createElement(Oe.a,{label:Object(j._)("Add"),appearance:"primary",onClick:a})))}Ge.propTypes={page:h.a.string,services:h.a.array,totalElement:h.a.number,handleRequestModalOpen:h.a.func};var Xe=Ge;function Je(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Je(Object(n),!0).forEach((function(t){a()(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Je(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e){var t=e.page,n=e.serviceName,r=e.handleRequestModalOpen,o=e.handleOpenPageStyleDialog,s=Object(l.useState)("name"),d=i()(s,2),f=d[0],h=d[1],b=Object(l.useState)("asc"),y=i()(b,2),O=y[0],E=y[1],j=Object(l.useState)(!1),k=i()(j,2),w=k[0],R=k[1],S=Object(l.useState)(!0),x=i()(S,2),N=x[0],P=x[1],M=Object(l.useState)(null),_=i()(M,2),T=_[0],F=_[1],D=Object(l.useContext)(Ce.b),V=D.rowData,q=D.setRowData,A=D.pageSize,z=D.currentPage,I=D.searchText,B=D.searchType,L=Object(g.d)(),H=t===C.b?L.pages.inputs.table:L.pages.configuration.tabs.filter((function(e){return e.name===n}))[0].table,U=H.header,$=H.moreInfo,W=t===C.b?L.pages.inputs.services:L.pages.configuration.tabs.filter((function(e){return e.name===n})),K=function(){var e=[];W.forEach((function(t){e.push(Object(v.a)({serviceName:t.name,params:{count:-1}}))})),p.a.all(e).catch((function(e){var n="",r="";return e.response?(n="Error received from server: ".concat(e.response.data.messages[0].text),r=t===C.b?"ERR0001":"ERR0002"):e.request?(n="No response received while making request to ".concat(t," services"),r="ERR0003"):(n="Error making request to ".concat(t," services"),r="ERR0004"),e.uccErrorCode=r,Object(g.c)(n),P(!1),F(e),Promise.reject(e)})).then((function(e){var t,n;t=e.map((function(e){return e.data.entry})),n={},W.forEach((function(e,r){if(e&&e.name&&t){var a={};t[r].forEach((function(t){a[t.name]=Qe(Qe({},t.content),{},{id:t.id,name:t.name,serviceName:e.name,serviceTitle:e.title||""})})),n[e.name]=a}})),q(n),P(!1)}))};Object(l.useEffect)((function(){K()}),[]);var Z=function(e){var t=[],n=[];return U.forEach((function(e){n.push(e.field)})),null==$||$.forEach((function(e){n.push(e.field)})),Object.keys(e).forEach((function(r){var a=!1;Object.keys(e[r]).forEach((function(o){n.includes(o)&&"string"==typeof e[r][o]&&e[r][o].toLowerCase().includes(I.toLowerCase().trim())&&!a&&(t.push(e[r]),a=!0)}))})),t};if(null!=T&&T.uccErrorCode)throw T;if(N)return c.a.createElement(m.d,null);var G=function(){var e=[];"all"===B?Object.keys(V).forEach((function(t){var n=[];n=I&&I.length?Z(V[t]):Object.keys(V[t]).map((function(e){return V[t][e]})),e=e.concat(n)})):e=Z(V[B]);var t=w?"serviceTitle":f,n=e.sort((function(e,n){if("asc"===O)return(void 0===e[t]?"":e[t])>(void 0===n[t]?"":n[t])?1:-1;if("desc"===O){var r=void 0===e[t]?"":e[t];return(void 0===n[t]?"":n[t])>r?1:-1}return 0})),r=n.slice(z*A,(z+1)*A);return z>0&&!r.length&&(r=n.slice((z-1)*A,A)),[r,e.length]}(),X=i()(G,2),J=X[0],Q=X[1];return c.a.createElement(c.a.Fragment,null,c.a.createElement(Xe,{page:t,services:W,totalElement:Q,handleRequestModalOpen:r}),c.a.createElement(Ve,{page:t,serviceName:n,data:J,handleToggleActionClick:function(e){return function(e){q((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!0}})))}));var t=new URLSearchParams;t.append("disabled",!e.disabled),Object(v.a)({serviceName:"".concat(e.serviceName,"/").concat(e.name),body:t,customHeaders:{"Content-Type":"application/x-www-form-urlencoded"},method:"post",handleError:!0,callbackOnError:function(){q((function(t){return u()(t,a()({},e.serviceName,a()({},e.name,{__toggleShowSpinner:{$set:!1}})))}))}}).then((function(t){q((function(n){return u()(n,a()({},e.serviceName,a()({},e.name,{disabled:{$set:Object(g.f)(t.data.entry[0].content.disabled)},__toggleShowSpinner:{$set:!1}})))}))}))}(e)},handleSort:function(e,t){var n=f===t.sortKey?O:"none";E("asc"===n?"desc":"asc"),h(t.sortKey),R(t.isCustomMapping)},sortDir:O,sortKey:f,handleOpenPageStyleDialog:o}))}Ye.propTypes={page:h.a.string,serviceName:h.a.string,handleRequestModalOpen:h.a.func,handleOpenPageStyleDialog:h.a.func};t.a=Object(l.memo)(Ye)},361:function(e,t,n){"use strict";var r=n(33),a=n.n(r),o=n(34),i=n.n(o),l=n(36),c=n.n(l),s=n(37),u=n.n(s),d=n(21),p=n.n(d),f=n(0),h=n.n(f),m=n(3),v=n.n(m),g=n(344),b=n.n(g),y=n(7),O=n(494),E=n.n(O),j=n(139),k=n.n(j),w=n(130),C=n.n(w),R={ERR0001:h.a.createElement(h.a.Fragment,null,"This is normal on Splunk search heads as they do not require an Input page. Check your installation or return to the ",h.a.createElement(C.a,{to:"configuration"},"configuration page"),"."),ERR0002:"Configuration page failed to load, the server reported internal errors which may indicate you do not have access to this page.",ERR0003:"Failed to load content due to no response from server!",ERR0004:"Failed to load content due to failed request processing!",ERR0005:"Failed to load current state for selected entity in form!"};function S(e){var t=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}();return function(){var n,r=p()(e);if(t){var a=p()(this).constructor;n=Reflect.construct(r,arguments,a)}else n=r.apply(this,arguments);return u()(this,n)}}var x=function(e){c()(n,e);var t=S(n);function n(e){var r;return a()(this,n),(r=t.call(this,e)).state={errorCode:null,error:null,errorInfo:null},r}return i()(n,[{key:"componentDidCatch",value:function(e,t){this.setState({error:e,errorInfo:t})}},{key:"render",value:function(){var e;return this.state.error?h.a.createElement("div",{align:"center",style:{marginTop:"10%"}},h.a.createElement(E.a,{style:{boxShadow:"10px 10px 5px #aaaaaa"}},h.a.createElement(E.a.Header,null,h.a.createElement(b.a,{style:{textAlign:"center"},level:2},h.a.createElement(k.a,{style:{fontSize:"120px",color:"#ff9900"}}),h.a.createElement("br",null),h.a.createElement("br",null),"ERR0001"===this.state.errorCode?Object(y._)("Failed to load Inputs Page"):Object(y._)("Something went wrong!"))),h.a.createElement(E.a.Body,null,this.state.errorCode?h.a.createElement(h.a.Fragment,null,Object(y._)(R[this.state.errorCode]),h.a.createElement("br",null),h.a.createElement("br",null)):null,h.a.createElement("details",{style:{whiteSpace:"pre-wrap"}},null===(e=this.state.error)||void 0===e?void 0:e.toString())),h.a.createElement(E.a.Footer,{showBorder:!1},this.state.errorCode?this.state.errorCode:null))):this.props.children}}],[{key:"getDerivedStateFromError",value:function(e){return{errorCode:e.uccErrorCode}}}]),n}(h.a.Component);x.propTypes={children:v.a.oneOfType([v.a.arrayOf(v.a.node),v.a.node]).isRequired};t.a=x}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29udGV4dC9UYWJsZUNvbnRleHQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvbW9kZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL3V0aWwvYXhpb3NDYWxsV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvcGFnZXMvSW5wdXQvSW5wdXRQYWdlU3R5bGUuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9ob29rcy91c2VRdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9FbnRpdHlNb2RhbC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvTWFya2Rvd25NZXNzYWdlLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9IZWxwTGlua0NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvVGV4dENvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvU2luZ2xlSW5wdXRDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL011bHRpSW5wdXRDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0NoZWNrQm94Q29tcG9uZW50LmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9SYWRpb0NvbXBvbmVudC5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvUGxhY2Vob2xkZXJDb21wb25lbnQuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0N1c3RvbUNvbnRyb2wuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvQ29udHJvbFR5cGVNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvQ29udHJvbFdyYXBwZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvcHJlRGVmaW5lZFJlZ2V4LmpzIiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC91dGlsL1ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy9CYXNlRm9ybVZpZXcuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvb0F1dGhFcnJvck1lc3NhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbnN0YW50cy9kaWFsb2dTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvQ3VzdG9tVGFibGVDb250cm9sLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9UYWJsZUV4cGFuc2lvblJvdy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvQ3VzdG9tVGFibGVSb3cuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL0RlbGV0ZU1vZGFsLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9DdXN0b21UYWJsZS5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvdGFibGUvVGFibGVGaWx0ZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb21wb25lbnRzL3RhYmxlL1RhYmxlSGVhZGVyLmpzeCIsIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvY29tcG9uZW50cy90YWJsZS9UYWJsZVdyYXBwZXIuanN4Iiwid2VicGFjazovLy8uL3NyYy9tYWluL3dlYmFwcC9jb25zdGFudHMvZXJyb3JDb2Rlcy5qc3giLCJ3ZWJwYWNrOi8vLy4vc3JjL21haW4vd2ViYXBwL2NvbXBvbmVudHMvRXJyb3JCb3VuZGFyeS5qc3giXSwibmFtZXMiOlsiVGFibGVDb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsInJvd0RhdGEiLCJzZXRSb3dEYXRhIiwiVGFibGVDb250ZXh0UHJvdmlkZXIiLCJjaGlsZHJlbiIsInVzZVN0YXRlIiwic2VhcmNoVGV4dCIsInNldFNlYXJjaFRleHQiLCJzZWFyY2hUeXBlIiwic2V0U2VhcmNoVHlwZSIsInBhZ2VTaXplIiwic2V0UGFnZVNpemUiLCJjdXJyZW50UGFnZSIsInNldEN1cnJlbnRQYWdlIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInByb3BUeXBlcyIsIlByb3BUeXBlcyIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJub2RlIiwiaXNSZXF1aXJlZCIsIk1PREVfQ0xPTkUiLCJNT0RFX0NSRUFURSIsIk1PREVfRURJVCIsIk1PREVfQ09ORklHIiwiYXhpb3NDYWxsV3JhcHBlciIsInNlcnZpY2VOYW1lIiwiZW5kcG9pbnRVcmwiLCJwYXJhbXMiLCJib2R5IiwiY2FuY2VsVG9rZW4iLCJjdXN0b21IZWFkZXJzIiwibWV0aG9kIiwiaGFuZGxlRXJyb3IiLCJjYWxsYmFja09uRXJyb3IiLCJlbmRwb2ludCIsImdlbmVyYXRlRW5kUG9pbnRVcmwiLCJhcHBEYXRhIiwiYXBwIiwib3duZXIiLCJiYXNlSGVhZGVycyIsIkNTUkZUb2tlbiIsImhlYWRlcnMiLCJPYmplY3QiLCJhc3NpZ24iLCJ1cmwiLCJjcmVhdGVSRVNUVVJMIiwibmV3UGFyYW1zIiwib3V0cHV0X21vZGUiLCJvcHRpb25zIiwiY3JlZGVudGlhbHMiLCJkYXRhIiwiYXhpb3MiLCJlcnJvciIsIm1lc3NhZ2UiLCJpc0NhbmNlbCIsInJlc3BvbnNlIiwibWVzc2FnZXMiLCJ0ZXh0IiwicmVxdWVzdCIsImdlbmVyYXRlVG9hc3QiLCJQcm9taXNlIiwicmVqZWN0IiwiVGl0bGVDb21wb25lbnQiLCJzdHlsZWQiLCJkaXYiLCJhdHRycyIsImNsYXNzTmFtZSIsInZhcmlhYmxlcyIsImZvbnRTaXplWFhMYXJnZSIsIlN1YlRpdGxlQ29tcG9uZW50IiwiZm9udFNpemUiLCJ1c2VRdWVyeSIsIlVSTFNlYXJjaFBhcmFtcyIsInVzZUxvY2F0aW9uIiwic2VhcmNoIiwiTW9kYWxXcmFwcGVyIiwiTW9kYWwiLCJFbnRpdHlNb2RhbCIsInByb3BzIiwiaGFuZGxlUmVxdWVzdENsb3NlIiwiZm9ybSIsImN1cnJlbnQiLCJoYW5kbGVTdWJtaXQiLCJzZXQiLCJjbG9zZSIsInNldFN0YXRlIiwiaXNTdWJtaXRpdG5nIiwiUmVhY3QiLCJjcmVhdGVSZWYiLCJzdGF0ZSIsIm1vZGUiLCJidXR0b25UZXh0IiwiXyIsIm9wZW4iLCJ0aGlzIiwiSGVhZGVyIiwidGl0bGUiLCJmb3JtTGFiZWwiLCJvblJlcXVlc3RDbG9zZSIsIkJvZHkiLCJyZWYiLCJwYWdlIiwic3RhbnphTmFtZSIsImhhbmRsZUZvcm1TdWJtaXQiLCJGb290ZXIiLCJhcHBlYXJhbmNlIiwib25DbGljayIsImxhYmVsIiwiZGlzYWJsZWQiLCJDb21wb25lbnQiLCJzdHJpbmciLCJib29sIiwiZnVuYyIsIk1hcmtkb3duV3JhcHBlciIsInNwYW4iLCJjb2xvciIsIk1hcmtkb3duTWVzc2FnZSIsImRhdGEtdGVzdCIsIm1hcmtkb3duVGV4dCIsIm1hcmtkb3duVHlwZSIsInRvIiwibGluayIsImFycmF5IiwiZm4iLCJpIiwibGVuZ3RoIiwibWFwcGluZyIsImNvbmNhdCIsImZsYXRNYXAiLCJzcGxpdCIsInRva2VuIiwicGFydCIsImtleSIsImxpbmtUZXh0IiwicG9wIiwibWVtbyIsIkhlbHBMaW5rQ29tcG9uZW50IiwiY29udHJvbE9wdGlvbnMiLCJvcGVuSW5OZXdDb250ZXh0Iiwib2JqZWN0IiwiVGV4dFdyYXBwZXIiLCJUZXh0IiwiVGV4dENvbXBvbmVudCIsImUiLCJoYW5kbGVDaGFuZ2UiLCJmaWVsZCIsImlubGluZSIsInBsYWNlaG9sZGVyIiwidG9TdHJpbmciLCJvbkNoYW5nZSIsInR5cGUiLCJlbmNyeXB0ZWQiLCJudW1iZXIiLCJTZWxlY3RXcmFwcGVyIiwiU2VsZWN0IiwiU3R5bGVkRGl2IiwiU2luZ2xlSW5wdXRDb21wb25lbnQiLCJkZXBlbmRlbmN5VmFsdWVzIiwicmVzdFByb3BzIiwiZGVueUxpc3QiLCJhbGxvd0xpc3QiLCJkZXBlbmRlbmNpZXMiLCJjcmVhdGVTZWFyY2hDaG9pY2UiLCJyZWZlcmVuY2VOYW1lIiwiZGlzYWJsZVNlYXJjaCIsImxhYmVsRmllbGQiLCJhdXRvQ29tcGxldGVGaWVsZHMiLCJoaWRlQ2xlYXJCdG4iLCJvYmoiLCJPcHRpb24iLCJDb21ib0JveCIsIkhlYWRpbmciLCJnZW5lcmF0ZU9wdGlvbnMiLCJpdGVtcyIsImZvckVhY2giLCJpdGVtIiwicHVzaCIsImNoaWxkIiwibG9hZGluZyIsInNldExvYWRpbmciLCJzZXRPcHRpb25zIiwidXNlRWZmZWN0Iiwic291cmNlIiwiQ2FuY2VsVG9rZW4iLCJjb3VudCIsInRoZW4iLCJmaWx0ZXJSZXNwb25zZSIsImVudHJ5IiwiY2FuY2VsIiwiZWZmZWN0aXZlRGlzYWJsZWQiLCJlZmZlY3RpdmVQbGFjZWhvbGRlciIsImVmZmVjdGl2ZUlzQ2xlYXJhYmxlIiwibmFtZSIsImRhdGEtdGVzdC1sb2FkaW5nIiwiZmlsdGVyIiwiaWNvbiIsInNoYXBlIiwiTXVsdGlTZWxlY3RXcmFwcGVyIiwiTXVsdGlzZWxlY3QiLCJNdWx0aUlucHV0Q29tcG9uZW50IiwiZGVsaW1pdGVyIiwiaXRlbUxpc3QiLCJtYXAiLCJnZXRGb3JtYXR0ZWRNZXNzYWdlIiwidmFsdWVMaXN0IiwidmFsdWVzIiwiYWxsb3dOZXdWYWx1ZXMiLCJqb2luIiwiQ2hlY2tCb3hDb21wb25lbnQiLCJpc0ZhbHNlIiwic2VsZWN0ZWQiLCJSYWRpb0JhcldyYXBwZXIiLCJSYWRpb0JhciIsIlJhZGlvQ29tcG9uZW50IiwiUGxhY2Vob2xkZXJDb21wb25lbnQiLCJkZWZhdWx0VmFsdWUiLCJDdXN0b21Db250cm9sIiwibW9kdWxlIiwiYXBwTmFtZSIsInJlc29sdmUiLCJpbXBvcnQiLCJnZXRCdWlsZERpclBhdGgiLCJleHRlcm5hbCIsIkNvbnRyb2wiLCJfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyIsIm5ld1ZhbHVlIiwic2hvdWxkUmVuZGVyIiwiZ2xvYmFsQ29uZmlnIiwiZ2V0VW5pZmllZENvbmZpZ3MiLCJtZXRhIiwibG9hZEN1c3RvbUNvbnRyb2wiLCJzcmMiLCJjdXN0b21Db250cm9sIiwiZWwiLCJzZXRWYWx1ZSIsInV0aWxDdXN0b21GdW5jdGlvbnMiLCJyZW5kZXIiLCJ2YWxpZGF0aW9uIiwiYWRkQ3VzdG9tVmFsaWRhdG9yIiwibmV4dFByb3BzIiwibmV4dFN0YXRlIiwic3R5bGUiLCJ2aXNpYmlsaXR5Iiwic2luZ2xlU2VsZWN0IiwiaGVscExpbmsiLCJtdWx0aXBsZVNlbGVjdCIsImNoZWNrYm94IiwicmFkaW8iLCJjdXN0b20iLCJDdXN0b21FbGVtZW50IiwiQ29udHJvbEdyb3VwV3JhcHBlciIsIkNvbnRyb2xHcm91cCIsImRhdGFOYW1lIiwiQ29udHJvbFdyYXBwZXIiLCJzdHIiLCJTdHJpbmciLCJjb250cm9sVHlwZSIsImlzU3RyaW5nIiwiZW50aXR5IiwiQ09OVFJPTF9UWVBFX01BUCIsInJvd1ZpZXciLCJ0b29sdGlwIiwiaGVscCIsInV0aWxpdHlGdW5jdHMiLCJtYXJrZG93bk1lc3NhZ2UiLCJjcmVhdGVFbGVtZW50IiwiaGVscFRleHQiLCJkaXNwbGF5IiwiUHVyZUNvbXBvbmVudCIsImFueSIsIlBSRURFRklORURfVkFMSURBVE9SU19ESUNUIiwicmVnZXgiLCJpbnB1dFZhbHVlVHlwZSIsImVtYWlsIiwiaXB2NCIsImRhdGUiLCJWYWxpZGF0b3IiLCJlbnRpdGllcyIsImF0dHJWYWx1ZSIsInVuZGVmaW5lZCIsImlzTmFtZSIsImZpbmQiLCJjaGVja0lzRmllbGRIYXNJbnB1dCIsImVycm9yRmllbGQiLCJlcnJvck1zZyIsInZhbGlkYXRvciIsInBhcnNlU3RyaW5nVmFsaWRhdG9yIiwibWluTGVuZ3RoIiwibWF4TGVuZ3RoIiwicGFyc2VSZWdleFJhd1N0ciIsInBhdHRlcm4iLCJyZXN1bHQiLCJ0ZXN0IiwicGFyc2VOdW1iZXJWYWxpZGF0b3IiLCJyYW5nZSIsInZhbCIsIk51bWJlciIsImlzTmFOIiwidGFyZ2V0VmFsdWUiLCJuYW1lRmllbGRMYWJlbCIsInN0YXJ0c1dpdGgiLCJ0b0xvd2VyQ2FzZSIsInNvbWUiLCJkIiwiaW5kZXhPZiIsInJldCIsImoiLCJyZXF1aXJlZCIsIlJlcXVpcmVkVmFsaWRhdG9yIiwidmFsaWRhdG9ycyIsIlN0cmluZ1ZhbGlkYXRvciIsIlJlZ2V4VmFsaWRhdG9yIiwiTnVtYmVyVmFsaWRhdG9yIiwiUHJlRGVmaW5lZFJlZ2V4VmFsaWRhdG9yIiwiQ3VzdG9tVmFsaWRhdG9yIiwidmFsaWRhdG9yRnVuYyIsIkNvbGxhcHNpYmxlUGFuZWxXcmFwcGVyIiwiQ29sbGFwc2libGVQYW5lbCIsIkN1c3RvbUdyb3VwTGFiZWwiLCJCYXNlRm9ybVZpZXciLCJjb250ZXh0Iiwic2VydmljZSIsImdyb3VwcyIsImdyb3VwIiwiZmllbGRzIiwiZmllbGROYW1lIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJ1cGRhdGVkT2JqIiwiSlNPTiIsInBhcnNlIiwic3RyaW5naWZ5IiwiaXNHcm91cGluZyIsInNwbGljZSIsImNsZWFyRXJyb3JNc2ciLCJkYXRhZGljdCIsImtleXMiLCJob29rIiwib25TYXZlIiwiZXhlY3V0ZVZhbGlkYXRpb25TdWJtaXQiLCJ0ZW1FbnRpdGllcyIsImluY2x1ZGVzIiwiQm9vbGVhbiIsInNldEVycm9yRmllbGRNc2ciLCJpc09BdXRoIiwicmVxRmllbGRzIiwiYXV0aE1hcCIsImF1dGhfdHlwZSIsImlzQXV0aFZhbCIsImRvVmFsaWRhdGlvbiIsInNhdmVWYWxpZGF0b3IiLCJmb3JtRGF0YSIsInBhcnNlRnVuY3Rpb25SYXdTdHIiLCJTYXZlVmFsaWRhdG9yIiwic2V0RXJyb3JNc2ciLCJpc1NpbmdsZU9hdXRoIiwicGFyYW1ldGVycyIsImNsaWVudF9pZCIsInJlZGlyZWN0X3VybCIsInN0YXRlRW5hYmxlZCIsImlzb2F1dGhTdGF0ZSIsInN0YXRlX2VuYWJsZWQiLCJvYXV0aF9zdGF0ZSIsInV1aWR2NCIsInJlcGxhY2UiLCJob3N0Iiwib2F1dGhDb25mIiwiYXV0aENvZGVFbmRwb2ludCIsImEiLCJpc0NhbGxlZCIsImlzRXJyb3IiLCJpc1Jlc3BvbnNlIiwiY2hpbGRXaW4iLCJ3aW5kb3ciLCJwb3B1cFdpZHRoIiwicG9wdXBIZWlnaHQiLCJnZXRNZXNzYWdlIiwiaGFuZGxlT2F1dGhUb2tlbiIsIndhaXRGb3JBdXRoZW50aWNhdGlvbiIsImF1dGhUaW1lb3V0IiwiY2xvc2VkIiwid2FpdEZvckJhY2tlbmRSZXNwb25zZSIsInNhdmVEYXRhIiwib25TYXZlUHJvbWlzZSIsImFwcGVuZCIsInRtcE9iaiIsImNvbnRlbnQiLCJpZCIsInVwZGF0ZSIsIiRtZXJnZSIsIm9uU2F2ZVN1Y2Nlc3MiLCJtb2RlX2NvbmZpZ190aXRsZSIsImVyciIsImVycm9yU3VibWl0TXNnIiwicGFyc2VFcnJvck1zZyIsIm9uU2F2ZUZhaWwiLCJjaGFuZ2VzIiwiJHNldCIsImRlcGVuZGVuY3lNYXAiLCJoYXMiLCJnZXQiLCJsb2FkRmllbGQiLCJsb2FkIiwiZGVwZW5kZW5jeSIsImN1cnJlbnRWYWx1ZSIsIm5ld0ZpZWxkcyIsInRlbXBTdGF0ZSIsImNsZWFyQWxsRXJyb3JNc2ciLCJob29rRGVmZXJyZWQiLCJ4IiwibXNnIiwicHJldmlvdXNTdGF0ZSIsIlN0YXRlIiwid2FybmluZ01zZyIsIm5ld0RhdGEiLCJ0ZW1EYXRhIiwiSG9vayIsInV0aWwiLCJjb2RlIiwic3RhdGVSZXNwb25zZSIsImRlY29kZVVSSUNvbXBvbmVudCIsImFjY2Vzc1Rva2VuRW5kcG9pbnQiLCJncmFudF90eXBlIiwiY2xpZW50X3NlY3JldCIsInJlZGlyZWN0X3VyaSIsIk9BdXRoRW5kcG9pbnQiLCJhY2Nlc3NUb2tlbiIsImFjY2Vzc190b2tlbiIsImluc3RhbmNlVXJsIiwiaW5zdGFuY2VfdXJsIiwicmVmcmVzaFRva2VuIiwicmVmcmVzaF90b2tlbiIsInNsZWVwIiwidGltZW91dCIsImFyZ3MiLCJtcyIsInNldFRpbWVvdXQiLCJjb2xscHNpYmxlRWxlbWVudCIsInRlbVN0YXRlIiwidXRpbENvbnRyb2xXcmFwcGVyIiwiaXNFeHBhbmRhYmxlIiwiZmxhZyIsImN1cnJlbnRJbnB1dCIsImVuY29kZVVSSUNvbXBvbmVudCIsImNhbGxiYWNrIiwiUEFHRV9JTlBVVCIsInBhZ2VzIiwiaW5wdXRzIiwic2VydmljZXMiLCJ1cGRhdGVFbnRpdGllc0Zvckdyb3VwIiwibG9hZEhvb2siLCJjb25maWd1cmF0aW9uIiwidGFicyIsInRhYiIsInRhYmxlIiwiY3VycmVudFNlcnZpY2VTdGF0ZSIsIk1hcCIsIlBBR0VfQ09ORiIsImF1dGhUeXBlIiwib2F1dGhfc3RhdGVfZW5hYmxlZCIsInRlbXBFbnRpdHkiLCJiYXNpYyIsIm9hdXRoIiwiYXV0aGZpZWxkcyIsImlzRW5jcnlwdGVkIiwibG9jYXRpb24iLCJocmVmIiwib2F1dGhDb25mRGF0YSIsIm9hdXRoX3BvcHVwX3dpZHRoIiwib2F1dGhfcG9wdXBfaGVpZ2h0Iiwib2F1dGhfdGltZW91dCIsImF1dGhfY29kZV9lbmRwb2ludCIsImFjY2Vzc190b2tlbl9lbmRwb2ludCIsImRpc2FibGVvbkVkaXQiLCJFcnJvciIsImNoYW5nZUZpZWxkcyIsImZsYXR0ZW5lZE1hcCIsIm9uQ3JlYXRlIiwiY29uc29sZSIsIm9uUmVuZGVyIiwib25FZGl0TG9hZCIsIm1hcmdpblRvcCIsImdlbmVyYXRlV2FybmluZ01lc3NhZ2UiLCJnZW5lcmF0ZUVycm9yTWVzc2FnZSIsInJlbmRlckdyb3VwRWxlbWVudHMiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJTVFlMRV9QQUdFIiwiU1RZTEVfTU9EQUwiLCJDdXN0b21UYWJsZUNvbnRyb2wiLCJmaWxlTmFtZSIsInJvdyIsIlRhYmxlQ2VsbFdyYXBwZXIiLCJUYWJsZSIsIkNlbGwiLCJnZXRFeHBhbnNpb25Sb3ciLCJjb2xTcGFuIiwibW9yZUluZm8iLCJjdXN0b21Sb3ciLCJSb3ciLCJ0ZXJtV2lkdGgiLCJEZWZpbml0aW9uTGlzdHMiLCJUZXJtIiwiRGVzY3JpcHRpb24iLCJnZXRFeHBhbnNpb25Sb3dEYXRhIiwiU3dpdGNoV3JhcHBlciIsIkN1c3RvbVRhYmxlUm93IiwiY29sdW1ucyIsImhlYWRlck1hcHBpbmciLCJoYW5kbGVUb2dnbGVBY3Rpb25DbGljayIsImhhbmRsZUVkaXRBY3Rpb25DbGljayIsImhhbmRsZUNsb25lQWN0aW9uQ2xpY2siLCJoYW5kbGVEZWxldGVBY3Rpb25DbGljayIsInJvd0FjdGlvbnNQcmltYXJ5QnV0dG9uIiwidXNlQ2FsbGJhY2siLCJzZWxlY3RlZFJvdyIsImRhdGEtY29sdW1uIiwic2NyZWVuUmVhZGVyVGV4dCIsInNpemUiLCJzdGF0dXNDb250ZW50IiwiX190b2dnbGVTaG93U3Bpbm5lciIsImhlYWRlciIsImNlbGxIVE1MIiwiY3VzdG9tQ2VsbCIsImdldEN1c3RvbUNlbGwiLCJzZWxlY3RlZExhYmVsIiwidW5zZWxlY3RlZExhYmVsIiwiRGVsZXRlTW9kYWwiLCJFcnJvck1zZyIsInByZXZTdGF0ZSIsImlzRGVsZXRpbmciLCIkdW5zZXQiLCJkZWxldGVNc2ciLCJoYW5kbGVEZWxldGUiLCJDdXN0b21UYWJsZSIsImhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2ciLCJoYW5kbGVTb3J0Iiwic29ydERpciIsInNvcnRLZXkiLCJ1bmlmaWVkQ29uZmlncyIsImVudGl0eU1vZGFsIiwic2V0RW50aXR5TW9kYWwiLCJkZWxldGVNb2RhbCIsInNldERlbGV0ZU1vZGFsIiwidXNlQ29udGV4dCIsInRhYmxlQ29uZmlnIiwic2VydmljZVRvU3R5bGVNYXAiLCJxdWVyeSIsInNlcnZpY2VLZXkiLCJjb2x1bW4iLCJoYW5kbGVFbnRpdHlDbG9zZSIsImhhbmRsZURlbGV0ZUNsb3NlIiwiaXNDdXN0b21NYXBwaW5nIiwiZ2V0VGFibGVIZWFkZXJDZWxsIiwiSGVhZCIsImhlYWREYXRhIiwiSGVhZENlbGwiLCJvblNvcnQiLCJzdHJpcGVSb3dzIiwicm93RXhwYW5zaW9uIiwiZXhwYW5zaW9uUm93IiwiZ2VuZXJhdGVNb2RhbERpYWxvZyIsIlRhYmxlRmlsdGVyIiwid2FpdCIsImxhdGVyIiwiY2xlYXJUaW1lb3V0IiwiVGFibGVIZWFkZXJXcmFwcGVyIiwiVGFibGVGaWx0ZXJXcmFwcGVyIiwiVGFibGVIZWFkZXIiLCJ0b3RhbEVsZW1lbnQiLCJoYW5kbGVSZXF1ZXN0TW9kYWxPcGVuIiwiaXRlbUxhYmVsIiwiYXJyIiwidW5zaGlmdCIsImdldFNlYXJjaFR5cGVEcm9wZG93biIsInBhZ2VOdW1iZXIiLCJhbHdheXNTaG93TGFzdFBhZ2VMaW5rIiwidG90YWxQYWdlcyIsIk1hdGgiLCJjZWlsIiwiVGFibGVXcmFwcGVyIiwic2V0U29ydEtleSIsInNldFNvcnREaXIiLCJzZXRDdXN0b21NYXBwaW5nU3RhdHVzIiwic2V0RXJyb3IiLCJmZXRjaElucHV0cyIsInJlcXVlc3RzIiwiYWxsIiwiZXJyb3JDb2RlIiwidWNjRXJyb3JDb2RlIiwicmVzIiwic2VydmljZVRpdGxlIiwiZmluZEJ5TWF0Y2hpbmdWYWx1ZSIsInRhYmxlRmllbGRzIiwibW9yZUluZm9EYXRhIiwidiIsImZvdW5kIiwidnYiLCJ0cmltIiwibmV3QXJyIiwiX3NvcnRLZXkiLCJzb3J0ZWRBcnIiLCJzb3J0Iiwicm93QSIsInJvd0IiLCJyb3dBVmFsdWUiLCJ1cGRhdGVkQXJyIiwic2xpY2UiLCJnZXRSb3dEYXRhIiwiZmlsdGVyZWREYXRhIiwiY3VycmVudFJvd0RhdGEiLCJpc1RydWUiLCJjaGFuZ2VUb2dnbGVTdGF0dXMiLCJwcmV2U29ydERpciIsIkVSUjAwMDEiLCJFUlIwMDAyIiwiRVJSMDAwMyIsIkVSUjAwMDQiLCJFUlIwMDA1IiwiRXJyb3JCb3VuZGFyeSIsImVycm9ySW5mbyIsImFsaWduIiwiYm94U2hhZG93IiwidGV4dEFsaWduIiwibGV2ZWwiLCJlcnJvckNvZGVzIiwid2hpdGVTcGFjZSIsInNob3dCb3JkZXIiXSwibWFwcGluZ3MiOiJpTEFHTUEsRUFBZUMsd0JBQWMsQ0FDL0JDLFFBQVMsR0FDVEMsV0FBWSxlQUdIQyxFQUF1QixTQUFDLEdBQWlCLElBQWZDLEVBQWUsRUFBZkEsU0FBZSxFQUNwQkMsbUJBQVMsSUFEVyxXQUMzQ0osRUFEMkMsS0FDbENDLEVBRGtDLE9BRWRHLG1CQUFTLElBRkssV0FFM0NDLEVBRjJDLEtBRS9CQyxFQUYrQixPQUdkRixtQkFBUyxPQUhLLFdBRzNDRyxFQUgyQyxLQUcvQkMsRUFIK0IsT0FJbEJKLG1CQUFTLElBSlMsV0FJM0NLLEVBSjJDLEtBSWpDQyxFQUppQyxPQUtaTixtQkFBUyxHQUxHLFdBSzNDTyxFQUwyQyxLQUs5QkMsRUFMOEIsS0FPbEQsT0FDSSxrQkFBQ2QsRUFBYWUsU0FBZCxDQUNJQyxNQUFPLENBQ0hkLFVBQ0FDLGFBQ0FJLGFBQ0FDLGdCQUNBQyxhQUNBQyxnQkFDQUMsV0FDQUMsY0FDQUMsY0FDQUMsbUJBR0hULElBS2JELEVBQXFCYSxVQUFZLENBQzdCWixTQUFVYSxJQUFVQyxVQUFVLENBQUNELElBQVVFLFFBQVFGLElBQVVHLE1BQU9ILElBQVVHLE9BQU9DLFlBR3hFdEIsTyxpQ0N2Q2Ysd0lBQU8sSUFBTXVCLEVBQWEsUUFDYkMsRUFBYyxTQUVkQyxFQUFZLE9BQ1pDLEVBQWMsVSxxc0JDYzNCLElBQU1DLEVBQW1CLFNBQUMsR0FVcEIsSUFURkMsRUFTRSxFQVRGQSxZQUNBQyxFQVFFLEVBUkZBLFlBQ0FDLEVBT0UsRUFQRkEsT0FDQUMsRUFNRSxFQU5GQSxLQUNBQyxFQUtFLEVBTEZBLFlBS0UsSUFKRkMscUJBSUUsTUFKYyxHQUlkLE1BSEZDLGNBR0UsTUFITyxNQUdQLE1BRkZDLG1CQUVFLGFBREZDLHVCQUNFLE1BRGdCLGFBQ2hCLEVB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QVcsUUFDcEMsa0JBQUMsSUFBRCxDQUFNaFAsTUFBTyxDQUFFOFgsVUFBVywwQkFDdEIsa0JBQUMsSUFBS2hoQixPQUFOLEtBQ0ksa0JBQUMsSUFBRCxDQUFTa0osTUFBTyxDQUFFK1gsVUFBVyxVQUFZQyxNQUFPLEdBQzVDLGtCQUFDLElBQUQsQ0FBYWhZLE1BQU8sQ0FBRTNLLFNBQVUsUUFBUzZDLE1BQU8sYUFDaEQsNkJBQ0EsNkJBQzBCLFlBQXpCckIsS0FBS0wsTUFBTW9mLFVBQ05qZixZQUFFLDhCQUNGQSxZQUFFLDJCQUdoQixrQkFBQyxJQUFLTyxLQUFOLEtBQ0tMLEtBQUtMLE1BQU1vZixVQUNSLG9DQUNLamYsWUFBRXNoQixFQUFXcGhCLEtBQUtMLE1BQU1vZixZQUN6Qiw2QkFDQSw4QkFFSixLQUNKLDZCQUFTNVYsTUFBTyxDQUFFa1ksV0FBWSxhQUE5QixVQUNLcmhCLEtBQUtMLE1BQU1yQyxhQURoQixhQUNLLEVBQWtCZ0csYUFHM0Isa0JBQUMsSUFBSzVDLE9BQU4sQ0FBYTRnQixZQUFZLEdBQ3BCdGhCLEtBQUtMLE1BQU1vZixVQUFZL2UsS0FBS0wsTUFBTW9mLFVBQVksUUFPNUQvZSxLQUFLaEIsTUFBTTVFLFksdUNBbER0QixTQUFnQ2tELEdBRTVCLE1BQU8sQ0FBRXloQixVQUFXemhCLEVBQU0waEIsa0IsR0FSTnZmLElBQU1zQixXQTREbEMrZixFQUFjOWxCLFVBQVksQ0FDdEJaLFNBQVVhLElBQVVDLFVBQVUsQ0FBQ0QsSUFBVUUsUUFBUUYsSUFBVUcsTUFBT0gsSUFBVUcsT0FBT0MsWUFHeEV5bEIiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCwgeyBjcmVhdGVDb250ZXh0LCB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmNvbnN0IFRhYmxlQ29udGV4dCA9IGNyZWF0ZUNvbnRleHQoe1xuICAgIHJvd0RhdGE6IHt9LFxuICAgIHNldFJvd0RhdGE6ICgpID0+IHt9LFxufSk7XG5cbmV4cG9ydCBjb25zdCBUYWJsZUNvbnRleHRQcm92aWRlciA9ICh7IGNoaWxkcmVuIH0pID0+IHtcbiAgICBjb25zdCBbcm93RGF0YSwgc2V0Um93RGF0YV0gPSB1c2VTdGF0ZSh7fSk7XG4gICAgY29uc3QgW3NlYXJjaFRleHQsIHNldFNlYXJjaFRleHRdID0gdXNlU3RhdGUoJycpO1xuICAgIGNvbnN0IFtzZWFyY2hUeXBlLCBzZXRTZWFyY2hUeXBlXSA9IHVzZVN0YXRlKCdhbGwnKTtcbiAgICBjb25zdCBbcGFnZVNpemUsIHNldFBhZ2VTaXplXSA9IHVzZVN0YXRlKDEwKTtcbiAgICBjb25zdCBbY3VycmVudFBhZ2UsIHNldEN1cnJlbnRQYWdlXSA9IHVzZVN0YXRlKDApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRhYmxlQ29udGV4dC5Qcm92aWRlclxuICAgICAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICAgICAgICByb3dEYXRhLFxuICAgICAgICAgICAgICAgIHNldFJvd0RhdGEsXG4gICAgICAgICAgICAgICAgc2VhcmNoVGV4dCxcbiAgICAgICAgICAgICAgICBzZXRTZWFyY2hUZXh0LFxuICAgICAgICAgICAgICAgIHNlYXJjaFR5cGUsXG4gICAgICAgICAgICAgICAgc2V0U2VhcmNoVHlwZSxcbiAgICAgICAgICAgICAgICBwYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICBzZXRQYWdlU2l6ZSxcbiAgICAgICAgICAgICAgICBjdXJyZW50UGFnZSxcbiAgICAgICAgICAgICAgICBzZXRDdXJyZW50UGFnZSxcbiAgICAgICAgICAgIH19XG4gICAgICAgID5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9UYWJsZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbn07XG5cblRhYmxlQ29udGV4dFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLCBQcm9wVHlwZXMubm9kZV0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUYWJsZUNvbnRleHQ7XG4iLCJleHBvcnQgY29uc3QgTU9ERV9DTE9ORSA9ICdjbG9uZSc7XG5leHBvcnQgY29uc3QgTU9ERV9DUkVBVEUgPSAnY3JlYXRlJztcbmV4cG9ydCBjb25zdCBNT0RFX0RFTEVURSA9ICdkZWxldGUnO1xuZXhwb3J0IGNvbnN0IE1PREVfRURJVCA9ICdlZGl0JztcbmV4cG9ydCBjb25zdCBNT0RFX0NPTkZJRyA9ICdjb25maWcnO1xuIiwiaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IENTUkZUb2tlbiwgYXBwIH0gZnJvbSAnQHNwbHVuay9zcGx1bmstdXRpbHMvY29uZmlnJztcbmltcG9ydCB7IGNyZWF0ZVJFU1RVUkwgfSBmcm9tICdAc3BsdW5rL3NwbHVuay11dGlscy91cmwnO1xuaW1wb3J0IHsgZ2VuZXJhdGVFbmRQb2ludFVybCwgZ2VuZXJhdGVUb2FzdCB9IGZyb20gJy4vdXRpbCc7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBvYmplY3QgY29udGFpbmluZyByZXF1aXJlZCBwYXJhbXMgZm9yIHJlcXVlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLnNlcnZpY2VOYW1lIHNlcnZpY2UgbmFtZSB3aGljaCBpcyBpbnB1dCBuYW1lIG9yIHRhYiBuYW1lIGJhc2VkIG9uIHRoZSBwYWdlXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5lbmRwb2ludFVybCByZXN0IGVuZHBvaW50IHBhdGhcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhLnBhcmFtcyBvYmplY3Qgd2l0aCBwYXJhbXMgYXMga2V5IHZhbHVlIHBhaXJzXG4gKiBAcGFyYW0ge29iamVjdH0gZGF0YS5ib2R5IG9iamVjdCB3aXRoIGJvZHkgYXMga2V5IHZhbHVlIHBhaXJzIGZvciBwb3N0IHJlcXVlc3RcbiAqIEBwYXJhbSB7b2JqZWN0fSBkYXRhLmN1c3RvbUhlYWRlcnMgZXh0cmEgaGVhZGVycyBhcyBrZXkgdmFsdWUgcGFpclxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGEubWV0aG9kIHJlc3QgbWV0aG9kIHR5cGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhLmhhbmRsZUVycm9yIHdoZXRoZXIgb3Igbm90IHNob3cgdG9hc3Qgbm90aWZpY2F0aW9ucyBvbiBmYWlsdXJlXG4gKiBAcGFyYW0ge3N0cmluZ30gZGF0YS5jYWxsYmFja09uRXJyb3IgY2FsbGJhY2sgZnVuY3Rpb24gdG8gZXhlY3V0ZSBhZnRlciBoYW5kbGluZyBlcnJvci4gT25seSBleGVjdXRlZCB3aGVuIGhhbmRsZUVycm9yIGlzIHNldCB0byB0cnVlXG4gKiBAcmV0dXJuc1xuICovXG5jb25zdCBheGlvc0NhbGxXcmFwcGVyID0gKHtcbiAgICBzZXJ2aWNlTmFtZSxcbiAgICBlbmRwb2ludFVybCxcbiAgICBwYXJhbXMsXG4gICAgYm9keSxcbiAgICBjYW5jZWxUb2tlbixcbiAgICBjdXN0b21IZWFkZXJzID0ge30sXG4gICAgbWV0aG9kID0gJ2dldCcsXG4gICAgaGFuZGxlRXJyb3IgPSBmYWxzZSxcbiAgICBjYWxsYmFja09uRXJyb3IgPSAoKSA9PiB7fSxcbn0pID0+IHtcbiAgICBjb25zdCBlbmRwb2ludCA9IHNlcnZpY2VOYW1lID8gZ2VuZXJhdGVFbmRQb2ludFVybChzZXJ2aWNlTmFtZSkgOiBlbmRwb2ludFVybDtcbiAgICBjb25zdCBhcHBEYXRhID0ge1xuICAgICAgICBhcHAsXG4gICAgICAgIG93bmVyOiAnbm9ib2R5JyxcbiAgICB9O1xuICAgIGNvbnN0IGJhc2VIZWFkZXJzID0ge1xuICAgICAgICAnWC1TcGx1bmstRm9ybS1LZXknOiBDU1JGVG9rZW4sXG4gICAgICAgICdYLVJlcXVlc3RlZC1XaXRoJzogJ1hNTEh0dHBSZXF1ZXN0JyxcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICB9O1xuICAgIGNvbnN0IGhlYWRlcnMgPSBPYmplY3QuYXNzaWduKGJhc2VIZWFkZXJzLCBjdXN0b21IZWFkZXJzKTtcbiAgICBjb25zdCB1cmwgPSBjcmVhdGVSRVNUVVJMKGVuZHBvaW50LCBhcHBEYXRhKTtcblxuICAgIGxldCBuZXdQYXJhbXMgPSB7IG91dHB1dF9tb2RlOiAnanNvbicgfTtcbiAgICBpZiAocGFyYW1zKSB7XG4gICAgICAgIG5ld1BhcmFtcyA9IHsgLi4ubmV3UGFyYW1zLCAuLi5wYXJhbXMgfTtcbiAgICB9XG5cbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBwYXJhbXM6IG5ld1BhcmFtcyxcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICB1cmwsXG4gICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScsXG4gICAgICAgIGhlYWRlcnMsXG4gICAgICAgIGNhbmNlbFRva2VuLFxuICAgIH07XG5cbiAgICBpZiAobWV0aG9kID09PSAncG9zdCcpIHtcbiAgICAgICAgb3B0aW9ucy5kYXRhID0gYm9keTtcbiAgICB9XG5cbiAgICByZXR1cm4gaGFuZGxlRXJyb3JcbiAgICAgICAgPyBheGlvcyhvcHRpb25zKS5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSAnJztcbiAgICAgICAgICAgICAgaWYgKGF4aW9zLmlzQ2FuY2VsKGVycm9yKSkge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAoZXJyb3IucmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBtYWRlIGFuZCB0aGUgc2VydmVyIHJlc3BvbmRlZCB3aXRoIGEgc3RhdHVzIGNvZGVcbiAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgcmVzcG9uc2UgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICR7ZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlc1swXS50ZXh0fWA7XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoZXJyb3IucmVxdWVzdCkge1xuICAgICAgICAgICAgICAgICAgLy8gVGhlIHJlcXVlc3Qgd2FzIG1hZGUgYnV0IG5vIHJlc3BvbnNlIHdhcyByZWNlaXZlZFxuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBObyByZXNwb25zZSByZWNlaXZlZCB3aGlsZSBtYWtpbmcgcmVxdWVzdCB0byAke2VuZHBvaW50fWA7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAvLyBTb21ldGhpbmcgaGFwcGVuZWQgaW4gc2V0dGluZyB1cCB0aGUgcmVxdWVzdCB0aGF0IHRyaWdnZXJlZCBhbiBFcnJvclxuICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBFcnJvciBtYWtpbmcgJHttZXRob2R9IHJlcXVlc3QgdG8gJHtlbmRwb2ludH1gO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QobWVzc2FnZSwgJ2Vycm9yJyk7XG4gICAgICAgICAgICAgIGNhbGxiYWNrT25FcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgfSlcbiAgICAgICAgOiBheGlvcyhvcHRpb25zKTtcbn07XG5cbmV4cG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfTtcbiIsImltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgdmFyaWFibGVzIH0gZnJvbSAnQHNwbHVuay90aGVtZXMnO1xuXG5leHBvcnQgY29uc3QgVGl0bGVDb21wb25lbnQgPSBzdHlsZWQuZGl2LmF0dHJzKHtcbiAgICBjbGFzc05hbWU6ICdwYWdlVGl0bGUnLFxufSlgXG4gICAgJi5wYWdlVGl0bGUge1xuICAgICAgICBmb250LXNpemU6ICR7dmFyaWFibGVzLmZvbnRTaXplWFhMYXJnZX07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDIwcHg7XG4gICAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFN1YlRpdGxlQ29tcG9uZW50ID0gc3R5bGVkLmRpdi5hdHRycyh7XG4gICAgY2xhc3NOYW1lOiAncGFnZVN1YnRpdGxlJyxcbn0pYFxuICAgICYucGFnZVN1YnRpdGxlIHtcbiAgICAgICAgZm9udC1zaXplOiAke3ZhcmlhYmxlcy5mb250U2l6ZX07XG4gICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgfVxuYDtcblxuZXhwb3J0IGNvbnN0IFRhYmxlQ2FwdGlvbkNvbXBvbmVudCA9IHN0eWxlZC5kaXZgXG4gICAgLnRhYmxlLWNhcHRpb24taW5uZXIge1xuICAgICAgICB0ZXh0LWFsaWduOiBsZWZ0O1xuICAgIH1cbmA7XG4iLCJpbXBvcnQgeyB1c2VMb2NhdGlvbiB9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nO1xuXG4vLyBBIGN1c3RvbSBob29rIHRoYXQgYnVpbGRzIG9uIHVzZUxvY2F0aW9uIHRvIHBhcnNlIHRoZSBxdWVyeSBzdHJpbmcgZm9yIHlvdS5cbmZ1bmN0aW9uIHVzZVF1ZXJ5KCkge1xuICAgIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHVzZUxvY2F0aW9uKCkuc2VhcmNoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdXNlUXVlcnk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b24nO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTW9kYWwnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgV2FpdFNwaW5uZXIgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9XYWl0U3Bpbm5lcic7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IHsgTU9ERV9DTE9ORSwgTU9ERV9DUkVBVEUsIE1PREVfRURJVCB9IGZyb20gJy4uL2NvbnN0YW50cy9tb2Rlcyc7XG5pbXBvcnQgQmFzZUZvcm1WaWV3IGZyb20gJy4vQmFzZUZvcm1WaWV3JztcblxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkKE1vZGFsKWBcbiAgICB3aWR0aDogODAwcHg7XG5gO1xuXG5jbGFzcyBFbnRpdHlNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICAvLyBSZWYgaXMgdXNlZCBoZXJlIHRvIGNhbGwgc3VibWl0IG1ldGhvZCBvZiBmb3JtIG9ubHlcbiAgICAgICAgdGhpcy5mb3JtID0gUmVhY3QuY3JlYXRlUmVmKCk7IC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgdGhpcy5zdGF0ZSA9IHsgaXNTdWJtaXRpdG5nOiBmYWxzZSB9O1xuXG4gICAgICAgIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NSRUFURSkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnQWRkJyk7XG4gICAgICAgIH0gZWxzZSBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DTE9ORSkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnU2F2ZScpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfRURJVCkge1xuICAgICAgICAgICAgdGhpcy5idXR0b25UZXh0ID0gXygnVXBkYXRlJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJ1dHRvblRleHQgPSBfKCdTdWJtaXQnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhhbmRsZVJlcXVlc3RDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICB9O1xuXG4gICAgaGFuZGxlU3VibWl0ID0gKCkgPT4ge1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmZvcm0uY3VycmVudC5oYW5kbGVTdWJtaXQoKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICAvKlxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gc2V0OiB3aGV0aGVyIGZvcm0gaXMgc3VibWl0dGluZ1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gY2xvc2UgOiBjbG9zZSB0aGUgRW50aXR5IG1vZGFsXG4gICAgICovXG4gICAgaGFuZGxlRm9ybVN1Ym1pdCA9IChzZXQsIGNsb3NlKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoeyBpc1N1Ym1pdGl0bmc6IHNldCB9KTtcbiAgICAgICAgaWYgKGNsb3NlKSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxNb2RhbFdyYXBwZXIgb3Blbj17dGhpcy5wcm9wcy5vcGVufT5cbiAgICAgICAgICAgICAgICA8TW9kYWwuSGVhZGVyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlPXt0aGlzLnByb3BzLmZvcm1MYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgb25SZXF1ZXN0Q2xvc2U9e3RoaXMuaGFuZGxlUmVxdWVzdENsb3NlfVxuICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgICAgIDxCYXNlRm9ybVZpZXcgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LnNlY3VyaXR5LmF1ZGl0LnJlYWN0LW5vLXJlZnMucmVhY3Qtbm8tcmVmc1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVmPXt0aGlzLmZvcm19XG4gICAgICAgICAgICAgICAgICAgICAgICBwYWdlPXt0aGlzLnByb3BzLnBhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17dGhpcy5wcm9wcy5zZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU9e3RoaXMucHJvcHMubW9kZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU9e3RoaXMucHJvcHMuc3RhbnphTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZUZvcm1TdWJtaXQ9e3RoaXMuaGFuZGxlRm9ybVN1Ym1pdH1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkJvZHk+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInNlY29uZGFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVJlcXVlc3RDbG9zZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsPXtfKCdDYW5jZWwnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzU3VibWl0aXRuZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwic2F2ZUJ0blwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGhpcy5zdGF0ZS5pc1N1Ym1pdGl0bmcgPyA8V2FpdFNwaW5uZXIgLz4gOiB0aGlzLmJ1dHRvblRleHR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZVN1Ym1pdH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzU3VibWl0aXRuZ31cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8L01vZGFsLkZvb3Rlcj5cbiAgICAgICAgICAgIDwvTW9kYWxXcmFwcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuRW50aXR5TW9kYWwucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXJ2aWNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtb2RlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHN0YW56YU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZm9ybUxhYmVsOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRW50aXR5TW9kYWw7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IExpbmsgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9MaW5rJztcblxuY29uc3QgTWFya2Rvd25XcmFwcGVyID0gc3R5bGVkLnNwYW5gXG4gICAgY29sb3I6ICR7KHByb3BzKSA9PiBwcm9wcy5jb2xvcn07XG5gO1xuXG5mdW5jdGlvbiBNYXJrZG93bk1lc3NhZ2UocHJvcHMpIHtcbiAgICAvLyBmbGF0TWFwIGFkZHMgdGhlIGxpbmsgdG8gdGhlIHBhcnQgb2YgdGV4dCB0aGF0IGhhcyBiZWVuIHNwbGl0IGZyb20gdGV4dFxuICAgIC8vIGFuZCByZXR1cm5zIGEgbmV3IGFycmF5IGZvcm1lZCBieSBhcHBseWluZyBhIGdpdmVuIGZ1bmN0aW9uIHRvIGVhY2ggZWxlbWVudCBvZiB0aGUgYXJyYXksXG4gICAgLy8gYW5kIHRoZW4gZmxhdHRlbmluZyB0aGUgcmVzdWx0IGJ5IG9uZSBsZXZlbFxuICAgIGZ1bmN0aW9uIGZsYXRNYXAoYXJyYXksIGZuKSB7XG4gICAgICAgIGxldCBtYXJrZG93blRleHQgPSBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgY29uc3QgbWFwcGluZyA9IGZuKGFycmF5W2ldKTtcbiAgICAgICAgICAgIG1hcmtkb3duVGV4dCA9IG1hcmtkb3duVGV4dC5jb25jYXQobWFwcGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcmtkb3duVGV4dDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRNYXJrZG93blRleHQoKSB7XG4gICAgICAgIGxldCBtYXJrZG93blRleHQgPSBwcm9wcy50ZXh0O1xuICAgICAgICBpZiAocHJvcHMubWFya2Rvd25UeXBlID09PSAnbGluaycpIHtcbiAgICAgICAgICAgIG1hcmtkb3duVGV4dCA9IDxMaW5rIHRvPXtwcm9wcy5saW5rfT57cHJvcHMudGV4dH08L0xpbms+O1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1hcmtkb3duVHlwZSA9PT0gJ2h5YnJpZCcpIHtcbiAgICAgICAgICAgIC8vIG1hcmtkb3duVHlwZSBoeWJyaWQgaXMgZm9yIHN1cHBvcnQgb2YgYm90aCB0ZXh0IGFuZCBsaW5rXG4gICAgICAgICAgICBtYXJrZG93blRleHQgPSBmbGF0TWFwKG1hcmtkb3duVGV4dC5zcGxpdChwcm9wcy50b2tlbiksIChwYXJ0KSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAgICAgICAgICAgcGFydCxcbiAgICAgICAgICAgICAgICAgICAgPExpbmsga2V5PXtwYXJ0fSB0bz17cHJvcHMubGlua30+XG4gICAgICAgICAgICAgICAgICAgICAgICB7cHJvcHMubGlua1RleHR9XG4gICAgICAgICAgICAgICAgICAgIDwvTGluaz4sXG4gICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbWFya2Rvd25UZXh0LnBvcCgpO1xuICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1hcmtkb3duVHlwZSA9PT0gJ3RleHQnKSB7XG4gICAgICAgICAgICBtYXJrZG93blRleHQgPSA8TWFya2Rvd25XcmFwcGVyIGNvbG9yPXtwcm9wcy5jb2xvcn0+e3Byb3BzLnRleHR9PC9NYXJrZG93bldyYXBwZXI+O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG1hcmtkb3duVGV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gPGRpdiBkYXRhLXRlc3Q9XCJtc2ctbWFya2Rvd25cIj57Z2V0TWFya2Rvd25UZXh0KCl9PC9kaXY+O1xufVxuXG5NYXJrZG93bk1lc3NhZ2UucHJvcFR5cGVzID0ge1xuICAgIHRleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGluazogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb2xvcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBtYXJrZG93blR5cGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG9rZW46IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgbGlua1RleHQ6IFByb3BUeXBlcy5zdHJpbmcsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKE1hcmtkb3duTWVzc2FnZSk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBMaW5rIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTGluayc7XG5cbmZ1bmN0aW9uIEhlbHBMaW5rQ29tcG9uZW50KHByb3BzKSB7XG4gICAgY29uc3QgeyB0ZXh0LCBsaW5rIH0gPSBwcm9wcy5jb250cm9sT3B0aW9ucztcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxMaW5rIHRvPXtsaW5rfSBvcGVuSW5OZXdDb250ZXh0PlxuICAgICAgICAgICAge3RleHR9XG4gICAgICAgIDwvTGluaz5cbiAgICApO1xufVxuXG5IZWxwTGlua0NvbXBvbmVudC5wcm9wVHlwZXMgPSB7XG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBIZWxwTGlua0NvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFRleHQgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9UZXh0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5jb25zdCBUZXh0V3JhcHBlciA9IHN0eWxlZChUZXh0KWBcbiAgICB3aWR0aDogMzIwcHggIWltcG9ydGFudDtcbmA7XG5cbmNsYXNzIFRleHRDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGhhbmRsZUNoYW5nZSA9IChlLCB7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UodGhpcy5wcm9wcy5maWVsZCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8VGV4dFdyYXBwZXJcbiAgICAgICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgICAgICAgICBlcnJvcj17dGhpcy5wcm9wcy5lcnJvcn1cbiAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17dGhpcy5wcm9wcz8uY29udHJvbE9wdGlvbnM/LnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMudmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHRoaXMucHJvcHMudmFsdWUgPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMucHJvcHMudmFsdWUudG9TdHJpbmcoKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvbkNoYW5nZT17dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAgICAgdHlwZT17dGhpcy5wcm9wcy5lbmNyeXB0ZWQgPyAncGFzc3dvcmQnIDogJ3RleHQnfVxuICAgICAgICAgICAgLz5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cblRleHRDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIC8vIE51bWJlciBpcyBleHBlY3RlZCBpZiBwcm92aWRlZCBudW1iZXIgaW4gZ2xvYmFsQ29uZmlnLmpzb24gaW5zdGVhZCBvZiBhIHN0cmluZy5cbiAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm51bWJlcl0pLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgZW5jcnlwdGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBUZXh0Q29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1NlbGVjdCc7XG5pbXBvcnQgQ29tYm9Cb3ggZnJvbSAnQHNwbHVuay9yZWFjdC11aS9Db21ib0JveCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQnV0dG9uJztcbmltcG9ydCBDbGVhciBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL0NsZWFyJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuXG5pbXBvcnQgeyBheGlvc0NhbGxXcmFwcGVyIH0gZnJvbSAnLi4vdXRpbC9heGlvc0NhbGxXcmFwcGVyJztcbmltcG9ydCB7IGZpbHRlclJlc3BvbnNlIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuY29uc3QgU2VsZWN0V3JhcHBlciA9IHN0eWxlZChTZWxlY3QpYFxuICAgIHdpZHRoOiAzMjBweCAhaW1wb3J0YW50O1xuYDtcblxuY29uc3QgU3R5bGVkRGl2ID0gc3R5bGVkLmRpdmBcbiAgICBkaXY6Zmlyc3QtY2hpbGQge1xuICAgICAgICB3aWR0aDogMzIwcHggIWltcG9ydGFudDtcbiAgICB9XG5gO1xuXG5mdW5jdGlvbiBTaW5nbGVJbnB1dENvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IHtcbiAgICAgICAgZmllbGQsXG4gICAgICAgIGRpc2FibGVkID0gZmFsc2UsXG4gICAgICAgIGVycm9yID0gZmFsc2UsXG4gICAgICAgIGNvbnRyb2xPcHRpb25zLFxuICAgICAgICBkZXBlbmRlbmN5VmFsdWVzLFxuICAgICAgICAuLi5yZXN0UHJvcHNcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgICBlbmRwb2ludFVybCxcbiAgICAgICAgZGVueUxpc3QsXG4gICAgICAgIGFsbG93TGlzdCxcbiAgICAgICAgcGxhY2Vob2xkZXIgPSBfKCdTZWxlY3QgYSB2YWx1ZScpLFxuICAgICAgICBkZXBlbmRlbmNpZXMsXG4gICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZSxcbiAgICAgICAgcmVmZXJlbmNlTmFtZSxcbiAgICAgICAgZGlzYWJsZVNlYXJjaCxcbiAgICAgICAgbGFiZWxGaWVsZCxcbiAgICAgICAgYXV0b0NvbXBsZXRlRmllbGRzLFxuICAgICAgICBoaWRlQ2xlYXJCdG4sXG4gICAgfSA9IGNvbnRyb2xPcHRpb25zO1xuXG4gICAgZnVuY3Rpb24gaGFuZGxlQ2hhbmdlKGUsIG9iaikge1xuICAgICAgICByZXN0UHJvcHMuaGFuZGxlQ2hhbmdlKGZpZWxkLCBvYmoudmFsdWUpO1xuICAgIH1cbiAgICBjb25zdCBPcHRpb24gPSBjcmVhdGVTZWFyY2hDaG9pY2UgPyBDb21ib0JveC5PcHRpb24gOiBTZWxlY3QuT3B0aW9uO1xuICAgIGNvbnN0IEhlYWRpbmcgPSBjcmVhdGVTZWFyY2hDaG9pY2UgPyBDb21ib0JveC5IZWFkaW5nIDogU2VsZWN0LkhlYWRpbmc7XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZU9wdGlvbnMoaXRlbXMpIHtcbiAgICAgICAgY29uc3QgZGF0YSA9IFtdO1xuICAgICAgICBpdGVtcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXRlbS52YWx1ZSAmJiBpdGVtLmxhYmVsKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5wdXNoKDxPcHRpb24gbGFiZWw9e2l0ZW0ubGFiZWx9IHZhbHVlPXtpdGVtLnZhbHVlfSBrZXk9e2l0ZW0udmFsdWV9IC8+KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpdGVtLmNoaWxkcmVuICYmIGl0ZW0ubGFiZWwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnB1c2goPEhlYWRpbmcga2V5PXtpdGVtLmxhYmVsfT57aXRlbS5sYWJlbH08L0hlYWRpbmc+KTtcbiAgICAgICAgICAgICAgICBpdGVtLmNoaWxkcmVuLmZvckVhY2goKGNoaWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEucHVzaCg8T3B0aW9uIGxhYmVsPXtjaGlsZC5sYWJlbH0gdmFsdWU9e2NoaWxkLnZhbHVlfSBrZXk9e2NoaWxkLnZhbHVlfSAvPik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG5cbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW29wdGlvbnMsIHNldE9wdGlvbnNdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWVuZHBvaW50VXJsICYmICFyZWZlcmVuY2VOYW1lICYmIGF1dG9Db21wbGV0ZUZpZWxkcykge1xuICAgICAgICAgICAgc2V0T3B0aW9ucyhnZW5lcmF0ZU9wdGlvbnMoYXV0b0NvbXBsZXRlRmllbGRzKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgY3VycmVudCA9IHRydWU7XG4gICAgICAgIGNvbnN0IHNvdXJjZSA9IGF4aW9zLkNhbmNlbFRva2VuLnNvdXJjZSgpO1xuXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zaGFkb3dcbiAgICAgICAgY29uc3Qgb3B0aW9ucyA9IHsgY2FuY2VsVG9rZW46IHNvdXJjZS50b2tlbiwgaGFuZGxlRXJyb3I6IHRydWUsIHBhcmFtczogeyBjb3VudDogLTEgfSB9O1xuICAgICAgICBpZiAocmVmZXJlbmNlTmFtZSkge1xuICAgICAgICAgICAgb3B0aW9ucy5zZXJ2aWNlTmFtZSA9IHJlZmVyZW5jZU5hbWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZW5kcG9pbnRVcmwpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZW5kcG9pbnRVcmwgPSBlbmRwb2ludFVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZXBlbmRlbmN5VmFsdWVzKSB7XG4gICAgICAgICAgICBvcHRpb25zLnBhcmFtcyA9IHsgLi4ub3B0aW9ucy5wYXJhbXMsIC4uLmRlcGVuZGVuY3lWYWx1ZXMgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcGVuZGVuY2llcyB8fCBkZXBlbmRlbmN5VmFsdWVzKSB7XG4gICAgICAgICAgICBzZXRMb2FkaW5nKHRydWUpO1xuICAgICAgICAgICAgYXhpb3NDYWxsV3JhcHBlcihvcHRpb25zKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0T3B0aW9ucyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZU9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlclJlc3BvbnNlKHJlc3BvbnNlLmRhdGEuZW50cnksIGxhYmVsRmllbGQsIGFsbG93TGlzdCwgZGVueUxpc3QpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHNvdXJjZS5jYW5jZWwoJ09wZXJhdGlvbiBjYW5jZWxlZC4nKTtcbiAgICAgICAgICAgIGN1cnJlbnQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtkZXBlbmRlbmN5VmFsdWVzXSk7XG5cbiAgICBjb25zdCBlZmZlY3RpdmVEaXNhYmxlZCA9IGxvYWRpbmcgPyB0cnVlIDogZGlzYWJsZWQ7XG4gICAgY29uc3QgZWZmZWN0aXZlUGxhY2Vob2xkZXIgPSBsb2FkaW5nID8gXygnTG9hZGluZycpIDogcGxhY2Vob2xkZXI7XG4gICAgLy8gaGlkZUNsZWFyQnRuPXRydWUgb25seSBwYXNzZWQgZm9yIE9BdXRoIGVsc2UgaXRzIHVuZGVmaW5lZFxuICAgIGNvbnN0IGVmZmVjdGl2ZUlzQ2xlYXJhYmxlID0gZWZmZWN0aXZlRGlzYWJsZWQgPyBmYWxzZSA6ICFoaWRlQ2xlYXJCdG47XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAge2NyZWF0ZVNlYXJjaENob2ljZSA/IChcbiAgICAgICAgICAgICAgICA8U3R5bGVkRGl2IGNsYXNzTmFtZT1cImRyb3Bkb3duQm94XCI+XG4gICAgICAgICAgICAgICAgICAgIDxDb21ib0JveFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLnZhbHVlID09PSBudWxsID8gJycgOiBwcm9wcy52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9e2ZpZWxkfVxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I9e2Vycm9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2VmZmVjdGl2ZVBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2VmZmVjdGl2ZURpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9e2hhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCA+IDAgJiYgb3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgPC9Db21ib0JveD5cbiAgICAgICAgICAgICAgICA8L1N0eWxlZERpdj5cbiAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgPFNlbGVjdFdyYXBwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRyb3Bkb3duQm94XCJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGEtdGVzdC1sb2FkaW5nPXtsb2FkaW5nfVxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3Byb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZT17ZmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcj17ZWZmZWN0aXZlUGxhY2Vob2xkZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17ZWZmZWN0aXZlRGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17aGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyPXshZGlzYWJsZVNlYXJjaH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlubGluZVxuICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICB7b3B0aW9ucyAmJiBvcHRpb25zLmxlbmd0aCA+IDAgJiYgb3B0aW9uc31cbiAgICAgICAgICAgICAgICAgICAgPC9TZWxlY3RXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICB7ZWZmZWN0aXZlSXNDbGVhcmFibGUgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS10ZXN0PVwiY2xlYXJcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249ezxDbGVhciAvPn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiByZXN0UHJvcHMuaGFuZGxlQ2hhbmdlKGZpZWxkLCAnJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICl9XG4gICAgICAgIDwvPlxuICAgICk7XG59XG5cblNpbmdsZUlucHV0Q29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG4gICAgdmFsdWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXJyb3I6IFByb3BUeXBlcy5ib29sLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkZXBlbmRlbmN5VmFsdWVzOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNvbnRyb2xPcHRpb25zOiBQcm9wVHlwZXMuc2hhcGUoe1xuICAgICAgICBhdXRvQ29tcGxldGVGaWVsZHM6IFByb3BUeXBlcy5hcnJheSxcbiAgICAgICAgZW5kcG9pbnRVcmw6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRlbnlMaXN0OiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBhbGxvd0xpc3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIHBsYWNlaG9sZGVyOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgICAgICBkZXBlbmRlbmNpZXM6IFByb3BUeXBlcy5hcnJheSxcbiAgICAgICAgY3JlYXRlU2VhcmNoQ2hvaWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICAgICAgcmVmZXJlbmNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGlzYWJsZVNlYXJjaDogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIGxhYmVsRmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGhpZGVDbGVhckJ0bjogUHJvcFR5cGVzLmJvb2wsXG4gICAgfSksXG59O1xuXG5leHBvcnQgZGVmYXVsdCBTaW5nbGVJbnB1dENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBNdWx0aXNlbGVjdCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL011bHRpc2VsZWN0JztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IGF4aW9zIGZyb20gJ2F4aW9zJztcblxuaW1wb3J0IHsgYXhpb3NDYWxsV3JhcHBlciB9IGZyb20gJy4uL3V0aWwvYXhpb3NDYWxsV3JhcHBlcic7XG5pbXBvcnQgeyBmaWx0ZXJSZXNwb25zZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBnZXRGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlVXRpbCc7XG5cbmNvbnN0IE11bHRpU2VsZWN0V3JhcHBlciA9IHN0eWxlZChNdWx0aXNlbGVjdClgXG4gICAgd2lkdGg6IDMyMHB4ICFpbXBvcnRhbnQ7XG5gO1xuXG5mdW5jdGlvbiBNdWx0aUlucHV0Q29tcG9uZW50KHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICBmaWVsZCxcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSxcbiAgICAgICAgZXJyb3IgPSBmYWxzZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGNvbnRyb2xPcHRpb25zLFxuICAgICAgICBkZXBlbmRlbmN5VmFsdWVzLFxuICAgICAgICAuLi5yZXN0UHJvcHNcbiAgICB9ID0gcHJvcHM7XG4gICAgY29uc3Qge1xuICAgICAgICBlbmRwb2ludFVybCxcbiAgICAgICAgZGVueUxpc3QsXG4gICAgICAgIGFsbG93TGlzdCxcbiAgICAgICAgaXRlbXMsXG4gICAgICAgIGRlcGVuZGVuY2llcyxcbiAgICAgICAgcmVmZXJlbmNlTmFtZSxcbiAgICAgICAgcGxhY2Vob2xkZXIsXG4gICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZSxcbiAgICAgICAgbGFiZWxGaWVsZCxcbiAgICAgICAgZGVsaW1pdGVyID0gJywnLFxuICAgIH0gPSBjb250cm9sT3B0aW9ucztcblxuICAgIGZ1bmN0aW9uIGhhbmRsZUNoYW5nZShlLCB7IHZhbHVlcyB9KSB7XG4gICAgICAgIHJlc3RQcm9wcy5oYW5kbGVDaGFuZ2UoZmllbGQsIHZhbHVlcy5qb2luKGRlbGltaXRlcikpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlT3B0aW9ucyhpdGVtTGlzdCkge1xuICAgICAgICByZXR1cm4gaXRlbUxpc3QubWFwKChpdGVtKSA9PiAoXG4gICAgICAgICAgICA8TXVsdGlzZWxlY3QuT3B0aW9uIGxhYmVsPXtpdGVtLmxhYmVsfSB2YWx1ZT17aXRlbS52YWx1ZX0ga2V5PXtpdGVtLnZhbHVlfSAvPlxuICAgICAgICApKTtcbiAgICB9XG5cbiAgICBjb25zdCBbbG9hZGluZywgc2V0TG9hZGluZ10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW29wdGlvbnMsIHNldE9wdGlvbnNdID0gdXNlU3RhdGUobnVsbCk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWVuZHBvaW50VXJsICYmIGl0ZW1zKSB7XG4gICAgICAgICAgICBzZXRPcHRpb25zKGdlbmVyYXRlT3B0aW9ucyhpdGVtcykpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGN1cnJlbnQgPSB0cnVlO1xuICAgICAgICBjb25zdCBzb3VyY2UgPSBheGlvcy5DYW5jZWxUb2tlbi5zb3VyY2UoKTtcblxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2hhZG93XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7IGNhbmNlbFRva2VuOiBzb3VyY2UudG9rZW4sIGhhbmRsZUVycm9yOiB0cnVlLCBwYXJhbXM6IHsgY291bnQ6IC0xIH0gfTtcbiAgICAgICAgaWYgKHJlZmVyZW5jZU5hbWUpIHtcbiAgICAgICAgICAgIG9wdGlvbnMuc2VydmljZU5hbWUgPSByZWZlcmVuY2VOYW1lO1xuICAgICAgICB9IGVsc2UgaWYgKGVuZHBvaW50VXJsKSB7XG4gICAgICAgICAgICBvcHRpb25zLmVuZHBvaW50VXJsID0gZW5kcG9pbnRVcmw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVwZW5kZW5jeVZhbHVlcykge1xuICAgICAgICAgICAgb3B0aW9ucy5wYXJhbXMgPSB7IC4uLm9wdGlvbnMucGFyYW1zLCAuLi5kZXBlbmRlbmN5VmFsdWVzIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFkZXBlbmRlbmNpZXMgfHwgZGVwZW5kZW5jeVZhbHVlcykge1xuICAgICAgICAgICAgc2V0TG9hZGluZyh0cnVlKTtcbiAgICAgICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIob3B0aW9ucylcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldE9wdGlvbnMoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2VuZXJhdGVPcHRpb25zKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJSZXNwb25zZShyZXNwb25zZS5kYXRhLmVudHJ5LCBsYWJlbEZpZWxkLCBhbGxvd0xpc3QsIGRlbnlMaXN0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldExvYWRpbmcoZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICBzb3VyY2UuY2FuY2VsKCdPcGVyYXRpb24gY2FuY2VsZWQuJyk7XG4gICAgICAgICAgICBjdXJyZW50ID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICB9LCBbZGVwZW5kZW5jeVZhbHVlc10pO1xuXG4gICAgY29uc3QgZWZmZWN0aXZlRGlzYWJsZWQgPSBsb2FkaW5nID8gdHJ1ZSA6IGRpc2FibGVkO1xuICAgIGNvbnN0IGVmZmVjdGl2ZVBsYWNlaG9sZGVyID0gbG9hZGluZyA/IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTE1KSA6IHBsYWNlaG9sZGVyO1xuXG4gICAgY29uc3QgdmFsdWVMaXN0ID0gdmFsdWUgPyB2YWx1ZS5zcGxpdChkZWxpbWl0ZXIpIDogW107XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8TXVsdGlTZWxlY3RXcmFwcGVyXG4gICAgICAgICAgICB2YWx1ZXM9e3ZhbHVlTGlzdH1cbiAgICAgICAgICAgIGVycm9yPXtlcnJvcn1cbiAgICAgICAgICAgIG5hbWU9e2ZpZWxkfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e2VmZmVjdGl2ZVBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e2VmZmVjdGl2ZURpc2FibGVkfVxuICAgICAgICAgICAgYWxsb3dOZXdWYWx1ZXM9e2NyZWF0ZVNlYXJjaENob2ljZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICBpbmxpbmVcbiAgICAgICAgPlxuICAgICAgICAgICAge29wdGlvbnMgJiYgb3B0aW9ucy5sZW5ndGggPiAwICYmIG9wdGlvbnN9XG4gICAgICAgIDwvTXVsdGlTZWxlY3RXcmFwcGVyPlxuICAgICk7XG59XG5cbk11bHRpSW5wdXRDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGRlcGVuZGVuY3lWYWx1ZXM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5zaGFwZSh7XG4gICAgICAgIGRlbGltaXRlcjogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgcGxhY2Vob2xkZXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGNyZWF0ZVNlYXJjaENob2ljZTogUHJvcFR5cGVzLmJvb2wsXG4gICAgICAgIHJlZmVyZW5jZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGRlcGVuZGVuY2llczogUHJvcFR5cGVzLmFycmF5LFxuICAgICAgICBlbmRwb2ludFVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgZGVueUxpc3Q6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgICAgIGFsbG93TGlzdDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgbGFiZWxGaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgICAgaXRlbXM6IFByb3BUeXBlcy5hcnJheU9mKFxuICAgICAgICAgICAgUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgICAgICAgICAgICBsYWJlbDogUHJvcFR5cGVzLnN0cmluZy5pc1JlcXVpcmVkLFxuICAgICAgICAgICAgICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgICAgICAgICB9KVxuICAgICAgICApLFxuICAgIH0pLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgTXVsdGlJbnB1dENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFN3aXRjaCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1N3aXRjaCc7XG5pbXBvcnQgeyBpc0ZhbHNlIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuY2xhc3MgQ2hlY2tCb3hDb21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGhhbmRsZUNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMucHJvcHMudmFsdWUgJiYgIWlzRmFsc2UodGhpcy5wcm9wcy52YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlKHRoaXMucHJvcHMuZmllbGQsIDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UodGhpcy5wcm9wcy5maWVsZCwgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5wcm9wcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICBzZWxlY3RlZD17ISh0aGlzLnByb3BzLnZhbHVlID8gaXNGYWxzZSh0aGlzLnByb3BzLnZhbHVlKSA6IHRydWUpfVxuICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJjaGVja2JveFwiXG4gICAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ2hlY2tCb3hDb21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuYm9vbCwgUHJvcFR5cGVzLm51bWJlciwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBkaXNhYmxlZDogUHJvcFR5cGVzLmJvb2wsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBDaGVja0JveENvbXBvbmVudDtcbiIsImltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJhZGlvQmFyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvUmFkaW9CYXInO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5cbmNvbnN0IFJhZGlvQmFyV3JhcHBlciA9IHN0eWxlZChSYWRpb0JhcilgXG4gICAgd2lkdGg6IDMyMHB4O1xuYDtcblxuY2xhc3MgUmFkaW9Db21wb25lbnQgZXh0ZW5kcyBDb21wb25lbnQge1xuICAgIGhhbmRsZUNoYW5nZSA9IChlLCB7IHZhbHVlIH0pID0+IHtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2UodGhpcy5wcm9wcy5maWVsZCwgdmFsdWUpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8UmFkaW9CYXJXcmFwcGVyXG4gICAgICAgICAgICAgICAgaW5saW5lXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLnZhbHVlfVxuICAgICAgICAgICAgICAgIGtleT17dGhpcy5wcm9wcy5maWVsZH1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7dGhpcy5wcm9wcy5jb250cm9sT3B0aW9ucy5pdGVtcy5tYXAoKGl0ZW0pID0+IChcbiAgICAgICAgICAgICAgICAgICAgPFJhZGlvQmFyLk9wdGlvbiBrZXk9e2l0ZW0udmFsdWV9IHZhbHVlPXtpdGVtLnZhbHVlfSBsYWJlbD17aXRlbS5sYWJlbH0gLz5cbiAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvUmFkaW9CYXJXcmFwcGVyPlxuICAgICAgICApO1xuICAgIH1cbn1cblxuUmFkaW9Db21wb25lbnQucHJvcFR5cGVzID0ge1xuICAgIHZhbHVlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBmaWVsZDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjb250cm9sT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFJhZGlvQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgU3RhdGljQ29udGVudCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1N0YXRpY0NvbnRlbnQnO1xuXG5mdW5jdGlvbiBQbGFjZWhvbGRlckNvbXBvbmVudChwcm9wcykge1xuICAgIGNvbnN0IHsgZGVmYXVsdFZhbHVlIH0gPSBwcm9wcy5jb250cm9sT3B0aW9ucztcblxuICAgIHJldHVybiA8U3RhdGljQ29udGVudD57ZGVmYXVsdFZhbHVlfTwvU3RhdGljQ29udGVudD47XG59XG5cblBsYWNlaG9sZGVyQ29tcG9uZW50LnByb3BUeXBlcyA9IHtcbiAgICBjb250cm9sT3B0aW9uczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFBsYWNlaG9sZGVyQ29tcG9uZW50O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgZ2V0QnVpbGREaXJQYXRoIH0gZnJvbSAnLi4vdXRpbC9zY3JpcHQnO1xuXG5jbGFzcyBDdXN0b21Db250cm9sIGV4dGVuZHMgQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICAgICAgICBsb2FkaW5nOiB0cnVlLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLnNob3VsZFJlbmRlciA9IHRydWU7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgICAgIGNvbnN0IGFwcE5hbWUgPSBnbG9iYWxDb25maWcubWV0YS5uYW1lO1xuXG4gICAgICAgIHRoaXMubG9hZEN1c3RvbUNvbnRyb2woXG4gICAgICAgICAgICB0aGlzLnByb3BzLmNvbnRyb2xPcHRpb25zLnNyYyxcbiAgICAgICAgICAgIHRoaXMucHJvcHMuY29udHJvbE9wdGlvbnMudHlwZSxcbiAgICAgICAgICAgIGFwcE5hbWVcbiAgICAgICAgKS50aGVuKChDb250cm9sKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjdXN0b21Db250cm9sID0gbmV3IENvbnRyb2woXG4gICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLFxuICAgICAgICAgICAgICAgIHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5kYXRhLFxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWUsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy51dGlsQ3VzdG9tRnVuY3Rpb25zXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY3VzdG9tQ29udHJvbC5yZW5kZXIoKTtcblxuICAgICAgICAgICAgaWYgKHR5cGVvZiBjdXN0b21Db250cm9sLnZhbGlkYXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmFkZEN1c3RvbVZhbGlkYXRvcih0aGlzLnByb3BzLmZpZWxkLCBjdXN0b21Db250cm9sLnZhbGlkYXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvYWRpbmc6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBzaG91bGRDb21wb25lbnRVcGRhdGUobmV4dFByb3BzLCBuZXh0U3RhdGUpIHtcbiAgICAgICAgaWYgKCFuZXh0U3RhdGUubG9hZGluZyAmJiB0aGlzLnNob3VsZFJlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsb2FkQ3VzdG9tQ29udHJvbCA9IChtb2R1bGUsIHR5cGUsIGFwcE5hbWUpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ2V4dGVybmFsJykge1xuICAgICAgICAgICAgICAgIGltcG9ydCgvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIGAke2dldEJ1aWxkRGlyUGF0aCgpfS9jdXN0b20vJHttb2R1bGV9LmpzYCkudGhlbihcbiAgICAgICAgICAgICAgICAgICAgKGV4dGVybmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBDb250cm9sID0gZXh0ZXJuYWwuZGVmYXVsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoQ29udHJvbCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBfX25vbl93ZWJwYWNrX3JlcXVpcmVfXyhbYGFwcC8ke2FwcE5hbWV9L2pzL2J1aWxkL2N1c3RvbS8ke21vZHVsZX1gXSwgKENvbnRyb2wpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShDb250cm9sKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHNldFZhbHVlID0gKG5ld1ZhbHVlKSA9PiB7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlQ2hhbmdlKHRoaXMucHJvcHMuZmllbGQsIG5ld1ZhbHVlKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5sb2FkaW5nICYmIF8oJ0xvYWRpbmcuLi4nKX1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17KGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHZpc2liaWxpdHk6IHRoaXMuc3RhdGUubG9hZGluZyA/ICdoaWRkZW4nIDogJ3Zpc2libGUnIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5DdXN0b21Db250cm9sLnByb3BUeXBlcyA9IHtcbiAgICBkYXRhOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGZpZWxkOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIGhhbmRsZUNoYW5nZTogUHJvcFR5cGVzLmZ1bmMsXG4gICAgY29udHJvbE9wdGlvbnM6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgYWRkQ3VzdG9tVmFsaWRhdG9yOiBQcm9wVHlwZXMuZnVuYyxcbiAgICB1dGlsQ3VzdG9tRnVuY3Rpb25zOiBQcm9wVHlwZXMub2JqZWN0LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tQ29udHJvbDtcbiIsImltcG9ydCBIZWxwTGlua0NvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL0hlbHBMaW5rQ29tcG9uZW50JztcbmltcG9ydCBUZXh0Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvVGV4dENvbXBvbmVudCc7XG5pbXBvcnQgU2luZ2xlSW5wdXRDb21wb25lbnQgZnJvbSAnLi4vY29tcG9uZW50cy9TaW5nbGVJbnB1dENvbXBvbmVudCc7XG5pbXBvcnQgTXVsdGlJbnB1dENvbXBvbmVudCBmcm9tICcuLi9jb21wb25lbnRzL011bHRpSW5wdXRDb21wb25lbnQnO1xuaW1wb3J0IENoZWNrQm94Q29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvQ2hlY2tCb3hDb21wb25lbnQnO1xuaW1wb3J0IFJhZGlvQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvUmFkaW9Db21wb25lbnQnO1xuaW1wb3J0IFBsYWNlaG9sZGVyQ29tcG9uZW50IGZyb20gJy4uL2NvbXBvbmVudHMvUGxhY2Vob2xkZXJDb21wb25lbnQnO1xuaW1wb3J0IEN1c3RvbUNvbnRyb2wgZnJvbSAnLi4vY29tcG9uZW50cy9DdXN0b21Db250cm9sJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIHRleHQ6IFRleHRDb21wb25lbnQsXG4gICAgc2luZ2xlU2VsZWN0OiBTaW5nbGVJbnB1dENvbXBvbmVudCxcbiAgICBoZWxwTGluazogSGVscExpbmtDb21wb25lbnQsXG4gICAgbXVsdGlwbGVTZWxlY3Q6IE11bHRpSW5wdXRDb21wb25lbnQsXG4gICAgY2hlY2tib3g6IENoZWNrQm94Q29tcG9uZW50LFxuICAgIHJhZGlvOiBSYWRpb0NvbXBvbmVudCxcbiAgICBwbGFjZWhvbGRlcjogUGxhY2Vob2xkZXJDb21wb25lbnQsXG4gICAgY3VzdG9tOiBDdXN0b21Db250cm9sLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IENvbnRyb2xHcm91cCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0NvbnRyb2xHcm91cCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IE1hcmtkb3duTWVzc2FnZSBmcm9tICcuL01hcmtkb3duTWVzc2FnZSc7XG5pbXBvcnQgQ09OVFJPTF9UWVBFX01BUCBmcm9tICcuLi9jb25zdGFudHMvQ29udHJvbFR5cGVNYXAnO1xuXG5jb25zdCBDdXN0b21FbGVtZW50ID0gc3R5bGVkLmRpdmBcbiAgICBtYXJnaW4tbGVmdDogMzBweDtcbmA7XG5cbmNvbnN0IENvbnRyb2xHcm91cFdyYXBwZXIgPSBzdHlsZWQoQ29udHJvbEdyb3VwKS5hdHRycygocHJvcHMpID0+ICh7XG4gICAgJ2RhdGEtbmFtZSc6IHByb3BzLmRhdGFOYW1lLFxufSkpYFxuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1heC13aWR0aDogMTAwJTtcblxuICAgID4gKiB7XG4gICAgICAgICY6Zmlyc3QtY2hpbGQge1xuICAgICAgICAgICAgd2lkdGg6IDI0MHB4ICFpbXBvcnRhbnQ7XG4gICAgICAgIH1cbiAgICAgICAgJjpudGgtY2hpbGQoMykge1xuICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDI3MHB4ICFpbXBvcnRhbnQ7XG4gICAgICAgICAgICB3aWR0aDogMzIwcHg7XG4gICAgICAgIH1cbiAgICB9XG5gO1xuXG5jbGFzcyBDb250cm9sV3JhcHBlciBleHRlbmRzIFJlYWN0LlB1cmVDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5jb250cm9sVHlwZSA9IHRoaXMuaXNTdHJpbmcocHJvcHMuZW50aXR5LnR5cGUpXG4gICAgICAgICAgICA/IENPTlRST0xfVFlQRV9NQVBbcHJvcHMuZW50aXR5LnR5cGVdXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgfVxuXG4gICAgaXNTdHJpbmcgPSAoc3RyKSA9PiB7XG4gICAgICAgIHJldHVybiAhISh0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyB8fCBzdHIgaW5zdGFuY2VvZiBTdHJpbmcpO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgZmllbGQsIHR5cGUsIGxhYmVsLCB0b29sdGlwLCBoZWxwLCBlbmNyeXB0ZWQgPSBmYWxzZSB9ID0gdGhpcy5wcm9wcy5lbnRpdHk7XG4gICAgICAgIGNvbnN0IHsgaGFuZGxlQ2hhbmdlLCBhZGRDdXN0b21WYWxpZGF0b3IsIHV0aWxDdXN0b21GdW5jdGlvbnMgfSA9IHRoaXMucHJvcHMudXRpbGl0eUZ1bmN0cztcbiAgICAgICAgLy8gV2UgaGF2ZSB0byBwdXQgZW1wdHkgb2JqZWN0IGJlY2F1c2UgbWFya0Rvd25NZXNzYWdlIHByb3AgY2FuIGJlIHVuZGVmaW5lZFxuICAgICAgICAvLyBiZWNhdXNlIHdlIGFyZSBub3QgZXhwbGljaXRseSBzZXR0aW5nIGl0IGJ1dCBleHBlY3RpbmcgaXQgZnJvbSBjdXN0b20gaG9va3Mgb25seS5cbiAgICAgICAgY29uc3QgeyB0ZXh0LCBsaW5rLCBjb2xvciwgbWFya2Rvd25UeXBlLCB0b2tlbiwgbGlua1RleHQgfSA9XG4gICAgICAgICAgICB0aGlzLnByb3BzLm1hcmtkb3duTWVzc2FnZSB8fCB7fTtcbiAgICAgICAgbGV0IHJvd1ZpZXc7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLmVudGl0eS50eXBlID09PSAnY3VzdG9tJykge1xuICAgICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy5wcm9wcy52YWx1ZSxcbiAgICAgICAgICAgICAgICBtb2RlOiB0aGlzLnByb3BzLm1vZGUsXG4gICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHRoaXMucHJvcHMuc2VydmljZU5hbWUsXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByb3dWaWV3ID0gdGhpcy5jb250cm9sVHlwZVxuICAgICAgICAgICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudCh0aGlzLmNvbnRyb2xUeXBlLCB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGEsXG4gICAgICAgICAgICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIGFkZEN1c3RvbVZhbGlkYXRvcixcbiAgICAgICAgICAgICAgICAgICAgdXRpbEN1c3RvbUZ1bmN0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbE9wdGlvbnM6IHRoaXMucHJvcHMuZW50aXR5Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IGBObyBWaWV3IEZvdW5kIGZvciAke3R5cGV9IHR5cGVgO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcm93VmlldyA9IHRoaXMuY29udHJvbFR5cGVcbiAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQodGhpcy5jb250cm9sVHlwZSwge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnByb3BzLnZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbE9wdGlvbnM6IHRoaXMucHJvcHMuZW50aXR5Lm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiB0aGlzLnByb3BzLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5wcm9wcy5kaXNhYmxlZCxcbiAgICAgICAgICAgICAgICAgICAgZW5jcnlwdGVkLFxuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5VmFsdWVzOiB0aGlzLnByb3BzLmRlcGVuZGVuY3lWYWx1ZXMsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICA6IGBObyBWaWV3IEZvdW5kIGZvciAke3R5cGV9IHR5cGVgO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaGVscFRleHQgPSAoXG4gICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgIDxNYXJrZG93bk1lc3NhZ2VcbiAgICAgICAgICAgICAgICAgICAgdGV4dD17dGV4dCB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgbGluaz17bGluayB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgY29sb3I9e2NvbG9yIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgICBtYXJrZG93blR5cGU9e21hcmtkb3duVHlwZSB8fCAnJ31cbiAgICAgICAgICAgICAgICAgICAgdG9rZW49e3Rva2VuIHx8ICcnfVxuICAgICAgICAgICAgICAgICAgICBsaW5rVGV4dD17bGlua1RleHQgfHwgJyd9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICB7aGVscH1cbiAgICAgICAgICAgIDwvPlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICB0aGlzLnByb3BzLmRpc3BsYXkgJiYgKFxuICAgICAgICAgICAgICAgIDxDb250cm9sR3JvdXBXcmFwcGVyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPXtsYWJlbH1cbiAgICAgICAgICAgICAgICAgICAgaGVscD17aGVscFRleHR9XG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXA9e3Rvb2x0aXB9XG4gICAgICAgICAgICAgICAgICAgIGVycm9yPXt0aGlzLnByb3BzLmVycm9yfVxuICAgICAgICAgICAgICAgICAgICBkYXRhTmFtZT17ZmllbGR9XG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Q3VzdG9tRWxlbWVudD57cm93Vmlld308L0N1c3RvbUVsZW1lbnQ+XG4gICAgICAgICAgICAgICAgPC9Db250cm9sR3JvdXBXcmFwcGVyPlxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn1cblxuQ29udHJvbFdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAgIG1vZGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdXRpbGl0eUZ1bmN0czogUHJvcFR5cGVzLm9iamVjdCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLmFueSxcbiAgICBkaXNwbGF5OiBQcm9wVHlwZXMuYm9vbCxcbiAgICBlcnJvcjogUHJvcFR5cGVzLmJvb2wsXG4gICAgZW50aXR5OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGRpc2FibGVkOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBtYXJrZG93bk1lc3NhZ2U6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGVwZW5kZW5jeVZhbHVlczogUHJvcFR5cGVzLm9iamVjdCxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IENvbnRyb2xXcmFwcGVyO1xuIiwiaW1wb3J0IHsgZ2V0Rm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJy4uL3V0aWwvbWVzc2FnZVV0aWwnO1xuXG4vLyBSZWdleCBvZiBpcHY0LCBlbWFpbCBhbmQgZGF0ZSBjb21lIGZyb21cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGRlZWQvbWV0ZW9yLXNpbXBsZS1zY2hlbWEvYmxvYi80YzFlMjU3MGIxMDU1YWQ2MGUxZTY1NDA1ODJiODgyZjc2NWZkZTEzL3NpbXBsZS1zY2hlbWEuanMjTDUyNVxuZXhwb3J0IGNvbnN0IFJFR0VYX0lQVjQgPSAvXig/Oig/OlswLTFdP1xcZHsxLDJ9fDJbMC00XVxcZHwyNVswLTVdKSg/OlxcLnwkKSl7NH0kLztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZWxlc3MtZXNjYXBlXG5leHBvcnQgY29uc3QgUkVHRVhfRU1BSUwgPSAvXlthLXpBLVowLTkuISMkJSYnKitcXC89P15fYHt8fX4tXStAW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KD86XFwuW2EtekEtWjAtOV0oPzpbYS16QS1aMC05LV17MCw2MX1bYS16QS1aMC05XSk/KSokLztcblxuLy8gQ29kZVFMOiBUaGlzIFJlZ2V4IHdpbGwgYmUgZXhlY3V0ZWQgYXQgY2xpZW50IHNpZGUgYW5kIHRvIGF2b2lkIHJlZ3Jlc3Npb24gd2Ugd29uJ3QgZml4LlxuZXhwb3J0IGNvbnN0IFJFR0VYX1VSTCA9IC9eKD86KD86aHR0cHM/fGZ0cHxvcGNcXC50Y3ApOlxcL1xcLyk/KD86XFxTKyg/OjpcXFMqKT9AKT8oPzooPzpbMS05XVxcZD98MVxcZFxcZHwyWzAxXVxcZHwyMlswLTNdKSg/OlxcLig/OjE/XFxkezEsMn18MlswLTRdXFxkfDI1WzAtNV0pKXsyfSg/OlxcLig/OlsxLTldXFxkP3wxXFxkXFxkfDJbMC00XVxcZHwyNVswLTRdKSl8KD86KD86W2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rLT9fPykqW2EtelxcdTAwYTEtXFx1ZmZmZjAtOV0rKSg/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmYwLTldKy0/KSpbYS16XFx1MDBhMS1cXHVmZmZmMC05XSspKig/OlxcLig/OlthLXpcXHUwMGExLVxcdWZmZmZdezIsfSkpPykoPzo6XFxkezIsNX0pPyg/OlxcL1teXFxzXSopPyQvO1xuXG4vLyBGcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2Jsb2IvMi4xNy4xL21vbWVudC5qcyNMMTk4MCBtb21lbnQuanMgaXMgdXNpbmcgcmVnZXggYmVsb3cgZm9yIGNoZWNraW5nIElTTzg2MDEgZGF0ZSBzdHJpbmdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11c2VsZXNzLWVzY2FwZVxuZXhwb3J0IGNvbnN0IFJFR0VYX0RBVEUgPSAvXlxccyooKD86WystXVxcZHs2fXxcXGR7NH0pLSg/OlxcZFxcZC1cXGRcXGR8V1xcZFxcZC1cXGR8V1xcZFxcZHxcXGRcXGRcXGR8XFxkXFxkKSkoPzooVHwgKShcXGRcXGQoPzo6XFxkXFxkKD86OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbmV4cG9ydCBjb25zdCBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVCA9IHtcbiAgICB1cmw6IHsgcmVnZXg6IFJFR0VYX1VSTCwgaW5wdXRWYWx1ZVR5cGU6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTExKSB9LFxuICAgIGVtYWlsOiB7IHJlZ2V4OiBSRUdFWF9FTUFJTCwgaW5wdXRWYWx1ZVR5cGU6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTEyKSB9LFxuICAgIGlwdjQ6IHsgcmVnZXg6IFJFR0VYX0lQVjQsIGlucHV0VmFsdWVUeXBlOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDExMykgfSxcbiAgICBkYXRlOiB7IHJlZ2V4OiBSRUdFWF9EQVRFLCBpbnB1dFZhbHVlVHlwZTogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxMTQpIH0sXG59O1xuIiwiaW1wb3J0IHsgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QgfSBmcm9tICcuLi9jb25zdGFudHMvcHJlRGVmaW5lZFJlZ2V4JztcbmltcG9ydCB7IGdldEZvcm1hdHRlZE1lc3NhZ2UgfSBmcm9tICcuL21lc3NhZ2VVdGlsJztcbmltcG9ydCB7XG4gICAgcGFyc2VOdW1iZXJWYWxpZGF0b3IsXG4gICAgcGFyc2VSZWdleFJhd1N0cixcbiAgICBwYXJzZVN0cmluZ1ZhbGlkYXRvcixcbiAgICBwYXJzZUZ1bmN0aW9uUmF3U3RyLFxufSBmcm9tICcuL3VjY0NvbmZpZ3VyYXRpb25WYWxpZGF0b3JzJztcblxuLy8gVmFsaWRhdGUgcHJvdmlkZWQgc2F2ZVZhbGlkYXRvciBmdW5jdGlvblxuZXhwb3J0IGZ1bmN0aW9uIFNhdmVWYWxpZGF0b3IodmFsaWRhdG9yRnVuYywgZm9ybURhdGEpIHtcbiAgICBjb25zdCB7IGVycm9yLCByZXN1bHQgfSA9IHBhcnNlRnVuY3Rpb25SYXdTdHIodmFsaWRhdG9yRnVuYyk7XG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAgIHJldHVybiB7IGVycm9yTXNnOiBlcnJvciB9O1xuICAgIH1cbiAgICBjb25zdCByZXQgPSByZXN1bHQoZm9ybURhdGEpO1xuICAgIGlmICh0eXBlb2YgcmV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4geyBlcnJvck1zZzogcmV0IH07XG4gICAgfVxufVxuXG5jbGFzcyBWYWxpZGF0b3Ige1xuICAgIGNvbnN0cnVjdG9yKGVudGl0aWVzKSB7XG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSBlbnRpdGllcztcbiAgICAgICAgdGhpcy5pc05hbWUgPSBlbnRpdGllcy5maW5kKChlKSA9PiBlLmZpZWxkID09PSAnbmFtZScpO1xuICAgIH1cblxuICAgIGNoZWNrSXNGaWVsZEhhc0lucHV0ID0gKGF0dHJWYWx1ZSkgPT4ge1xuICAgICAgICByZXR1cm4gYXR0clZhbHVlICE9PSB1bmRlZmluZWQgJiYgYXR0clZhbHVlICE9PSAnJyAmJiBhdHRyVmFsdWUgIT09IG51bGw7XG4gICAgfTtcblxuICAgIC8vIFZhbGlkYXRlIHRoZSByZXF1aXJlZCBmaWVsZCBoYXMgdmFsdWVcbiAgICBSZXF1aXJlZFZhbGlkYXRvcihmaWVsZCwgbGFiZWwsIGRhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrSXNGaWVsZEhhc0lucHV0KGRhdGEpKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiBmaWVsZCwgZXJyb3JNc2c6IGdldEZvcm1hdHRlZE1lc3NhZ2UoNiwgW2xhYmVsXSkgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgdGhlIHN0cmluZyBsZW5ndGggb2YgZmllbGRcbiAgICBTdHJpbmdWYWxpZGF0b3IoZmllbGQsIGxhYmVsLCB2YWxpZGF0b3IsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gcGFyc2VTdHJpbmdWYWxpZGF0b3IodmFsaWRhdG9yLm1pbkxlbmd0aCwgdmFsaWRhdG9yLm1heExlbmd0aCk7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogZmllbGQsIGVycm9yTXNnOiBlcnJvciB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNGaWVsZEhhc0lucHV0KGRhdGEpICYmIGRhdGEubGVuZ3RoID4gdmFsaWRhdG9yLm1heExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICBlcnJvck1zZzogdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgID8gdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgIDogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxOCwgW2xhYmVsLCB2YWxpZGF0b3IubWF4TGVuZ3RoXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmNoZWNrSXNGaWVsZEhhc0lucHV0KGRhdGEpICYmIGRhdGEubGVuZ3RoIDwgdmFsaWRhdG9yLm1pbkxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICBlcnJvck1zZzogdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgID8gdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgIDogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxNywgW2xhYmVsLCB2YWxpZGF0b3IubWluTGVuZ3RoXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBWYWxpZGF0ZSB0aGUgZmllbGQgc2hvdWxkIG1hdGNoIHRoZSBwcm92aWRlZCBSZWdleFxuICAgIFJlZ2V4VmFsaWRhdG9yKGZpZWxkLCBsYWJlbCwgdmFsaWRhdG9yLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgZXJyb3IsIHJlc3VsdDogcmVnZXggfSA9IHBhcnNlUmVnZXhSYXdTdHIodmFsaWRhdG9yLnBhdHRlcm4pO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6IGZpZWxkLCBlcnJvck1zZzogZXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVja0lzRmllbGRIYXNJbnB1dChkYXRhKSAmJiAhcmVnZXgudGVzdChkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICBlcnJvck1zZzogdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgID8gdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgIDogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxNSwgW2xhYmVsLCB2YWxpZGF0b3IucGF0dGVybl0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgdGhlIGN1c3RvbSBjb21wb25lbnRcbiAgICBzdGF0aWMgQ3VzdG9tVmFsaWRhdG9yKHZhbGlkYXRvckZ1bmMsIGZpZWxkLCBkYXRhKSB7XG4gICAgICAgIGNvbnN0IHJldCA9IHZhbGlkYXRvckZ1bmMoZmllbGQsIGRhdGEpO1xuICAgICAgICBpZiAodHlwZW9mIHJldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6IGZpZWxkLCBlcnJvck1zZzogcmV0IH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFZhbGlkYXRlIHRoZSBmaWVsZCBzaG91bGQgbWF0Y2ggcHJlZGVmaW5lZCBSZWdleGVzXG4gICAgUHJlRGVmaW5lZFJlZ2V4VmFsaWRhdG9yKGZpZWxkLCBsYWJlbCwgdmFsaWRhdG9yLCBkYXRhLCBwYXR0ZXJuLCBpbnB1dFZhbHVlVHlwZSkge1xuICAgICAgICBjb25zdCB7IGVycm9yLCByZXN1bHQ6IHJlZ2V4IH0gPSBwYXJzZVJlZ2V4UmF3U3RyKHBhdHRlcm4pO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6IGZpZWxkLCBlcnJvck1zZzogZXJyb3IgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGVja0lzRmllbGRIYXNJbnB1dChkYXRhKSAmJiAhcmVnZXgudGVzdChkYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICBlcnJvck1zZzogdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgID8gdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgIDogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxOSwgW2xhYmVsLCBpbnB1dFZhbHVlVHlwZV0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVmFsaWRhdGUgdGhlIHJhbmdlIG9mIG51bWVyaWMgZmllbGRcbiAgICBOdW1iZXJWYWxpZGF0b3IoZmllbGQsIGxhYmVsLCB2YWxpZGF0b3IsIGRhdGEpIHtcbiAgICAgICAgY29uc3QgeyBlcnJvciB9ID0gcGFyc2VOdW1iZXJWYWxpZGF0b3IodmFsaWRhdG9yLnJhbmdlKTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiBmaWVsZCwgZXJyb3JNc2c6IGVycm9yIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB2YWwgPSBOdW1iZXIoZGF0YSk7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4odmFsKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBlcnJvckZpZWxkOiBmaWVsZCxcbiAgICAgICAgICAgICAgICBlcnJvck1zZzogdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgID8gdmFsaWRhdG9yLmVycm9yTXNnXG4gICAgICAgICAgICAgICAgICAgIDogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgxNiwgW2xhYmVsXSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgICh0aGlzLmNoZWNrSXNGaWVsZEhhc0lucHV0KGRhdGEpICYmIHZhbCA+IHZhbGlkYXRvci5yYW5nZVsxXSkgfHxcbiAgICAgICAgICAgIHZhbCA8IHZhbGlkYXRvci5yYW5nZVswXVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZXJyb3JGaWVsZDogZmllbGQsXG4gICAgICAgICAgICAgICAgZXJyb3JNc2c6IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA/IHZhbGlkYXRvci5lcnJvck1zZ1xuICAgICAgICAgICAgICAgICAgICA6IGdldEZvcm1hdHRlZE1lc3NhZ2UoOCwgW2xhYmVsLCB2YWxpZGF0b3IucmFuZ2VbMF0sIHZhbGlkYXRvci5yYW5nZVsxXV0pLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgZG9WYWxpZGF0aW9uKGRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNOYW1lKSB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXRWYWx1ZSA9IGRhdGEubmFtZTtcbiAgICAgICAgICAgIGNvbnN0IG5hbWVGaWVsZExhYmVsID0gdGhpcy5pc05hbWUubGFiZWw7XG5cbiAgICAgICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0VmFsdWUgPT09ICd1bmRlZmluZWQnIHx8IHRhcmdldFZhbHVlID09PSAnJyB8fCB0YXJnZXRWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZXJyb3JGaWVsZDogJ25hbWUnLCBlcnJvck1zZzogZ2V0Rm9ybWF0dGVkTWVzc2FnZSgwLCBbbmFtZUZpZWxkTGFiZWxdKSB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEodHlwZW9mIHRhcmdldFZhbHVlID09PSAnc3RyaW5nJyB8fCB0YXJnZXRWYWx1ZSBpbnN0YW5jZW9mIFN0cmluZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiAnbmFtZScsIGVycm9yTXNnOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDEsIFtuYW1lRmllbGRMYWJlbF0pIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdGFyZ2V0VmFsdWUuc3RhcnRzV2l0aCgnXycpIHx8XG4gICAgICAgICAgICAgICAgdGFyZ2V0VmFsdWUgPT09ICcuJyB8fFxuICAgICAgICAgICAgICAgIHRhcmdldFZhbHVlID09PSAnLi4nIHx8XG4gICAgICAgICAgICAgICAgdGFyZ2V0VmFsdWUudG9Mb3dlckNhc2UoKSA9PT0gJ2RlZmF1bHQnXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiAnbmFtZScsIGVycm9yTXNnOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDMsIFtuYW1lRmllbGRMYWJlbF0pIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCByZWdleE1ldGFDaGFyYWN0ZXJzID0gWycqJywgJ1xcXFwnLCAnWycsICddJywgJygnLCAnKScsICc/JywgJzonXTtcbiAgICAgICAgICAgIGlmIChyZWdleE1ldGFDaGFyYWN0ZXJzLnNvbWUoKGQpID0+IHRhcmdldFZhbHVlLmluZGV4T2YoZCkgPiAtMSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBlcnJvckZpZWxkOiAnbmFtZScsIGVycm9yTXNnOiBnZXRGb3JtYXR0ZWRNZXNzYWdlKDMsIFtuYW1lRmllbGRMYWJlbF0pIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0YXJnZXRWYWx1ZS5sZW5ndGggPj0gMTAyNCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVycm9yRmllbGQ6ICduYW1lJywgZXJyb3JNc2c6IGdldEZvcm1hdHRlZE1lc3NhZ2UoMjIsIFtuYW1lRmllbGRMYWJlbF0pIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgcmV0O1xuICAgICAgICBsZXQgaTtcbiAgICAgICAgbGV0IGo7XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuZW50aXRpZXMubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmVudGl0aWVzW2ldLnJlcXVpcmVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5SZXF1aXJlZFZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdID09PSAnJyB8fCBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzKSB7XG4gICAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9ycy5sZW5ndGg7IGogKz0gMSkge1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXS50eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdHJpbmcnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuU3RyaW5nVmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdyZWdleCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5SZWdleFZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbnVtYmVyJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLk51bWJlclZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndXJsJzpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXQgPSB0aGlzLlByZURlZmluZWRSZWdleFZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5maWVsZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhW3RoaXMuZW50aXRpZXNbaV0uZmllbGRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBQUkVERUZJTkVEX1ZBTElEQVRPUlNfRElDVC51cmwucmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULnVybC5pbnB1dFZhbHVlVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldCA9IHRoaXMuUHJlRGVmaW5lZFJlZ2V4VmFsaWRhdG9yKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmZpZWxkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLmxhYmVsLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzW2ldLnZhbGlkYXRvcnNbal0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULmRhdGUucmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULmRhdGUuaW5wdXRWYWx1ZVR5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdlbWFpbCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5QcmVEZWZpbmVkUmVnZXhWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QuZW1haWwucmVnZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBSRURFRklORURfVkFMSURBVE9SU19ESUNULmVtYWlsLmlucHV0VmFsdWVUeXBlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaXB2NCc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gdGhpcy5QcmVEZWZpbmVkUmVnZXhWYWxpZGF0b3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0ubGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0udmFsaWRhdG9yc1tqXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVt0aGlzLmVudGl0aWVzW2ldLmZpZWxkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QuaXB2NC5yZWdleCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUFJFREVGSU5FRF9WQUxJREFUT1JTX0RJQ1QuaXB2NC5pbnB1dFZhbHVlVHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2N1c3RvbSc6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gVmFsaWRhdG9yLkN1c3RvbVZhbGlkYXRvcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbnRpdGllc1tpXS52YWxpZGF0b3JzW2pdLnZhbGlkYXRvckZ1bmMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXNbaV0uZmllbGQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbdGhpcy5lbnRpdGllc1tpXS5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFZhbGlkYXRvcjtcbiIsImltcG9ydCBSZWFjdCwgeyBQdXJlQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcblxuaW1wb3J0IENvbGxhcHNpYmxlUGFuZWwgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9Db2xsYXBzaWJsZVBhbmVsJztcbmltcG9ydCBNZXNzYWdlIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTWVzc2FnZSc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcblxuaW1wb3J0IENvbnRyb2xXcmFwcGVyIGZyb20gJy4vQ29udHJvbFdyYXBwZXInO1xuaW1wb3J0IFZhbGlkYXRvciwgeyBTYXZlVmFsaWRhdG9yIH0gZnJvbSAnLi4vdXRpbC9WYWxpZGF0b3InO1xuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MsIGdlbmVyYXRlVG9hc3QgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgTU9ERV9DTE9ORSwgTU9ERV9DUkVBVEUsIE1PREVfRURJVCwgTU9ERV9DT05GSUcgfSBmcm9tICcuLi9jb25zdGFudHMvbW9kZXMnO1xuaW1wb3J0IHsgUEFHRV9JTlBVVCwgUEFHRV9DT05GIH0gZnJvbSAnLi4vY29uc3RhbnRzL3BhZ2VzJztcbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IHsgcGFyc2VFcnJvck1zZywgZ2V0Rm9ybWF0dGVkTWVzc2FnZSB9IGZyb20gJy4uL3V0aWwvbWVzc2FnZVV0aWwnO1xuaW1wb3J0IHsgZ2V0QnVpbGREaXJQYXRoIH0gZnJvbSAnLi4vdXRpbC9zY3JpcHQnO1xuXG5pbXBvcnQge1xuICAgIEVSUk9SX1JFUVVFU1RfVElNRU9VVF9UUllfQUdBSU4sXG4gICAgRVJST1JfUkVRVUVTVF9USU1FT1VUX0FDQ0VTU19UT0tFTl9UUllfQUdBSU4sXG4gICAgRVJST1JfT0NDVVJSRURfVFJZX0FHQUlOLFxuICAgIEVSUk9SX0FVVEhfUFJPQ0VTU19URVJNSU5BVEVEX1RSWV9BR0FJTixcbiAgICBFUlJPUl9TVEFURV9NSVNTSU5HX1RSWV9BR0FJTixcbn0gZnJvbSAnLi4vY29uc3RhbnRzL29BdXRoRXJyb3JNZXNzYWdlJztcbmltcG9ydCBUYWJsZUNvbnRleHQgZnJvbSAnLi4vY29udGV4dC9UYWJsZUNvbnRleHQnO1xuXG5jb25zdCBDb2xsYXBzaWJsZVBhbmVsV3JhcHBlciA9IHN0eWxlZChDb2xsYXBzaWJsZVBhbmVsKWBcbiAgICBzcGFuIHtcbiAgICAgICAgYnV0dG9uIHtcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xuICAgICAgICAgICAgbWFyZ2luOiAxMHB4IDA7XG5cbiAgICAgICAgICAgICY6aG92ZXI6bm90KFtkaXNhYmxlZF0pLFxuICAgICAgICAgICAgJjpmb2N1czpub3QoW2Rpc2FibGVkXSksXG4gICAgICAgICAgICAmOmFjdGl2ZTpub3QoW2Rpc2FibGVkXSkge1xuICAgICAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xuICAgICAgICAgICAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAuY29sbGFwc2libGUtZWxlbWVudCB7XG4gICAgICAgIHBhZGRpbmctdG9wOiAxNXB4O1xuICAgIH1cbmA7XG5cbmNvbnN0IEN1c3RvbUdyb3VwTGFiZWwgPSBzdHlsZWQuZGl2YFxuICAgIHBhZGRpbmc6IDZweCAxMHB4O1xuICAgIGJhY2tncm91bmQtY29sb3I6ICNmMmY0ZjU7XG5gO1xuXG5jbGFzcyBCYXNlRm9ybVZpZXcgZXh0ZW5kcyBQdXJlQ29tcG9uZW50IHtcbiAgICBzdGF0aWMgY29udGV4dFR5cGUgPSBUYWJsZUNvbnRleHQ7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm9wcywgY29udGV4dCkge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG4gICAgICAgIC8vIGZsYWcgZm9yIHRvIHJlbmRlciBob29rIG1ldGhvZCBmb3Igb25jZVxuICAgICAgICB0aGlzLmZsYWcgPSB0cnVlO1xuICAgICAgICB0aGlzLnN0YXRlID0ge307XG4gICAgICAgIHRoaXMuY3VycmVudElucHV0ID0ge307XG4gICAgICAgIGNvbnN0IGdsb2JhbENvbmZpZyA9IGdldFVuaWZpZWRDb25maWdzKCk7XG4gICAgICAgIHRoaXMuYXBwTmFtZSA9IGdsb2JhbENvbmZpZy5tZXRhLm5hbWU7XG4gICAgICAgIHRoaXMuZW5kcG9pbnQgPVxuICAgICAgICAgICAgcHJvcHMubW9kZSA9PT0gTU9ERV9FRElUIHx8IHByb3BzLm1vZGUgPT09IE1PREVfQ09ORklHXG4gICAgICAgICAgICAgICAgPyBgJHt0aGlzLnByb3BzLnNlcnZpY2VOYW1lfS8ke2VuY29kZVVSSUNvbXBvbmVudCh0aGlzLnByb3BzLnN0YW56YU5hbWUpfWBcbiAgICAgICAgICAgICAgICA6IGAke3RoaXMucHJvcHMuc2VydmljZU5hbWV9YDtcblxuICAgICAgICB0aGlzLnV0aWwgPSB7XG4gICAgICAgICAgICBzZXRTdGF0ZTogKGNhbGxiYWNrKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5vblNhdmVQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSgocHJldmlvdXNTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHByZXZpb3VzU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICB9LCByZXNvbHZlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRFcnJvckZpZWxkTXNnOiB0aGlzLnNldEVycm9yRmllbGRNc2csXG4gICAgICAgICAgICBjbGVhckFsbEVycm9yTXNnOiB0aGlzLmNsZWFyQWxsRXJyb3JNc2csXG4gICAgICAgICAgICBzZXRFcnJvck1zZzogdGhpcy5zZXRFcnJvck1zZyxcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnV0aWxDb250cm9sV3JhcHBlciA9IHtcbiAgICAgICAgICAgIGhhbmRsZUNoYW5nZTogdGhpcy5oYW5kbGVDaGFuZ2UsXG4gICAgICAgICAgICBhZGRDdXN0b21WYWxpZGF0b3I6IHRoaXMuYWRkQ3VzdG9tVmFsaWRhdG9yLFxuICAgICAgICAgICAgdXRpbEN1c3RvbUZ1bmN0aW9uczogdGhpcy51dGlsLFxuICAgICAgICB9O1xuXG4gICAgICAgIGlmIChwcm9wcy5wYWdlID09PSBQQUdFX0lOUFVUKSB7XG4gICAgICAgICAgICBnbG9iYWxDb25maWcucGFnZXMuaW5wdXRzLnNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoc2VydmljZS5uYW1lID09PSBwcm9wcy5zZXJ2aWNlTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmdyb3VwcyA9IHNlcnZpY2UuZ3JvdXBzO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVudGl0aWVzID0gc2VydmljZS5lbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlRW50aXRpZXNGb3JHcm91cChzZXJ2aWNlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gc2VydmljZS5vcHRpb25zO1xuICAgICAgICAgICAgICAgICAgICBpZiAoc2VydmljZS5ob29rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2tEZWZlcnJlZCA9IHRoaXMubG9hZEhvb2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZS5ob29rLnNyYyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlLmhvb2sudHlwZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbG9iYWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfRURJVCB8fCBwcm9wcy5tb2RlID09PSBNT0RFX0NMT05FKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IGNvbnRleHQucm93RGF0YVtwcm9wcy5zZXJ2aWNlTmFtZV1bcHJvcHMuc3RhbnphTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbENvbmZpZy5wYWdlcy5jb25maWd1cmF0aW9uLnRhYnMuZm9yRWFjaCgodGFiKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZmxhZyA9IHRhYi50YWJsZVxuICAgICAgICAgICAgICAgICAgICA/IHRhYi5uYW1lID09PSBwcm9wcy5zZXJ2aWNlTmFtZVxuICAgICAgICAgICAgICAgICAgICA6IHRhYi5uYW1lID09PSBwcm9wcy5zdGFuemFOYW1lO1xuICAgICAgICAgICAgICAgIGlmIChmbGFnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXMgPSB0YWIuZW50aXR5O1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSB0YWIub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhYi5ob29rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2tEZWZlcnJlZCA9IHRoaXMubG9hZEhvb2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFiLmhvb2suc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhYi5ob29rLnR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0YWIudGFibGUgJiYgKHByb3BzLm1vZGUgPT09IE1PREVfRURJVCB8fCBwcm9wcy5tb2RlID09PSBNT0RFX0NMT05FKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5wdXQgPSBjb250ZXh0LnJvd0RhdGFbcHJvcHMuc2VydmljZU5hbWVdW3Byb3BzLnN0YW56YU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfQ09ORklHKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRJbnB1dCA9IHByb3BzLmN1cnJlbnRTZXJ2aWNlU3RhdGU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVfY29uZmlnX3RpdGxlID0gdGFiLnRpdGxlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50SW5wdXQgPSBjb250ZXh0LnJvd0RhdGFbcHJvcHMuc2VydmljZU5hbWVdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kZXBlbmRlbmN5TWFwID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmlzT0F1dGggPSBmYWxzZTtcbiAgICAgICAgdGhpcy5pc0F1dGhWYWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hdXRoTWFwID0ge307XG4gICAgICAgIGxldCB0ZW1TdGF0ZSA9IHt9O1xuICAgICAgICBjb25zdCB0ZW1FbnRpdGllcyA9IFtdO1xuXG4gICAgICAgIHRoaXMuZW50aXRpZXMuZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gJ29hdXRoJykge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNPQXV0aCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BzLnBhZ2UgPT09IFBBR0VfQ09ORiAmJiBwcm9wcy5zZXJ2aWNlTmFtZSA9PT0gJ2FjY291bnQnKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF1dGhUeXBlID0gZT8ub3B0aW9ucz8uYXV0aF90eXBlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzb2F1dGhTdGF0ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZT8ub3B0aW9ucz8ub2F1dGhfc3RhdGVfZW5hYmxlZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGU/Lm9wdGlvbnM/Lm9hdXRoX3N0YXRlX2VuYWJsZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGF1dGhUeXBlLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNBdXRoVmFsID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlZmluaW5nIHN0YXRlIGZvciBhdXRoX3R5cGUgaW4gY2FzZSBvZiBtdWx0aXBsZSBBdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtcEVudGl0eSA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuY3VycmVudElucHV0LmF1dGhfdHlwZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0aGlzLmN1cnJlbnRJbnB1dC5hdXRoX3R5cGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBhdXRoVHlwZVswXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzcGxheSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1TdGF0ZS5hdXRoX3R5cGUgPSB0ZW1wRW50aXR5O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZWZpbmluZyBFbnRpdHkgZm9yIGF1dGhfdHlwZSBpbiBlbnRpdHlsaXN0IG9mIGdsb2JhbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW50aXR5ID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuZmllbGQgPSAnYXV0aF90eXBlJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS50eXBlID0gJ3NpbmdsZVNlbGVjdCc7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkubGFiZWwgPSAnQXV0aCBUeXBlJztcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFzaWM6ICdCYXNpYyBBdXRoZW50aWNhdGlvbicsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGg6ICdPQXV0aCAyLjAgQXV0aGVudGljYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eS5vcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkub3B0aW9ucy5oaWRlQ2xlYXJCdG4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Lm9wdGlvbnMuYXV0b0NvbXBsZXRlRmllbGRzID0gYXV0aFR5cGUubWFwKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgbGFiZWw6IGNvbnRlbnRbdHlwZV0sIHZhbHVlOiB0eXBlIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbUVudGl0aWVzLnB1c2goZW50aXR5KTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNTaW5nbGVPYXV0aCA9IGF1dGhUeXBlLmluY2x1ZGVzKCdvYXV0aCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkaW5nIFN0YXRlIGFuZCBFbnRpdHkoaW4gZW50aXR5bGlzdCkgZm9yIGV2ZXJ5IEZpZWxkcyBvZiBcIm9hdXRoXCIgdHlwZVxuICAgICAgICAgICAgICAgICAgICAvLyBJdGVyYXRpbmcgb3ZlciBldmVyeXR5cGUgb2YgQXV0aGVudGljYXRpb24gdW5kZXIgXCJvYXV0aFwiIHR5cGVcbiAgICAgICAgICAgICAgICAgICAgYXV0aFR5cGUuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXV0aGZpZWxkcyA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRzID0gZT8ub3B0aW9uc1t0eXBlXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3IgUGFydGljYXVsYXIgdHlwZSBpdGVyYXRpbmcgb3ZlciBmaWVsZHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXZlcnkgZmllbGQgZm9yIGF1dGggdHlwZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wRW50aXR5ID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BzLm1vZGUgPT09IE1PREVfQ1JFQVRFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZmllbGQ/LmRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBmaWVsZC5kZWZhdWx0VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXNFbmNyeXB0ZWQgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBmaWVsZD8uZW5jcnlwdGVkICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGZpZWxkPy5lbmNyeXB0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPSBpc0VuY3J5cHRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gJydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuY3VycmVudElucHV0W2ZpZWxkLmZpZWxkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRlbVN0YXRlLmF1dGhfdHlwZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHR5cGUgPT09IHRlbVN0YXRlLmF1dGhfdHlwZS52YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5lcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbVN0YXRlW2ZpZWxkLmZpZWxkXSA9IHRlbXBFbnRpdHk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZC50eXBlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVvZiBmaWVsZD8udHlwZSAhPT0gJ3VuZGVmaW5lZCcgPyBmaWVsZC50eXBlIDogJ3RleHQnO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZWQgc3BlY2lhbCBjYXNlIGZvciByZWRpcmVjdF91cmxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkLmZpZWxkID09PSAncmVkaXJlY3RfdXJsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCc/JylbMF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZ3VyYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgJHt0aGlzLmFwcE5hbWUudG9Mb3dlckNhc2UoKX1fcmVkaXJlY3RgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbUVudGl0aWVzLnB1c2goZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdXRoZmllbGRzLnB1c2goZmllbGQuZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aE1hcFt0eXBlXSA9IGF1dGhmaWVsZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoYXV0aFR5cGUuaW5jbHVkZXMoJ29hdXRoJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG9hdXRoQ29uZkRhdGEgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFN0b3JpbmcgTy1BdXRoIENvbmZpZ3VyYXRpb24gZGF0YSB0byBjbGFzcyB2YXJpYWJsZSB0byB1c2UgbGF0ZXJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoQ29uZkRhdGEucG9wdXBXaWR0aCA9IGUub3B0aW9ucy5vYXV0aF9wb3B1cF93aWR0aFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5vcHRpb25zLm9hdXRoX3BvcHVwX3dpZHRoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiA2MDA7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYXV0aENvbmZEYXRhLnBvcHVwSGVpZ2h0ID0gZS5vcHRpb25zLm9hdXRoX3BvcHVwX2hlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5vcHRpb25zLm9hdXRoX3BvcHVwX2hlaWdodFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogNjAwO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGhDb25mRGF0YS5hdXRoVGltZW91dCA9IGUub3B0aW9ucy5vYXV0aF90aW1lb3V0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBlLm9wdGlvbnMub2F1dGhfdGltZW91dFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogMTgwO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2F1dGhDb25mRGF0YS5hdXRoQ29kZUVuZHBvaW50ID0gZS5vcHRpb25zLmF1dGhfY29kZV9lbmRwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gZS5vcHRpb25zLmF1dGhfY29kZV9lbmRwb2ludFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIG9hdXRoQ29uZkRhdGEuYWNjZXNzVG9rZW5FbmRwb2ludCA9IGUub3B0aW9ucy5hY2Nlc3NfdG9rZW5fZW5kcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGUub3B0aW9ucy5hY2Nlc3NfdG9rZW5fZW5kcG9pbnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub2F1dGhDb25mID0gb2F1dGhDb25mRGF0YTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGVtcEVudGl0eSA9IHt9O1xuICAgICAgICAgICAgICAgIGUuZW5jcnlwdGVkID0gdHlwZW9mIGUuZW5jcnlwdGVkICE9PSAndW5kZWZpbmVkJyA/IGUuZW5jcnlwdGVkIDogZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DUkVBVEUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS52YWx1ZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZS5kZWZhdWx0VmFsdWUgIT09ICd1bmRlZmluZWQnID8gZS5kZWZhdWx0VmFsdWUgOiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGU/Lm9wdGlvbnM/LmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZS5vcHRpb25zLmRpc3BsYXkgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtU3RhdGVbZS5maWVsZF0gPSB0ZW1wRW50aXR5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9FRElUKSB7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuY3VycmVudElucHV0W2UuZmllbGRdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5jdXJyZW50SW5wdXRbZS5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPSBlLmVuY3J5cHRlZCA/ICcnIDogdGVtcEVudGl0eS52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc3BsYXkgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGU/Lm9wdGlvbnM/LmRpc3BsYXkgIT09ICd1bmRlZmluZWQnID8gZS5vcHRpb25zLmRpc3BsYXkgOiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZmllbGQgPT09ICduYW1lJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGU/Lm9wdGlvbnM/LmRpc2FibGVvbkVkaXQgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gZS5vcHRpb25zLmRpc2FibGVvbkVkaXQ7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGVtU3RhdGVbZS5maWVsZF0gPSB0ZW1wRW50aXR5O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcHMubW9kZSA9PT0gTU9ERV9DTE9ORSkge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID1cbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZmllbGQgPT09ICduYW1lJyB8fCBlLmVuY3J5cHRlZCA/ICcnIDogdGhpcy5jdXJyZW50SW5wdXRbZS5maWVsZF07XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZT8ub3B0aW9ucz8uZGlzcGxheSAhPT0gJ3VuZGVmaW5lZCcgPyBlLm9wdGlvbnMuZGlzcGxheSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1TdGF0ZVtlLmZpZWxkXSA9IHRlbXBFbnRpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwcm9wcy5tb2RlID09PSBNT0RFX0NPTkZJRykge1xuICAgICAgICAgICAgICAgICAgICBlLmRlZmF1bHRWYWx1ZSA9IHR5cGVvZiBlLmRlZmF1bHRWYWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBlLmRlZmF1bHRWYWx1ZSA6IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkudmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHRoaXMuY3VycmVudElucHV0W2UuZmllbGRdICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5jdXJyZW50SW5wdXRbZS5maWVsZF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGUuZGVmYXVsdFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LnZhbHVlID0gZS5lbmNyeXB0ZWQgPyAnJyA6IHRlbXBFbnRpdHkudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzcGxheSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlb2YgZT8ub3B0aW9ucz8uZGlzcGxheSAhPT0gJ3VuZGVmaW5lZCcgPyBlLm9wdGlvbnMuZGlzcGxheSA6IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGVtcEVudGl0eS5kaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZS5maWVsZCA9PT0gJ25hbWUnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wRW50aXR5LmRpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgZT8ub3B0aW9ucz8uZGlzYWJsZW9uRWRpdCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBFbnRpdHkuZGlzYWJsZWQgPSBlLm9wdGlvbnMuZGlzYWJsZW9uRWRpdDtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB0ZW1TdGF0ZVtlLmZpZWxkXSA9IHRlbXBFbnRpdHk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1vZGUgOicsIHByb3BzLm1vZGUpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBkZXBlbmRlbnQgZmllbGRzXG4gICAgICAgICAgICAgICAgY29uc3QgZmllbGRzID0gZS5vcHRpb25zPy5kZXBlbmRlbmNpZXM7XG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZUZpZWxkcyA9IHRoaXMuZGVwZW5kZW5jeU1hcC5nZXQoZmllbGQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZUZpZWxkcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUZpZWxkc1tlLmZpZWxkXSA9IGZpZWxkcztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXBlbmRlbmN5TWFwLnNldChmaWVsZCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZS5maWVsZF06IGZpZWxkcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRlbUVudGl0aWVzLnB1c2goZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuZW50aXRpZXMgPSB0ZW1FbnRpdGllcztcblxuICAgICAgICAvLyBmbGF0dGVuIHRoZSBkZXBlbmRlbmN5TWFwIHRvIHJlbW92ZSByZWR1bmRhbnQgaXRlcmF0aW9ucyBmb3IgcmVzb2x2aW5nIHRoZW1cbiAgICAgICAgLy8gb25lLWJ5LW9uZSBpbiBmb2xsb3dpbmcgbG9vcFxuICAgICAgICBsZXQgZmxhdHRlbmVkTWFwID0ge307XG4gICAgICAgIHRoaXMuZGVwZW5kZW5jeU1hcC5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgZmxhdHRlbmVkTWFwID0geyAuLi5mbGF0dGVuZWRNYXAsIC4uLnZhbHVlIH07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IGNoYW5nZXMgPSB7fTtcbiAgICAgICAgT2JqZWN0LmtleXMoZmxhdHRlbmVkTWFwKS5mb3JFYWNoKChmaWVsZCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gZmxhdHRlbmVkTWFwW2ZpZWxkXTtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7fTtcbiAgICAgICAgICAgIGxldCBsb2FkID0gdHJ1ZTtcblxuICAgICAgICAgICAgdmFsdWVzLmZvckVhY2goKGRlcGVuZGVuY3kpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1aXJlZCA9ICEhdGhpcy5lbnRpdGllcy5maW5kKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmZpZWxkID09PSBkZXBlbmRlbmN5O1xuICAgICAgICAgICAgICAgIH0pLnJlcXVpcmVkO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY3VycmVudFZhbHVlID0gdGVtU3RhdGVbZGVwZW5kZW5jeV0udmFsdWU7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVkICYmICFjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9hZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2RlcGVuZGVuY3ldID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBkYXRhW2RlcGVuZGVuY3ldID0gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBpZiAobG9hZCkge1xuICAgICAgICAgICAgICAgIGNoYW5nZXNbZmllbGRdID0ge1xuICAgICAgICAgICAgICAgICAgICBkZXBlbmRlbmN5VmFsdWVzOiB7ICRzZXQ6IGRhdGEgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBhcHBseSBkZXBlbmRlbmN5IGZpZWxkIGNoYW5nZXMgaW4gc3RhdGVcbiAgICAgICAgdGVtU3RhdGUgPSB1cGRhdGUodGVtU3RhdGUsIGNoYW5nZXMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgZGF0YTogdGVtU3RhdGUsXG4gICAgICAgICAgICBlcnJvck1zZzogJycsXG4gICAgICAgICAgICB3YXJuaW5nTXNnOiAnJyxcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBIb29rIG9uIGNyZWF0ZSBtZXRob2QgY2FsbFxuICAgICAgICBpZiAodGhpcy5ob29rRGVmZXJyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaG9va0RlZmVycmVkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ob29rLm9uQ3JlYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sub25DcmVhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVFbnRpdGllc0Zvckdyb3VwID0gKHNlcnZpY2UpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBzICYmIHRoaXMuZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5ncm91cHMuZm9yRWFjaCgoZ3JvdXApID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZ3JvdXAgJiYgZ3JvdXAuZmllbGRzPy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXAuZmllbGRzLmZvckVhY2goKGZpZWxkTmFtZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBzZXJ2aWNlLmVudGl0eS5maW5kSW5kZXgoKGUpID0+IGUuZmllbGQgPT09IGZpZWxkTmFtZSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGVkT2JqID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShzZXJ2aWNlLmVudGl0eVtpbmRleF0pKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkT2JqLmlzR3JvdXBpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZW50aXRpZXMuc3BsaWNlKGluZGV4LCAxLCB1cGRhdGVkT2JqKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgaGFuZGxlU3VibWl0ID0gKCkgPT4ge1xuICAgICAgICB0aGlzLmNsZWFyRXJyb3JNc2coKTtcbiAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KC8qIGlzU3VibWl0dGluZyAqLyB0cnVlLCAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5kYXRhZGljdCA9IHt9O1xuXG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMuc3RhdGUuZGF0YSkuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZGF0YWRpY3RbZmllbGRdID0gdGhpcy5zdGF0ZS5kYXRhW2ZpZWxkXS52YWx1ZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKHRoaXMuaG9vayAmJiB0eXBlb2YgdGhpcy5ob29rLm9uU2F2ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvblBhc3MgPSB0aGlzLmhvb2sub25TYXZlKHRoaXMuZGF0YWRpY3QpO1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0aW9uUGFzcykge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdCgvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZXhlY3V0ZVZhbGlkYXRpb25TdWJtaXQgPSAoKSA9PiB7XG4gICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLnN0YXRlLmRhdGEpLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhZGljdFtmaWVsZF0gPSB0aGlzLnN0YXRlLmRhdGFbZmllbGRdLnZhbHVlO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIHZhbGlkYXRpb24gZm9yIHVuaXF1ZSBuYW1lXG4gICAgICAgICAgICBpZiAoW01PREVfQ1JFQVRFLCBNT0RFX0NMT05FXS5pbmNsdWRlcyh0aGlzLnByb3BzLm1vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNFeGlzdGluZ05hbWUgPSBCb29sZWFuKFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QudmFsdWVzKHRoaXMuY29udGV4dC5yb3dEYXRhKS5maW5kKCh2YWwpID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh2YWwpLmZpbmQoKG5hbWUpID0+IG5hbWUgPT09IHRoaXMuZGF0YWRpY3QubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoaXNFeGlzdGluZ05hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmVudGl0aWVzLmZpbmRJbmRleCgoZSkgPT4gZS5maWVsZCA9PT0gJ25hbWUnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvckZpZWxkTXNnKFxuICAgICAgICAgICAgICAgICAgICAgICAgJ25hbWUnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0Rm9ybWF0dGVkTWVzc2FnZSgyLCBbdGhpcy5lbnRpdGllc1tpbmRleF0ubGFiZWwsIHRoaXMuZGF0YWRpY3QubmFtZV0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdCgvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdmFsaWRhdGlvbiBjb25kaXRpb24gb2YgcmVxdWlyZWQgZmllbGRzIGluIE8tQXV0aFxuICAgICAgICAgICAgbGV0IHRlbUVudGl0aWVzO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNPQXV0aCkge1xuICAgICAgICAgICAgICAgIGxldCByZXFGaWVsZHMgPSBbXTtcbiAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmF1dGhNYXApLmZvckVhY2goKHR5cGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gYGlzQXV0aFZhbGAgaXMgcmVxdWlyZWQgaW4gYSBjYXNlIHdoZXJlIG9ubHkgc2luZ2xlIGF1dGggdHlwZSBpcyBwcm92aWRlZFxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gdGhpcy5kYXRhZGljdC5hdXRoX3R5cGUgfHwgIXRoaXMuaXNBdXRoVmFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXFGaWVsZHMgPSBbLi4ucmVxRmllbGRzLCAuLi50aGlzLmF1dGhNYXBbdHlwZV1dO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGVtRW50aXRpZXMgPSB0aGlzLmVudGl0aWVzLm1hcCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVxRmllbGRzLmluY2x1ZGVzKGUuZmllbGQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBbGwgb2F1dGggZmllbGRzIGFyZSByZXF1aXJlZCBleGNlcHQgaWYgZXhwbGljaXRlbHkgYHJlcXVpcmVkYCBpcyBzZXQgdG8gYGZhbHNlYFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcmVxdWlyZWQ6IHRydWUsIC4uLmUgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGVtRW50aXRpZXMgPSB0aGlzLmVudGl0aWVzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBWYWxpZGF0aW9uIG9mIGZvcm0gZmllbGRzIG9uIFN1Ym1pdFxuICAgICAgICAgICAgY29uc3QgdmFsaWRhdG9yID0gbmV3IFZhbGlkYXRvcih0ZW1FbnRpdGllcyk7XG4gICAgICAgICAgICBsZXQgZXJyb3IgPSB2YWxpZGF0b3IuZG9WYWxpZGF0aW9uKHRoaXMuZGF0YWRpY3QpO1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvckZpZWxkTXNnKGVycm9yLmVycm9yRmllbGQsIGVycm9yLmVycm9yTXNnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5zYXZlVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgPSBTYXZlVmFsaWRhdG9yKHRoaXMub3B0aW9ucy5zYXZlVmFsaWRhdG9yLCB0aGlzLmRhdGFkaWN0KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhlcnJvci5lcnJvck1zZyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLCAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMuaXNPQXV0aCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmlzU2luZ2xlT2F1dGggfHwgKHRoaXMuaXNBdXRoVmFsICYmIHRoaXMuZGF0YWRpY3QuYXV0aF90eXBlID09PSAnb2F1dGgnKSlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vIGhhbmRsZSBvYXV0aCBBdXRoZW50aWNhdGlvblxuICAgICAgICAgICAgICAgIC8vIFBvcHVsYXRlIHRoZSBwYXJhbWV0ZXIgc3RyaW5nIHdpdGggY2xpZW50X2lkLCByZWRpcmVjdF91cmwgYW5kIHJlc3BvbnNlX3R5cGVcbiAgICAgICAgICAgICAgICBsZXQgcGFyYW1ldGVycyA9IGA/cmVzcG9uc2VfdHlwZT1jb2RlJmNsaWVudF9pZD0ke3RoaXMuZGF0YWRpY3QuY2xpZW50X2lkfSZyZWRpcmVjdF91cmk9JHt0aGlzLmRhdGFkaWN0LnJlZGlyZWN0X3VybH1gO1xuICAgICAgICAgICAgICAgIC8vIEdldCB0aGUgdmFsdWUgZm9yIHN0YXRlX2VuYWJsZWRcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZUVuYWJsZWQgPSB0aGlzLmlzb2F1dGhTdGF0ZSAhPSBudWxsID8gdGhpcy5pc29hdXRoU3RhdGUgOiBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGVFbmFibGVkID09PSAndHJ1ZScgfHwgc3RhdGVFbmFibGVkID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdGVfZW5hYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdlbmVyYXRpbmcgYSBjcnlwdG9ncmFwaGljYWxseSBzdHJvbmcgc3RhdGUgcGFyYW1ldGVyLCB3aGljaCB3aWxsIGJlIHVzZWQgT05MWSBkdXJpbmcgY29uZmlndXJhdGlvblxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9hdXRoX3N0YXRlID0gdXVpZHY0KCkucmVwbGFjZSgvLS9nLCAnJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwZW5kaW5nIHRoZSBzdGF0ZSBpbiB0aGUgaGVhZGVyc1xuICAgICAgICAgICAgICAgICAgICBwYXJhbWV0ZXJzID0gYCR7cGFyYW1ldGVyc30mc3RhdGU9JHt0aGlzLm9hdXRoX3N0YXRlfWA7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaG9zdCA9IGBodHRwczovLyR7dGhpcy5kYXRhZGljdC5lbmRwb2ludH0ke3RoaXMub2F1dGhDb25mLmF1dGhDb2RlRW5kcG9pbnR9JHtwYXJhbWV0ZXJzfWA7XG4gICAgICAgICAgICAgICAgKGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbGxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Jlc3BvbnNlID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIC8vIEdldCBhdXRoX3R5cGUgZWxlbWVudCBmcm9tIGdsb2JhbCBjb25maWcganNvblxuXG4gICAgICAgICAgICAgICAgICAgIC8vIE9wZW4gYSBwb3B1cCB0byBtYWtlIGF1dGggcmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoaWxkV2luID0gd2luZG93Lm9wZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0LFxuICAgICAgICAgICAgICAgICAgICAgICAgYCR7dGhpcy5hcHBOYW1lfSBPQXV0aGAsXG4gICAgICAgICAgICAgICAgICAgICAgICBgd2lkdGg9JHt0aGlzLm9hdXRoQ29uZi5wb3B1cFdpZHRofSwgaGVpZ2h0PSR7dGhpcy5vYXV0aENvbmYucG9wdXBIZWlnaHR9YFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAvLyBDYWxsYmFjayB0byByZWNlaXZlIGRhdGEgZnJvbSByZWRpcmVjdCB1cmxcbiAgICAgICAgICAgICAgICAgICAgd2luZG93LmdldE1lc3NhZ2UgPSAobWVzc2FnZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0NhbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBPbiBDYWxsIGJhY2sgd2l0aCBBdXRoIGNvZGUgdGhpcyBtZXRob2Qgd2lsbCBiZSBjYWxsZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZU9hdXRoVG9rZW4obWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIC8vIFdhaXQgdGlsbCB3ZSBnZXQgYXV0aF9jb2RlIGZyb20gY2FsbGluZyBzaXRlIHRocm91Z2ggcmVkaXJlY3QgdXJsLCB3ZSB3aWxsIHdhaXQgZm9yIDMgbWluc1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLndhaXRGb3JBdXRoZW50aWNhdGlvbih0aGlzLm9hdXRoQ29uZi5hdXRoVGltZW91dCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ2FsbGVkICYmIHRoaXMuY2hpbGRXaW4uY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgZXJyb3IgbWVzc2FnZSBpZiB0aGUgdXNlciBoYXMgY2xvc2UgdGhlIGF1dGhlbnRpY2F0aW9uIHdpbmRvdyB3aXRob3V0IHRha2luZyBhbnkgYWN0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKEVSUk9SX0FVVEhfUFJPQ0VTU19URVJNSU5BVEVEX1RSWV9BR0FJTik7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNsb3NlRW50aXR5ICovIGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGltZW91dCBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKEVSUk9SX1JFUVVFU1RfVElNRU9VVF9UUllfQUdBSU4pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5oYW5kbGVGb3JtU3VibWl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGlzU3VibWl0dGluZyAqLyBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIFJlc2V0IGNhbGxlZCBmbGFnIGFzIHdlIGhhdmUgdG8gd2FpdCB0aWxsIHdlIGdldCB0aGUgYWNjZXNzX3Rva2VuLCByZWZyZXNoX3Rva2VuIGFuZCBpbnN0YW5jZV91cmxcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FpdCB0aWxsIHdlIGdldCB0aGUgcmVzcG9uc2UsIGhlcmUgd2UgaGF2ZSBhZGRlZCB3YWl0IGZvciAzMCBzZWNzXG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMud2FpdEZvckJhY2tlbmRSZXNwb25zZSgzMCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzUmVzcG9uc2UgJiYgIXRoaXMuaXNFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gU2V0IGVycm9yIG1lc3NhZ2UgdG8gcHJldmVudCBzYXZpbmcuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgdGltZW91dCBlcnJvciBtZXNzYWdlXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKEVSUk9SX1JFUVVFU1RfVElNRU9VVF9BQ0NFU1NfVE9LRU5fVFJZX0FHQUlOKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfSkoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2F2ZURhdGEoKTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogY2xvc2VFbnRpdHkgKi8gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlRGF0YSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLmhvb2sgJiZcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLmhvb2sub25TYXZlID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB0eXBlb2YgdGhpcy5vblNhdmVQcm9taXNlICE9PSAndW5kZWZpbmVkJ1xuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMub25TYXZlUHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICBleGVjdXRlVmFsaWRhdGlvblN1Ym1pdCgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBleGVjdXRlVmFsaWRhdGlvblN1Ym1pdCgpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHNhdmVEYXRhID0gKCkgPT4ge1xuICAgICAgICBjb25zdCBib2R5ID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICAgICAgICBPYmplY3Qua2V5cyh0aGlzLmRhdGFkaWN0KS5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGFkaWN0W2tleV0gIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGJvZHkuYXBwZW5kKGtleSwgdGhpcy5kYXRhZGljdFtrZXldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2xlYXIgb3V0IGZpZWxkcyBvZiBvdGhlciBhdXRoZW50aWNhdGlvbiBtZXRob2RzIHdoZW4gdXNpbmcgb25lXG4gICAgICAgIGlmICh0aGlzLmlzQXV0aFZhbCkge1xuICAgICAgICAgICAgT2JqZWN0LmtleXModGhpcy5hdXRoTWFwKS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YWRpY3QuYXV0aF90eXBlICE9PSB0eXBlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXV0aE1hcFt0eXBlXS5mb3JFYWNoKChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBib2R5LnNldChlLCAnJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuaXNPQXV0aCkge1xuICAgICAgICAgICAgLy8gUHJldmVudCBwYXNzaW5nIHJlZGlyZWN0X3VybCBmaWVsZCB1c2VkIGluIE9BdXRoIHRvIGJhY2tlbmQgY29uZiBmaWxlXG4gICAgICAgICAgICBib2R5LmRlbGV0ZSgncmVkaXJlY3RfdXJsJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSA9PT0gTU9ERV9FRElUKSB7XG4gICAgICAgICAgICBib2R5LmRlbGV0ZSgnbmFtZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgYXhpb3NDYWxsV3JhcHBlcih7XG4gICAgICAgICAgICBzZXJ2aWNlTmFtZTogdGhpcy5lbmRwb2ludCxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBjdXN0b21IZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICBoYW5kbGVFcnJvcjogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB2YWwgPSByZXNwb25zZT8uZGF0YT8uZW50cnlbMF07XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHJvcHMubW9kZSAhPT0gTU9ERV9DT05GSUcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdG1wT2JqID0ge307XG5cbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZhbC5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFERE9OLTM4NTgxOiBgZGF0YWRpY3RgIHByb3ZpZGVzIGZhbGxiYWNrIHZhbHVlcyBpZiByaCBza2lwc1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4udGhpcy5kYXRhZGljdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnZhbC5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHZhbC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHRoaXMucHJvcHMuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0LnNldFJvd0RhdGEoXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGUodGhpcy5jb250ZXh0LnJvd0RhdGEsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZV06IHsgJG1lcmdlOiB0bXBPYmogfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhvb2sgJiYgdHlwZW9mIHRoaXMuaG9vay5vblNhdmVTdWNjZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaG9vay5vblNhdmVTdWNjZXNzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IE1PREVfRURJVCkge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRvYXN0KGBVcGRhdGVkIFwiJHt2YWwubmFtZX1cImAsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IE1PREVfQ09ORklHKSB7XG4gICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QoXG4gICAgICAgICAgICAgICAgICAgICAgICBgVXBkYXRlZCBcIiR7dGhpcy5tb2RlX2NvbmZpZ190aXRsZSA/IHRoaXMubW9kZV9jb25maWdfdGl0bGUgOiB2YWwubmFtZX1cImAsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc3VjY2VzcydcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBnZW5lcmF0ZVRvYXN0KGBDcmVhdGVkIFwiJHt2YWwubmFtZX1cImAsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuaGFuZGxlRm9ybVN1Ym1pdCgvKiBpc1N1Ym1pdHRpbmcgKi8gZmFsc2UsIC8qIGNsb3NlRW50aXR5ICovIHRydWUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3JTdWJtaXRNc2cgPSBwYXJzZUVycm9yTXNnKGVycik7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGVycm9yTXNnOiBlcnJvclN1Ym1pdE1zZyB9KTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ob29rICYmIHR5cGVvZiB0aGlzLmhvb2sub25TYXZlRmFpbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sub25TYXZlRmFpbCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLmhhbmRsZUZvcm1TdWJtaXQoLyogaXNTdWJtaXR0aW5nICovIGZhbHNlLCAvKiBjbG9zZUVudGl0eSAqLyBmYWxzZSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgaGFuZGxlQ2hhbmdlID0gKGZpZWxkLCB0YXJnZXRWYWx1ZSkgPT4ge1xuICAgICAgICBjb25zdCBjaGFuZ2VzID0ge307XG4gICAgICAgIGlmIChmaWVsZCA9PT0gJ2F1dGhfdHlwZScpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHRoaXMuYXV0aE1hcCkuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSB0YXJnZXRWYWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmF1dGhNYXBbdHlwZV0uZm9yRWFjaCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hhbmdlc1tlXSA9IHsgZGlzcGxheTogeyAkc2V0OiB0cnVlIH0gfTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdXRoTWFwW3R5cGVdLmZvckVhY2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZXNbZV0gPSB7IGRpc3BsYXk6IHsgJHNldDogZmFsc2UgfSB9O1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRlcGVuZGVuY3lNYXAuaGFzKGZpZWxkKSkge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmRlcGVuZGVuY3lNYXAuZ2V0KGZpZWxkKTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHZhbHVlKS5mb3JFYWNoKChsb2FkRmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge307XG4gICAgICAgICAgICAgICAgbGV0IGxvYWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdmFsdWVbbG9hZEZpZWxkXS5mb3JFYWNoKChkZXBlbmRlbmN5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVpcmVkID0gISF0aGlzLmVudGl0aWVzLmZpbmQoKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmZpZWxkID09PSBkZXBlbmRlbmN5O1xuICAgICAgICAgICAgICAgICAgICB9KS5yZXF1aXJlZDtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50VmFsdWUgPVxuICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeSA9PT0gZmllbGQgPyB0YXJnZXRWYWx1ZSA6IHRoaXMuc3RhdGUuZGF0YVtkZXBlbmRlbmN5XS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVkICYmICFjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvYWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFbZGVwZW5kZW5jeV0gPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVtkZXBlbmRlbmN5XSA9IGN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgaWYgKGxvYWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhbmdlc1tsb2FkRmllbGRdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVwZW5kZW5jeVZhbHVlczogeyAkc2V0OiBkYXRhIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogeyAkc2V0OiBudWxsIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY2hhbmdlc1tmaWVsZF0gPSB7IHZhbHVlOiB7ICRzZXQ6IHRhcmdldFZhbHVlIH0gfTtcblxuICAgICAgICBjb25zdCBuZXdGaWVsZHMgPSB1cGRhdGUodGhpcy5zdGF0ZSwgeyBkYXRhOiBjaGFuZ2VzIH0pO1xuICAgICAgICBjb25zdCB0ZW1wU3RhdGUgPSB0aGlzLmNsZWFyQWxsRXJyb3JNc2cobmV3RmllbGRzKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh0ZW1wU3RhdGUpO1xuXG4gICAgICAgIGlmICh0aGlzLmhvb2tEZWZlcnJlZCkge1xuICAgICAgICAgICAgdGhpcy5ob29rRGVmZXJyZWQudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmhvb2sub25DaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rLm9uQ2hhbmdlKGZpZWxkLCB0YXJnZXRWYWx1ZSwgdGVtcFN0YXRlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBhZGRDdXN0b21WYWxpZGF0b3IgPSAoZmllbGQsIHZhbGlkYXRvckZ1bmMpID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLmVudGl0aWVzLmZpbmRJbmRleCgoeCkgPT4geC5maWVsZCA9PT0gZmllbGQpO1xuICAgICAgICBjb25zdCB2YWxpZGF0b3IgPSBbeyB0eXBlOiAnY3VzdG9tJywgdmFsaWRhdG9yRnVuYyB9XTtcbiAgICAgICAgdGhpcy5lbnRpdGllc1tpbmRleF0udmFsaWRhdG9ycyA9IHZhbGlkYXRvcjtcbiAgICB9O1xuXG4gICAgLy8gU2V0IGVycm9yIG1lc3NhZ2UgdG8gZGlzcGxheSBhbmQgc2V0IGVycm9yIGluIHBlcnRpY3VsYXIgZmllbGRcbiAgICBzZXRFcnJvckZpZWxkTXNnID0gKGZpZWxkLCBtc2cpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSgocHJldmlvdXNTdGF0ZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV3RmllbGRzID0gdXBkYXRlKHByZXZpb3VzU3RhdGUsIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7IFtmaWVsZF06IHsgZXJyb3I6IHsgJHNldDogdHJ1ZSB9IH0gfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgbmV3RmllbGRzLmVycm9yTXNnID0gbXNnO1xuICAgICAgICAgICAgcmV0dXJuIG5ld0ZpZWxkcztcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIFNldCBlcnJvciBpbiBwZXJ0aWN1bGFyIGZpZWxkXG4gICAgc2V0RXJyb3JGaWVsZCA9IChmaWVsZCkgPT4ge1xuICAgICAgICB0aGlzLnNldFN0YXRlKChwcmV2aW91c1N0YXRlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKHByZXZpb3VzU3RhdGUsIHsgZGF0YTogeyBbZmllbGRdOiB7IGVycm9yOiB7ICRzZXQ6IHRydWUgfSB9IH0gfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICAvLyBDbGVhciBlcnJvciBtZXNzYWdlXG4gICAgY2xlYXJFcnJvck1zZyA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXJyb3JNc2cpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoKHByZXZpb3VzU3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5wcmV2aW91c1N0YXRlLCBlcnJvck1zZzogJycgfTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8vIFNldCBlcnJvciBtZXNzYWdlXG4gICAgc2V0RXJyb3JNc2cgPSAobXNnKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoKHByZXZpb3VzU3RhdGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiB7IC4uLnByZXZpb3VzU3RhdGUsIGVycm9yTXNnOiBtc2cgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIC8vIENsZWFyIGVycm9yL3dhcm5pbmcgbWVzc2FnZSBhbmQgZXJyb3JzIGZyb20gZmllbGRzXG4gICAgY2xlYXJBbGxFcnJvck1zZyA9IChTdGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCBuZXdGaWVsZHMgPSBTdGF0ZSA/IHsgLi4uU3RhdGUgfSA6IHsgLi4udGhpcy5zdGF0ZSB9O1xuICAgICAgICBuZXdGaWVsZHMuZXJyb3JNc2cgPSAnJztcbiAgICAgICAgbmV3RmllbGRzLndhcm5pbmdNc2cgPSAnJztcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IFN0YXRlID8geyAuLi5TdGF0ZS5kYXRhIH0gOiB7IC4uLnRoaXMuc3RhdGUuZGF0YSB9O1xuICAgICAgICBjb25zdCB0ZW1EYXRhID0ge307XG4gICAgICAgIE9iamVjdC5rZXlzKG5ld0RhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgaWYgKG5ld0RhdGFba2V5XS5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRlbURhdGFba2V5XSA9IHsgLi4ubmV3RGF0YVtrZXldLCBlcnJvcjogZmFsc2UgfTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGVtRGF0YVtrZXldID0gbmV3RGF0YVtrZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgbmV3RmllbGRzLmRhdGEgPSB0ZW1EYXRhO1xuICAgICAgICByZXR1cm4gU3RhdGUgPyBuZXdGaWVsZHMgOiBudWxsO1xuICAgIH07XG5cbiAgICAvLyBEaXNwbGF5IGVycm9yIG1lc3NhZ2VcbiAgICBnZW5lcmF0ZUVycm9yTWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuZXJyb3JNc2cpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPE1lc3NhZ2UgYXBwZWFyYW5jZT1cImZpbGxcIiB0eXBlPVwiZXJyb3JcIj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JNc2d9XG4gICAgICAgICAgICAgICAgPC9NZXNzYWdlPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgZ2VuZXJhdGVXYXJuaW5nTWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUud2FybmluZ01zZykge1xuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8TWVzc2FnZSBhcHBlYXJhbmNlPVwiZmlsbFwiIHR5cGU9XCJ3YXJuaW5nXCI+XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLndhcm5pbmdNc2d9XG4gICAgICAgICAgICAgICAgPC9NZXNzYWdlPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLy8gZ2VuZXJhdGVzdWJtaXRNZXNzYWdlXG4gICAgbG9hZEhvb2sgPSAobW9kdWxlLCB0eXBlLCBnbG9iYWxDb25maWcpID0+IHtcbiAgICAgICAgY29uc3QgbXlQcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZXh0ZXJuYWwnKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0KC8qIHdlYnBhY2tJZ25vcmU6IHRydWUgKi8gYCR7Z2V0QnVpbGREaXJQYXRoKCl9L2N1c3RvbS8ke21vZHVsZX0uanNgKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAoZXh0ZXJuYWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEhvb2sgPSBleHRlcm5hbC5kZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rID0gbmV3IEhvb2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShIb29rKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fKFxuICAgICAgICAgICAgICAgICAgICBbYGFwcC8ke3RoaXMuYXBwTmFtZX0vanMvYnVpbGQvY3VzdG9tLyR7bW9kdWxlfWBdLFxuICAgICAgICAgICAgICAgICAgICAoSG9vaykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ob29rID0gbmV3IEhvb2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xvYmFsQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnByb3BzLm1vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlsXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShIb29rKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gbXlQcm9taXNlO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIEZ1bmN0aW9uIHRvIGdldCBhY2Nlc3MgdG9rZW4sIHJlZnJlc2ggdG9rZW4gYW5kIGluc3RhbmNlIHVybFxuICAgICAqIHVzaW5nIHJlc3QgY2FsbCBvbmNlIG9hdXRoIGNvZGUgcmVjZWl2ZWQgZnJvbSBjaGlsZCB3aW5kb3dcbiAgICAgKi9cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICBoYW5kbGVPYXV0aFRva2VuID0gKG1lc3NhZ2UpID0+IHtcbiAgICAgICAgLy8gQ2hlY2sgbWVzc2FnZSBmb3IgZXJyb3IuIElmIGVycm9yIHNob3cgZXJyb3IgbWVzc2FnZS5cbiAgICAgICAgaWYgKCFtZXNzYWdlIHx8IChtZXNzYWdlICYmIG1lc3NhZ2UuZXJyb3IpIHx8IG1lc3NhZ2UuY29kZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLnNldEVycm9yTXNnKEVSUk9SX09DQ1VSUkVEX1RSWV9BR0FJTik7XG4gICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5pc1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdGF0ZVJlc3BvbnNlID0gbWVzc2FnZS5zdGF0ZTtcblxuICAgICAgICBpZiAodGhpcy5zdGF0ZV9lbmFibGVkID09PSB0cnVlICYmIHRoaXMub2F1dGhfc3RhdGUgIT09IHN0YXRlUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2coRVJST1JfU1RBVEVfTUlTU0lOR19UUllfQUdBSU4pO1xuICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuaXNSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb2RlID0gZGVjb2RlVVJJQ29tcG9uZW50KG1lc3NhZ2UuY29kZSk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB7XG4gICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgIHVybDogYGh0dHBzOi8vJHt0aGlzLmRhdGFkaWN0LmVuZHBvaW50fSR7dGhpcy5vYXV0aENvbmYuYWNjZXNzVG9rZW5FbmRwb2ludH1gLFxuICAgICAgICAgICAgZ3JhbnRfdHlwZTogJ2F1dGhvcml6YXRpb25fY29kZScsXG4gICAgICAgICAgICBjbGllbnRfaWQ6IHRoaXMuZGF0YWRpY3QuY2xpZW50X2lkLFxuICAgICAgICAgICAgY2xpZW50X3NlY3JldDogdGhpcy5kYXRhZGljdC5jbGllbnRfc2VjcmV0LFxuICAgICAgICAgICAgY29kZSxcbiAgICAgICAgICAgIHJlZGlyZWN0X3VyaTogdGhpcy5kYXRhZGljdC5yZWRpcmVjdF91cmwsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgICAgT2JqZWN0LmtleXMoZGF0YSkuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICAgICAgICBib2R5LmFwcGVuZChrZXksIGRhdGFba2V5XSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbnN0IE9BdXRoRW5kcG9pbnQgPSBgJHt0aGlzLmFwcE5hbWV9X29hdXRoL29hdXRoYDtcbiAgICAgICAgLy8gSW50ZXJuYWwgaGFuZGxlciBjYWxsIHRvIGdldCB0aGUgYWNjZXNzIHRva2VuIGFuZCBvdGhlciB2YWx1ZXNcbiAgICAgICAgYXhpb3NDYWxsV3JhcHBlcih7XG4gICAgICAgICAgICBlbmRwb2ludFVybDogT0F1dGhFbmRwb2ludCxcbiAgICAgICAgICAgIGJvZHksXG4gICAgICAgICAgICBjdXN0b21IZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LFxuICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICBoYW5kbGVFcnJvcjogZmFsc2UsXG4gICAgICAgIH0pXG4gICAgICAgICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50LmVycm9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWNjZXNzVG9rZW4gPSByZXNwb25zZS5kYXRhLmVudHJ5WzBdLmNvbnRlbnQuYWNjZXNzX3Rva2VuO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbnN0YW5jZVVybCA9IHJlc3BvbnNlLmRhdGEuZW50cnlbMF0uY29udGVudC5pbnN0YW5jZV91cmw7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZnJlc2hUb2tlbiA9IHJlc3BvbnNlLmRhdGEuZW50cnlbMF0uY29udGVudC5yZWZyZXNoX3Rva2VuO1xuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YWRpY3QuaW5zdGFuY2VfdXJsID0gaW5zdGFuY2VVcmw7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YWRpY3QucmVmcmVzaF90b2tlbiA9IHJlZnJlc2hUb2tlbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhZGljdC5hY2Nlc3NfdG9rZW4gPSBhY2Nlc3NUb2tlbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RXJyb3JNc2cocmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50LmVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNSZXNwb25zZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZXRFcnJvck1zZyhFUlJPUl9PQ0NVUlJFRF9UUllfQUdBSU4pO1xuICAgICAgICAgICAgICAgIHRoaXMuaXNFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy5pc1Jlc3BvbnNlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgLy8gRnVuY3Rpb24gdG8gd2FpdCBmb3IgYXV0aGVudGljYXRpb24gY2FsbCBiYWNrIGluIGNoaWxkIHdpbmRvdy5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICB3YWl0Rm9yQXV0aGVudGljYXRpb24gPSBhc3luYyAoY291bnQpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGNvdW50IC09IDE7XG4gICAgICAgIC8vIENoZWNrIGlmIGNhbGxiYWNrIGZ1bmN0aW9uIGNhbGxlZCBpZiBjYWxsZWQgdGhlbiBleGl0IGZyb20gd2FpdFxuICAgICAgICBpZiAodGhpcy5pc0NhbGxlZCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgY2FsbGJhY2sgZnVuY3Rpb24gaXMgbm90IGNhbGxlZCBhbmQgY291bnQgaXMgbm90IHJlYWNoZWQgdG8gMTgwIHRoZW4gcmV0dXJuIGVycm9yIGZvciB0aW1lb3V0XG4gICAgICAgIGlmIChjb3VudCA9PT0gMCB8fCB0aGlzLmNoaWxkV2luLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5pc0Vycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyBlbHNlIGNhbGwgc2xlZXAgYW5kIHJlY2FsbCB0aGUgc2FtZSBmdW5jdGlvblxuICAgICAgICBhd2FpdCB0aGlzLnNsZWVwKHRoaXMud2FpdEZvckF1dGhlbnRpY2F0aW9uLCBjb3VudCk7XG4gICAgfTtcblxuICAgIC8vIEZ1bmN0aW9uIHRvIHdhaXQgZm9yIGJhY2tlbmQgY2FsbCBnZXQgcmVzcG9uc2UgZnJvbSBiYWNrZW5kXG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgY29uc2lzdGVudC1yZXR1cm5cbiAgICB3YWl0Rm9yQmFja2VuZFJlc3BvbnNlID0gYXN5bmMgKGNvdW50KSA9PiB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICBjb3VudCArPSAxO1xuICAgICAgICAvLyBDaGVjayBpZiBjYWxsYmFjayBmdW5jdGlvbiBjYWxsZWQgaWYgY2FsbGVkIHRoZW4gZXhpdCBmcm9tIHdhaXRcbiAgICAgICAgaWYgKHRoaXMuaXNSZXNwb25zZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgLy8gSWYgY2FsbGJhY2sgZnVuY3Rpb24gaXMgbm90IGNhbGxlZCBhbmQgY291bnQgaXMgbm90IHJlYWNoZWQgdG8gNjAgdGhlbiByZXR1cm4gZXJyb3IgZm9yIHRpbWVvdXRcbiAgICAgICAgaWYgKGNvdW50ID09PSA2MCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIGVsc2UgY2FsbCBzbGVlcCBhbmQgcmVjYWxsIHRoZSBzYW1lIGZ1bmN0aW9uXG4gICAgICAgIGF3YWl0IHRoaXMuc2xlZXAodGhpcy53YWl0Rm9yQmFja2VuZFJlc3BvbnNlLCBjb3VudCk7XG4gICAgfTtcblxuICAgIC8qXG4gICAgICogVGhpcyBmdW5jdGlvbiBmaXJzdCBhZGQgc2xlZXAgZm9yIDEgc2VjcyBhbmQgdGhlIGNhbGwgdGhlIGZ1bmN0aW9uIHBhc3NlZCBpbiBhcmd1bWVudFxuICAgICAqL1xuICAgIHNsZWVwID0gYXN5bmMgKGZuLCAuLi5hcmdzKSA9PiB7XG4gICAgICAgIGF3YWl0IHRoaXMudGltZW91dCgxMDAwKTtcbiAgICAgICAgcmV0dXJuIGZuKC4uLmFyZ3MpO1xuICAgIH07XG5cbiAgICAvKlxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCByZXNvbHZlIHRoZSBwcm9taXNlIG9uY2UgdGhlIHByb3ZpZGVkIHRpbWVvdXQgb2NjdXJzXG4gICAgICovXG4gICAgdGltZW91dCA9IChtcykgPT4ge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgbXMpKTtcbiAgICB9O1xuXG4gICAgcmVuZGVyR3JvdXBFbGVtZW50cyA9ICgpID0+IHtcbiAgICAgICAgbGV0IGVsID0gbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBzICYmIHRoaXMuZ3JvdXBzLmxlbmd0aCkge1xuICAgICAgICAgICAgZWwgPSB0aGlzLmdyb3Vwcy5tYXAoKGdyb3VwKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sbHBzaWJsZUVsZW1lbnQgPVxuICAgICAgICAgICAgICAgICAgICBncm91cC5maWVsZHM/Lmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICBncm91cC5maWVsZHMubWFwKChmaWVsZE5hbWUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVudGl0aWVzLm1hcCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmZpZWxkID09PSBmaWVsZE5hbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtU3RhdGUgPSB0aGlzLnN0YXRlLmRhdGFbZS5maWVsZF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q29udHJvbFdyYXBwZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e2UuZmllbGR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbGl0eUZ1bmN0cz17dGhpcy51dGlsQ29udHJvbFdyYXBwZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RlbVN0YXRlLnZhbHVlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk9e3RlbVN0YXRlLmRpc3BsYXl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I9e3RlbVN0YXRlLmVycm9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudGl0eT17ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17dGhpcy5wcm9wcy5zZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlPXt0aGlzLnByb3BzLm1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e3RlbVN0YXRlLmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtkb3duTWVzc2FnZT17dGVtU3RhdGUubWFya2Rvd25NZXNzYWdlfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lWYWx1ZXM9e3RlbVN0YXRlLmRlcGVuZGVuY3lWYWx1ZXMgfHwgbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdyb3VwLm9wdGlvbnMuaXNFeHBhbmRhYmxlID8gKFxuICAgICAgICAgICAgICAgICAgICA8Q29sbGFwc2libGVQYW5lbFdyYXBwZXIgdGl0bGU9e2dyb3VwLmxhYmVsfT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29sbGFwc2libGUtZWxlbWVudFwiPntjb2xscHNpYmxlRWxlbWVudH08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPC9Db2xsYXBzaWJsZVBhbmVsV3JhcHBlcj5cbiAgICAgICAgICAgICAgICApIDogKFxuICAgICAgICAgICAgICAgICAgICA8PlxuICAgICAgICAgICAgICAgICAgICAgICAgPEN1c3RvbUdyb3VwTGFiZWw+e2dyb3VwLmxhYmVsfTwvQ3VzdG9tR3JvdXBMYWJlbD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+e2NvbGxwc2libGVFbGVtZW50fTwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVsO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIC8vIG9uUmVuZGVyIG1ldGhvZCBvZiBIb29rXG4gICAgICAgIGlmICh0aGlzLmZsYWcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhvb2tEZWZlcnJlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaG9va0RlZmVycmVkLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRoaXMuaG9vay5vblJlbmRlciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sub25SZW5kZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnByb3BzLm1vZGUgPT09IE1PREVfRURJVCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhvb2tEZWZlcnJlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2tEZWZlcnJlZC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ob29rLm9uRWRpdExvYWQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhvb2sub25FZGl0TG9hZCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmZsYWcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICA8Zm9ybSBzdHlsZT17dGhpcy5wcm9wcy5tb2RlID09PSBNT0RFX0NPTkZJRyA/IHsgbWFyZ2luVG9wOiAnMjVweCcgfSA6IHt9fT5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2VuZXJhdGVXYXJuaW5nTWVzc2FnZSgpfVxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5nZW5lcmF0ZUVycm9yTWVzc2FnZSgpfVxuICAgICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJHcm91cEVsZW1lbnRzKCl9XG4gICAgICAgICAgICAgICAgICAgIHt0aGlzLmVudGl0aWVzLm1hcCgoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmV0dXJuIG51bGwgaWYgd2UgbmVlZCB0byBzaG93IGVsZW1lbnQgaW4gYSBncm91cFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuaXNHcm91cGluZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVtU3RhdGUgPSB0aGlzLnN0YXRlLmRhdGFbZS5maWVsZF07XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ZW1TdGF0ZS5wbGFjZWhvbGRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHsgLi4uZS5vcHRpb25zLCBwbGFjZWhvbGRlcjogdGVtU3RhdGUucGxhY2Vob2xkZXIgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBBZGQgJ29wdGlvbmFsJyBwbGFjZWhvbGRlciBmb3Igb3B0aW9uYWwgZmllbGRcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIE5vdGU6IGZvciBvYXV0aCBmaWVsZCBpdCBpcyBwb3NzaWJsZSByZXF1aXJlZCBpcyBmYWxzZSBidXQgdGhlIGZpZWxkIGlzIGFjdHVhbGx5IHJlcXVpcmVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBiYXNlZCBvbiB3aGF0IHR5cGUgb2YgYXV0aGVudGljYXRpb24gaXMgc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZS5yZXF1aXJlZCAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZSwgJ29hdXRoX2ZpZWxkJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhZS5vcHRpb25zPy5wbGFjZWhvbGRlclxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5vcHRpb25zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5lLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAnb3B0aW9uYWwnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPENvbnRyb2xXcmFwcGVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleT17ZS5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbGl0eUZ1bmN0cz17dGhpcy51dGlsQ29udHJvbFdyYXBwZXJ9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0ZW1TdGF0ZS52YWx1ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzcGxheT17dGVtU3RhdGUuZGlzcGxheX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I9e3RlbVN0YXRlLmVycm9yfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHk9e2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXt0aGlzLnByb3BzLnNlcnZpY2VOYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RlPXt0aGlzLnByb3BzLm1vZGV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0ZW1TdGF0ZS5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Rvd25NZXNzYWdlPXt0ZW1TdGF0ZS5tYXJrZG93bk1lc3NhZ2V9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGVuZGVuY3lWYWx1ZXM9e3RlbVN0YXRlLmRlcGVuZGVuY3lWYWx1ZXMgfHwgbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgPC9mb3JtPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5CYXNlRm9ybVZpZXcucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc3RhbnphTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjdXJyZW50U2VydmljZVN0YXRlOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIG1vZGU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFuZGxlRm9ybVN1Ym1pdDogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBCYXNlRm9ybVZpZXc7XG4iLCJleHBvcnQgY29uc3QgRVJST1JfUkVRVUVTVF9USU1FT1VUX1RSWV9BR0FJTiA9XG4gICAgJ1JlcXVlc3QgdGltZSBvdXQgd2hpbGUgYXV0aGVudGljYXRpbmcuIFBsZWFzZSB0cnkgYWdhaW4uJztcbmV4cG9ydCBjb25zdCBFUlJPUl9SRVFVRVNUX1RJTUVPVVRfQUNDRVNTX1RPS0VOX1RSWV9BR0FJTiA9XG4gICAgJ1JlcXVlc3QgdGltZSBvdXQgd2hpbGUgZ2V0dGluZyBhY2Nlc3N0b2tlbi4gUGxlYXNlIHRyeSBhZ2Fpbi4nO1xuZXhwb3J0IGNvbnN0IEVSUk9SX09DQ1VSUkVEX1RSWV9BR0FJTiA9XG4gICAgJ0Vycm9yIG9jY3VycmVkIHdoaWxlIHRyeWluZyB0byBhdXRoZW50aWNhdGUuIFBsZWFzZSB0cnkgQWdhaW4uJztcbmV4cG9ydCBjb25zdCBFUlJPUl9BVVRIX1BST0NFU1NfVEVSTUlOQVRFRF9UUllfQUdBSU4gPVxuICAgICdBdXRoZW50aWNhdGlvbiBwcm9jZXNzIGludGVycnVwdGVkLiBQbGVhc2UgdHJ5IGFnYWluLic7XG5leHBvcnQgY29uc3QgRVJST1JfU1RBVEVfTUlTU0lOR19UUllfQUdBSU4gPVxuICAgICdSZXNwb25zZSBub3QgcmVjZWl2ZWQgZnJvbSB0aGUgZXhwZWN0ZWQgc2VuZGVyLiBQbGVhc2UgdHJ5IGFnYWluLic7XG4iLCJleHBvcnQgY29uc3QgU1RZTEVfUEFHRSA9ICdwYWdlJztcbmV4cG9ydCBjb25zdCBTVFlMRV9NT0RBTCA9ICdtb2RhbCc7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuXG5pbXBvcnQgeyBnZXRVbmlmaWVkQ29uZmlncyB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBnZXRCdWlsZERpclBhdGggfSBmcm9tICcuLi8uLi91dGlsL3NjcmlwdCc7XG5cbmNsYXNzIEN1c3RvbVRhYmxlQ29udHJvbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgbG9hZGluZzogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSB0cnVlO1xuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICBjb25zdCBnbG9iYWxDb25maWcgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHsgbG9hZGluZzogdHJ1ZSB9KTtcbiAgICAgICAgdGhpcy5sb2FkQ3VzdG9tQ29udHJvbCgpLnRoZW4oKENvbnRyb2wpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tQ29udHJvbCA9IG5ldyBDb250cm9sKFxuICAgICAgICAgICAgICAgIGdsb2JhbENvbmZpZyxcbiAgICAgICAgICAgICAgICB0aGlzLnByb3BzLnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgIHRoaXMuZWwsXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5yb3csXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5maWVsZFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBsb2FkaW5nOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKG5leHRQcm9wcywgbmV4dFN0YXRlKSB7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnJvdyAhPT0gbmV4dFByb3BzLnJvdykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFuZXh0U3RhdGUubG9hZGluZyAmJiB0aGlzLnNob3VsZFJlbmRlcikge1xuICAgICAgICAgICAgdGhpcy5zaG91bGRSZW5kZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBsb2FkQ3VzdG9tQ29udHJvbCA9ICgpID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcm9wcy50eXBlID09PSAnZXh0ZXJuYWwnKSB7XG4gICAgICAgICAgICAgICAgaW1wb3J0KFxuICAgICAgICAgICAgICAgICAgICAvKiB3ZWJwYWNrSWdub3JlOiB0cnVlICovIGAke2dldEJ1aWxkRGlyUGF0aCgpfS9jdXN0b20vJHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvcHMuZmlsZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgfS5qc2BcbiAgICAgICAgICAgICAgICApLnRoZW4oKGV4dGVybmFsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IENvbnRyb2wgPSBleHRlcm5hbC5kZWZhdWx0O1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlKENvbnRyb2wpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBnbG9iYWxDb25maWcgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwcE5hbWUgPSBnbG9iYWxDb25maWcubWV0YS5uYW1lO1xuICAgICAgICAgICAgICAgIF9fbm9uX3dlYnBhY2tfcmVxdWlyZV9fKFxuICAgICAgICAgICAgICAgICAgICBbYGFwcC8ke2FwcE5hbWV9L2pzL2J1aWxkL2N1c3RvbS8ke3RoaXMucHJvcHMuZmlsZU5hbWV9YF0sXG4gICAgICAgICAgICAgICAgICAgIChDb250cm9sKSA9PiByZXNvbHZlKENvbnRyb2wpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJlbmRlcigpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLmxvYWRpbmcpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXN0b21Db250cm9sLnJlbmRlcih0aGlzLnByb3BzLnJvdywgdGhpcy5wcm9wcy5maWVsZCk7XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5sb2FkaW5nICYmIF8oJ0xvYWRpbmcuLi4nKX1cbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuIC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1uby1yZWZzLnJlYWN0LW5vLXJlZnNcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZj17KGVsKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbCA9IGVsO1xuICAgICAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlPXt7IHZpc2liaWxpdHk6IHRoaXMuc3RhdGUubG9hZGluZyA/ICdoaWRkZW4nIDogJ3Zpc2libGUnIH19XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG4gICAgfVxufVxuXG5DdXN0b21UYWJsZUNvbnRyb2wucHJvcFR5cGVzID0ge1xuICAgIHNlcnZpY2VOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgcm93OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgZmllbGQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZmlsZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcuaXNSZXF1aXJlZCxcbiAgICB0eXBlOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ3VzdG9tVGFibGVDb250cm9sO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBETCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL0RlZmluaXRpb25MaXN0JztcbmltcG9ydCBUYWJsZSBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1RhYmxlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IHsgXyB9IGZyb20gJ0BzcGx1bmsvdWktdXRpbHMvaTE4bic7XG5cbmltcG9ydCBDdXN0b21UYWJsZUNvbnRyb2wgZnJvbSAnLi9DdXN0b21UYWJsZUNvbnRyb2wnO1xuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5jb25zdCBUYWJsZUNlbGxXcmFwcGVyID0gc3R5bGVkKFRhYmxlLkNlbGwpYFxuICAgIGJvcmRlci10b3A6IG5vbmU7XG5gO1xuXG5mdW5jdGlvbiBnZXRFeHBhbnNpb25Sb3dEYXRhKHJvdywgbW9yZUluZm8pIHtcbiAgICBjb25zdCBEZWZpbml0aW9uTGlzdHMgPSBbXTtcblxuICAgIGlmIChtb3JlSW5mbz8ubGVuZ3RoKSB7XG4gICAgICAgIG1vcmVJbmZvLmZvckVhY2goKHZhbCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbGFiZWwgPSBfKHZhbC5sYWJlbCk7XG4gICAgICAgICAgICAvLyByZW1vdmUgZXh0cmEgcm93cyB3aGljaCBhcmUgZW1wdHkgaW4gbW9yZUluZm9cbiAgICAgICAgICAgIGlmICh2YWwuZmllbGQgaW4gcm93ICYmIHJvd1t2YWwuZmllbGRdICE9PSBudWxsICYmIHJvd1t2YWwuZmllbGRdICE9PSAnJykge1xuICAgICAgICAgICAgICAgIERlZmluaXRpb25MaXN0cy5wdXNoKDxETC5UZXJtIGtleT17dmFsLmZpZWxkfT57bGFiZWx9PC9ETC5UZXJtPik7XG4gICAgICAgICAgICAgICAgRGVmaW5pdGlvbkxpc3RzLnB1c2goXG4gICAgICAgICAgICAgICAgICAgIDxETC5EZXNjcmlwdGlvbiBrZXk9e2Ake3ZhbC5maWVsZH1fZGVjcmB9PlxuICAgICAgICAgICAgICAgICAgICAgICAge3ZhbC5tYXBwaW5nICYmIHZhbC5tYXBwaW5nW3Jvd1t2YWwuZmllbGRdXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdmFsLm1hcHBpbmdbcm93W3ZhbC5maWVsZF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBTdHJpbmcocm93W3ZhbC5maWVsZF0pfVxuICAgICAgICAgICAgICAgICAgICA8L0RMLkRlc2NyaXB0aW9uPlxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gRGVmaW5pdGlvbkxpc3RzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RXhwYW5zaW9uUm93KGNvbFNwYW4sIHJvdywgbW9yZUluZm8pIHtcbiAgICBjb25zdCB7IGN1c3RvbVJvdyB9ID0gZ2V0VW5pZmllZENvbmZpZ3MoKS5wYWdlcy5pbnB1dHMudGFibGU7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8VGFibGUuUm93IGtleT17YCR7cm93LmlkfS1leHBhbnNpb25gfT5cbiAgICAgICAgICAgIDxUYWJsZUNlbGxXcmFwcGVyIGNvbFNwYW49e2NvbFNwYW59PlxuICAgICAgICAgICAgICAgIHtjdXN0b21Sb3cgJiYgY3VzdG9tUm93LnNyYyA/IChcbiAgICAgICAgICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtSZWFjdC5jcmVhdGVFbGVtZW50KEN1c3RvbVRhYmxlQ29udHJvbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiByb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVOYW1lOiBjdXN0b21Sb3cuc3JjLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IGN1c3RvbVJvdy50eXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSl9XG4gICAgICAgICAgICAgICAgICAgIDwvPlxuICAgICAgICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICAgICAgICAgIDxETCB0ZXJtV2lkdGg9ezI1MH0+e2dldEV4cGFuc2lvblJvd0RhdGEocm93LCBtb3JlSW5mbyl9PC9ETD5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9UYWJsZUNlbGxXcmFwcGVyPlxuICAgICAgICA8L1RhYmxlLlJvdz5cbiAgICApO1xufVxuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IFdhaXRTcGlubmVyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvV2FpdFNwaW5uZXInO1xuaW1wb3J0IFN3aXRjaCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1N3aXRjaCc7XG5pbXBvcnQgVGFibGUgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9UYWJsZSc7XG5pbXBvcnQgQnV0dG9uR3JvdXAgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b25Hcm91cCc7XG5pbXBvcnQgVG9vbHRpcCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1Rvb2x0aXAnO1xuaW1wb3J0IFBlbmNpbCBmcm9tICdAc3BsdW5rL3JlYWN0LWljb25zL1BlbmNpbCc7XG5pbXBvcnQgQ2xvbmUgZnJvbSAnQHNwbHVuay9yZWFjdC1pY29ucy9DbG9uZSc7XG5pbXBvcnQgVHJhc2ggZnJvbSAnQHNwbHVuay9yZWFjdC1pY29ucy9UcmFzaCc7XG5pbXBvcnQgc3R5bGVkIGZyb20gJ3N0eWxlZC1jb21wb25lbnRzJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuXG5pbXBvcnQgQ3VzdG9tVGFibGVDb250cm9sIGZyb20gJy4vQ3VzdG9tVGFibGVDb250cm9sJztcbmltcG9ydCB7IEFjdGlvbkJ1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vQ3VzdG9tVGFibGVTdHlsZSc7XG5cbmNvbnN0IFRhYmxlQ2VsbFdyYXBwZXIgPSBzdHlsZWQoVGFibGUuQ2VsbClgXG4gICAgcGFkZGluZzogMnB4O1xuYDtcblxuY29uc3QgU3dpdGNoV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcblxuICAgIC50b2dnbGVfc3dpdGNoIHtcbiAgICAgICAgcGFkZGluZzogMDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIH1cbmA7XG5cbmZ1bmN0aW9uIEN1c3RvbVRhYmxlUm93KHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICByb3csXG4gICAgICAgIGNvbHVtbnMsXG4gICAgICAgIGhlYWRlck1hcHBpbmcsXG4gICAgICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrLFxuICAgICAgICBoYW5kbGVFZGl0QWN0aW9uQ2xpY2ssXG4gICAgICAgIGhhbmRsZUNsb25lQWN0aW9uQ2xpY2ssXG4gICAgICAgIGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrLFxuICAgIH0gPSBwcm9wcztcblxuICAgIGNvbnN0IGdldEN1c3RvbUNlbGwgPSAoY3VzdG9tUm93LCBoZWFkZXIpID0+IHtcbiAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoQ3VzdG9tVGFibGVDb250cm9sLCB7XG4gICAgICAgICAgICBzZXJ2aWNlTmFtZTogcm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgZmllbGQ6IGhlYWRlci5maWVsZCxcbiAgICAgICAgICAgIHJvdzogY3VzdG9tUm93LFxuICAgICAgICAgICAgZmlsZU5hbWU6IGhlYWRlci5jdXN0b21DZWxsLnNyYyxcbiAgICAgICAgICAgIHR5cGU6IGhlYWRlci5jdXN0b21DZWxsLnR5cGUsXG4gICAgICAgIH0pO1xuICAgIH07XG5cbiAgICBjb25zdCByb3dBY3Rpb25zUHJpbWFyeUJ1dHRvbiA9IHVzZUNhbGxiYWNrKFxuICAgICAgICAoc2VsZWN0ZWRSb3cpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPFRhYmxlQ2VsbFdyYXBwZXIgZGF0YS1jb2x1bW49XCJhY3Rpb25zXCIga2V5PXtzZWxlY3RlZFJvdy5pZH0+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25Hcm91cD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxUb29sdGlwIGNvbnRlbnQ9e18oJ0VkaXQnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbkNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZmxhdFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb249ezxQZW5jaWwgc2NyZWVuUmVhZGVyVGV4dD17bnVsbH0gc2l6ZT17MX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZUVkaXRBY3Rpb25DbGljayhzZWxlY3RlZFJvdyl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImVkaXRCdG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtfKCdDbG9uZScpfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8QWN0aW9uQnV0dG9uQ29tcG9uZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJmbGF0XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbj17PENsb25lIHNjcmVlblJlYWRlclRleHQ9e251bGx9IHNpemU9ezF9IC8+fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVDbG9uZUFjdGlvbkNsaWNrKHNlbGVjdGVkUm93KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY2xvbmVCdG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1Rvb2x0aXA+XG4gICAgICAgICAgICAgICAgICAgICAgICA8VG9vbHRpcCBjb250ZW50PXtfKCdEZWxldGUnKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPEFjdGlvbkJ1dHRvbkNvbXBvbmVudFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwiZGVzdHJ1Y3RpdmVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uPXs8VHJhc2ggc2NyZWVuUmVhZGVyVGV4dD17bnVsbH0gc2l6ZT17MX0gLz59XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2xpY2s9eygpID0+IGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrKHNlbGVjdGVkUm93KX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZGVsZXRlQnRuXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9Ub29sdGlwPlxuICAgICAgICAgICAgICAgICAgICA8L0J1dHRvbkdyb3VwPlxuICAgICAgICAgICAgICAgIDwvVGFibGVDZWxsV3JhcHBlcj5cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgICAgIFtoYW5kbGVFZGl0QWN0aW9uQ2xpY2ssIGhhbmRsZUNsb25lQWN0aW9uQ2xpY2ssIGhhbmRsZURlbGV0ZUFjdGlvbkNsaWNrXVxuICAgICk7XG5cbiAgICBsZXQgc3RhdHVzQ29udGVudCA9ICdFbmFibGVkJztcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZXJzY29yZS1kYW5nbGVcbiAgICBpZiAocm93Ll9fdG9nZ2xlU2hvd1NwaW5uZXIpIHtcbiAgICAgICAgc3RhdHVzQ29udGVudCA9IDxXYWl0U3Bpbm5lciAvPjtcbiAgICB9IGVsc2UgaWYgKHJvdy5kaXNhYmxlZCkge1xuICAgICAgICBzdGF0dXNDb250ZW50ID1cbiAgICAgICAgICAgIGhlYWRlck1hcHBpbmc/LmRpc2FibGVkICYmIGhlYWRlck1hcHBpbmcuZGlzYWJsZWRbcm93LmRpc2FibGVkXVxuICAgICAgICAgICAgICAgID8gaGVhZGVyTWFwcGluZy5kaXNhYmxlZFtyb3cuZGlzYWJsZWRdXG4gICAgICAgICAgICAgICAgOiAnRGlzYWJsZWQnO1xuICAgIH1cblxuICAgIC8vIEZpeCBzZXQgb2YgcHJvcHMgYXJlIHBhc3NlZCB0byBUYWJsZS5Sb3cgZWxlbWVudFxuICAgIHJldHVybiAoXG4gICAgICAgIDw+XG4gICAgICAgICAgICA8VGFibGUuUm93IC8vIG5vc2VtZ3JlcDogdHlwZXNjcmlwdC5yZWFjdC5zZWN1cml0eS5hdWRpdC5yZWFjdC1wcm9wcy1pbmplY3Rpb24ucmVhY3QtcHJvcHMtaW5qZWN0aW9uLCB0eXBlc2NyaXB0LnJlYWN0LmJlc3QtcHJhY3RpY2UucmVhY3QtcHJvcHMtc3ByZWFkaW5nLnJlYWN0LXByb3BzLXNwcmVhZGluZ1xuICAgICAgICAgICAgICAgIGtleT17cm93LmlkfVxuICAgICAgICAgICAgICAgIHsuLi5wcm9wc31cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7Y29sdW1ucyAmJlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLm1hcCgoaGVhZGVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY2VsbEhUTUwgPSAnJztcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhlYWRlci5jdXN0b21DZWxsICYmIGhlYWRlci5jdXN0b21DZWxsLnNyYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxIVE1MID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuQ2VsbCBkYXRhLWNvbHVtbj17aGVhZGVyLmZpZWxkfSBrZXk9e2hlYWRlci5maWVsZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7Z2V0Q3VzdG9tQ2VsbChyb3csIGhlYWRlcil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvVGFibGUuQ2VsbD5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChoZWFkZXIuZmllbGQgPT09ICdkaXNhYmxlZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSFRNTCA9IChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlLkNlbGwgZGF0YS1jb2x1bW49e2hlYWRlci5maWVsZH0ga2V5PXtoZWFkZXIuZmllbGR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFN3aXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Jvdy5uYW1lfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cm93LmRpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBoYW5kbGVUb2dnbGVBY3Rpb25DbGljayhyb3cpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZD17IXJvdy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVyc2NvcmUtZGFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtyb3cuX190b2dnbGVTaG93U3Bpbm5lcn1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInRvZ2dsZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cInRvZ2dsZV9zd2l0Y2hcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZExhYmVsPXtfKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTWFwcGluZz8uZGlzYWJsZWQ/LmZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBoZWFkZXJNYXBwaW5nLmRpc2FibGVkLmZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnRW5hYmxlZCdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5zZWxlY3RlZExhYmVsPXtfKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTWFwcGluZz8uZGlzYWJsZWQ/LnRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGhlYWRlck1hcHBpbmcuZGlzYWJsZWQudHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJ0Rpc2FibGVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gZGF0YS10ZXN0PVwic3RhdHVzXCI+e3N0YXR1c0NvbnRlbnR9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9Td2l0Y2hXcmFwcGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlLkNlbGw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaGVhZGVyLmZpZWxkID09PSAnYWN0aW9ucycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxsSFRNTCA9IHJvd0FjdGlvbnNQcmltYXJ5QnV0dG9uKHJvdyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNlbGxIVE1MID0gKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8VGFibGUuQ2VsbCBkYXRhLWNvbHVtbj17aGVhZGVyLmZpZWxkfSBrZXk9e2hlYWRlci5maWVsZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aGVhZGVyTWFwcGluZ1toZWFkZXIuZmllbGRdICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyTWFwcGluZ1toZWFkZXIuZmllbGRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvd1toZWFkZXIuZmllbGRdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBoZWFkZXJNYXBwaW5nW2hlYWRlci5maWVsZF1bcm93W2hlYWRlci5maWVsZF1dXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiByb3dbaGVhZGVyLmZpZWxkXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9UYWJsZS5DZWxsPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2VsbEhUTUw7XG4gICAgICAgICAgICAgICAgICAgIH0pfVxuICAgICAgICAgICAgPC9UYWJsZS5Sb3c+XG4gICAgICAgIDwvPlxuICAgICk7XG59XG5cbkN1c3RvbVRhYmxlUm93LnByb3BUeXBlcyA9IHtcbiAgICByb3c6IFByb3BUeXBlcy5hbnksXG4gICAgY29sdW1uczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGhlYWRlck1hcHBpbmc6IFByb3BUeXBlcy5vYmplY3QsXG4gICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZUVkaXRBY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlQ2xvbmVBY3Rpb25DbGljazogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhDdXN0b21UYWJsZVJvdyk7XG4iLCJpbXBvcnQgUmVhY3QsIHsgQ29tcG9uZW50IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBCdXR0b24gZnJvbSAnQHNwbHVuay9yZWFjdC11aS9CdXR0b24nO1xuaW1wb3J0IE1vZGFsIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvTW9kYWwnO1xuaW1wb3J0IE1lc3NhZ2UgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9NZXNzYWdlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnO1xuaW1wb3J0IFdhaXRTcGlubmVyIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvV2FpdFNwaW5uZXInO1xuaW1wb3J0IHVwZGF0ZSBmcm9tICdpbW11dGFiaWxpdHktaGVscGVyJztcbmltcG9ydCB7IF8gfSBmcm9tICdAc3BsdW5rL3VpLXV0aWxzL2kxOG4nO1xuaW1wb3J0IHsgZ2VuZXJhdGVUb2FzdCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBwYXJzZUVycm9yTXNnLCBnZXRGb3JtYXR0ZWRNZXNzYWdlIH0gZnJvbSAnLi4vdXRpbC9tZXNzYWdlVXRpbCc7XG5pbXBvcnQgeyBQQUdFX0lOUFVUIH0gZnJvbSAnLi4vY29uc3RhbnRzL3BhZ2VzJztcblxuY29uc3QgTW9kYWxXcmFwcGVyID0gc3R5bGVkKE1vZGFsKWBcbiAgICB3aWR0aDogODAwcHg7XG5gO1xuXG5jbGFzcyBEZWxldGVNb2RhbCBleHRlbmRzIENvbXBvbmVudCB7XG4gICAgc3RhdGljIGNvbnRleHRUeXBlID0gVGFibGVDb250ZXh0O1xuXG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0geyBpc0RlbGV0aW5nOiBmYWxzZSwgRXJyb3JNc2c6ICcnIH07XG4gICAgfVxuXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlID0gKCkgPT4ge1xuICAgICAgICAvLyBzZXQgRXJyb3JNc2cgdG8gZW1wdHkgc3RyaW5nIG9uIGNsb3NlIG9yIGNhbmNlbFxuICAgICAgICAvLyBzbyB0aGF0IG9uIGFnYWluIG9wZW4gb2YgbW9kYWwgaXQgZG9lcyBub3Qgc2hvdyB0aGUgc2FtZSBFcnJvck1zZ1xuICAgICAgICB0aGlzLnN0YXRlLkVycm9yTXNnID0gJyc7XG4gICAgICAgIHRoaXMucHJvcHMuaGFuZGxlUmVxdWVzdENsb3NlKCk7XG4gICAgfTtcblxuICAgIGhhbmRsZURlbGV0ZSA9ICgpID0+IHtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZShcbiAgICAgICAgICAgIChwcmV2U3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5wcmV2U3RhdGUsIGlzRGVsZXRpbmc6IHRydWUsIEVycm9yTXNnOiAnJyB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICBheGlvc0NhbGxXcmFwcGVyKHtcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IGAke3RoaXMucHJvcHMuc2VydmljZU5hbWV9LyR7ZW5jb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9wcy5zdGFuemFOYW1lXG4gICAgICAgICAgICAgICAgICAgICl9YCxcbiAgICAgICAgICAgICAgICAgICAgY3VzdG9tSGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcgfSxcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgaGFuZGxlRXJyb3I6IGZhbHNlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvclN1Ym1pdE1zZyA9IHBhcnNlRXJyb3JNc2coZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoeyBFcnJvck1zZzogZXJyb3JTdWJtaXRNc2csIGlzRGVsZXRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dC5zZXRSb3dEYXRhKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZSh0aGlzLmNvbnRleHQucm93RGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGhpcy5wcm9wcy5zZXJ2aWNlTmFtZV06IHsgJHVuc2V0OiBbdGhpcy5wcm9wcy5zdGFuemFOYW1lXSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGlzRGVsZXRpbmc6IGZhbHNlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QoYERlbGV0ZWQgXCIke3RoaXMucHJvcHMuc3RhbnphTmFtZX1cImAsICdzdWNjZXNzJyk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgIH07XG5cbiAgICAvLyBEaXNwbGF5IGVycm9yIG1lc3NhZ2VcbiAgICBnZW5lcmF0ZUVycm9yTWVzc2FnZSA9ICgpID0+IHtcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuRXJyb3JNc2cpIHtcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgPE1lc3NhZ2UgYXBwZWFyYW5jZT1cImZpbGxcIiB0eXBlPVwiZXJyb3JcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLkVycm9yTXNnfVxuICAgICAgICAgICAgICAgICAgICA8L01lc3NhZ2U+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIGxldCBkZWxldGVNc2c7XG4gICAgICAgIGlmICh0aGlzLnByb3BzLnBhZ2UgPT09IFBBR0VfSU5QVVQpIHtcbiAgICAgICAgICAgIGRlbGV0ZU1zZyA9IGdldEZvcm1hdHRlZE1lc3NhZ2UoMTAzLCBbdGhpcy5wcm9wcy5zdGFuemFOYW1lXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGVNc2cgPSBnZXRGb3JtYXR0ZWRNZXNzYWdlKDEwMiwgW3RoaXMucHJvcHMuc3RhbnphTmFtZV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8TW9kYWxXcmFwcGVyIG9wZW49e3RoaXMucHJvcHMub3Blbn0+XG4gICAgICAgICAgICAgICAgPE1vZGFsLkhlYWRlclxuICAgICAgICAgICAgICAgICAgICB0aXRsZT17Z2V0Rm9ybWF0dGVkTWVzc2FnZSgxMDEpfVxuICAgICAgICAgICAgICAgICAgICBvblJlcXVlc3RDbG9zZT17dGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2V9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICA8TW9kYWwuQm9keSBjbGFzc05hbWU9XCJkZWxldGVQcm9tcHRcIj5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMuZ2VuZXJhdGVFcnJvck1lc3NhZ2UoKX1cbiAgICAgICAgICAgICAgICAgICAgPHA+e2RlbGV0ZU1zZ308L3A+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Cb2R5PlxuICAgICAgICAgICAgICAgIDxNb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJzZWNvbmRhcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVSZXF1ZXN0Q2xvc2V9XG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17XygnQ2FuY2VsJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5pc0RlbGV0aW5nfVxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgICA8QnV0dG9uXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBlYXJhbmNlPVwicHJpbWFyeVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbD17dGhpcy5zdGF0ZS5pc0RlbGV0aW5nID8gPFdhaXRTcGlubmVyIC8+IDogXygnRGVsZXRlJyl9XG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrPXt0aGlzLmhhbmRsZURlbGV0ZX1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXt0aGlzLnN0YXRlLmlzRGVsZXRpbmd9XG4gICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9Nb2RhbC5Gb290ZXI+XG4gICAgICAgICAgICA8L01vZGFsV3JhcHBlcj5cbiAgICAgICAgKTtcbiAgICB9XG59XG5cbkRlbGV0ZU1vZGFsLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgb3BlbjogUHJvcFR5cGVzLmJvb2wsXG4gICAgaGFuZGxlUmVxdWVzdENsb3NlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZXJ2aWNlTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBzdGFuemFOYW1lOiBQcm9wVHlwZXMuc3RyaW5nLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgRGVsZXRlTW9kYWw7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCwgbWVtbywgdXNlU3RhdGUsIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5pbXBvcnQgVGFibGUgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9UYWJsZSc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IHVzZVF1ZXJ5IGZyb20gJy4uLy4uL2hvb2tzL3VzZVF1ZXJ5JztcbmltcG9ydCB7IE1PREVfQ0xPTkUsIE1PREVfRURJVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9tb2Rlcyc7XG5pbXBvcnQgeyBQQUdFX0lOUFVUIH0gZnJvbSAnLi4vLi4vY29uc3RhbnRzL3BhZ2VzJztcbmltcG9ydCB7IGdldFVuaWZpZWRDb25maWdzIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IGdldEV4cGFuc2lvblJvdyB9IGZyb20gJy4vVGFibGVFeHBhbnNpb25Sb3cnO1xuaW1wb3J0IHsgU1RZTEVfTU9EQUwsIFNUWUxFX1BBR0UgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvZGlhbG9nU3R5bGVzJztcbmltcG9ydCBDdXN0b21UYWJsZVJvdyBmcm9tICcuL0N1c3RvbVRhYmxlUm93JztcbmltcG9ydCBFbnRpdHlNb2RhbCBmcm9tICcuLi9FbnRpdHlNb2RhbCc7XG5pbXBvcnQgRGVsZXRlTW9kYWwgZnJvbSAnLi4vRGVsZXRlTW9kYWwnO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBOb1JlY29yZHNEaXYgfSBmcm9tICcuL0N1c3RvbVRhYmxlU3R5bGUnO1xuXG5mdW5jdGlvbiBDdXN0b21UYWJsZSh7XG4gICAgcGFnZSxcbiAgICBzZXJ2aWNlTmFtZSxcbiAgICBkYXRhLFxuICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrLFxuICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2csXG4gICAgaGFuZGxlU29ydCxcbiAgICBzb3J0RGlyLFxuICAgIHNvcnRLZXksXG59KSB7XG4gICAgY29uc3QgdW5pZmllZENvbmZpZ3MgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgIGNvbnN0IFtlbnRpdHlNb2RhbCwgc2V0RW50aXR5TW9kYWxdID0gdXNlU3RhdGUoeyBvcGVuOiBmYWxzZSB9KTtcbiAgICBjb25zdCBbZGVsZXRlTW9kYWwsIHNldERlbGV0ZU1vZGFsXSA9IHVzZVN0YXRlKHsgb3BlbjogZmFsc2UgfSk7XG5cbiAgICBjb25zdCB7IHJvd0RhdGEgfSA9IHVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcblxuICAgIGNvbnN0IHRhYmxlQ29uZmlnID1cbiAgICAgICAgcGFnZSA9PT0gUEFHRV9JTlBVVFxuICAgICAgICAgICAgPyB1bmlmaWVkQ29uZmlncy5wYWdlcy5pbnB1dHMudGFibGVcbiAgICAgICAgICAgIDogdW5pZmllZENvbmZpZ3MucGFnZXMuY29uZmlndXJhdGlvbi50YWJzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBzZXJ2aWNlTmFtZSlbMF1cbiAgICAgICAgICAgICAgICAgIC50YWJsZTtcbiAgICBjb25zdCB7IG1vcmVJbmZvLCBoZWFkZXIgfSA9IHRhYmxlQ29uZmlnO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB0YWJsZUNvbmZpZy5oZWFkZXI7XG5cbiAgICBjb25zdCBoZWFkZXJNYXBwaW5nID0ge307XG4gICAgaGVhZGVyLmZvckVhY2goKHgpID0+IHtcbiAgICAgICAgaGVhZGVyTWFwcGluZ1t4LmZpZWxkXSA9IHgubWFwcGluZztcbiAgICB9KTtcblxuICAgIGNvbnN0IHNlcnZpY2VUb1N0eWxlTWFwID0ge307XG4gICAgaWYgKHBhZ2UgPT09IFBBR0VfSU5QVVQpIHtcbiAgICAgICAgdW5pZmllZENvbmZpZ3MucGFnZXMuaW5wdXRzLnNlcnZpY2VzLmZvckVhY2goKHgpID0+IHtcbiAgICAgICAgICAgIHNlcnZpY2VUb1N0eWxlTWFwW3gubmFtZV0gPSB4LnN0eWxlID09PSBTVFlMRV9QQUdFID8gU1RZTEVfUEFHRSA6IFNUWUxFX01PREFMO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBxdWVyeSA9IHVzZVF1ZXJ5KCk7XG5cbiAgICAvLyBSdW4gb25seSBvbmNlIHdoZW4gY29tcG9uZW50IGlzIG1vdW50ZWQgdG8gbG9hZCBjb21wb25lbnQgYmFzZWQgb24gaW5pdGlhbCBxdWVyeSBwYXJhbXNcbiAgICAvLyBhbmQgd2hlbiBxdWVyeSBwYXJhbXMgYXJlIHVwZGF0ZWRcbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICAvLyBPbmx5IHJ1biB3aGVuIHRhYiBtYXRjaGVzIHNlcnZpY2VOYW1lIG9yIGlmIGluIGlucHV0IHBhZ2Ugd2hlcmUgc2VydmljZU5hbWUgaXMgdW5kZWZpbmVkXG4gICAgICAgIGlmIChxdWVyeSAmJiAocXVlcnkuZ2V0KCd0YWInKSA9PT0gc2VydmljZU5hbWUgfHwgdHlwZW9mIHNlcnZpY2VOYW1lID09PSAndW5kZWZpbmVkJykpIHtcbiAgICAgICAgICAgIC8vIE9wZW4gbW9kYWwgd2hlbiByZWNvcmQgaXMgYXZhaWxhYmxlIGluIHF1ZXJ5IHBhcmFtcyBhbmQgbW9kYWwgaXMgbm90IG9wZW5cbiAgICAgICAgICAgIGlmIChxdWVyeS5nZXQoJ3JlY29yZCcpICYmICFlbnRpdHlNb2RhbC5vcGVuKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VydmljZUtleSA9IE9iamVjdC5rZXlzKHJvd0RhdGEpLmZpbmQoXG4gICAgICAgICAgICAgICAgICAgICh4KSA9PiB0eXBlb2Ygcm93RGF0YVt4XVtxdWVyeS5nZXQoJ3JlY29yZCcpXSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmIChzZXJ2aWNlS2V5KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvdyA9IHJvd0RhdGFbc2VydmljZUtleV1bcXVlcnkuZ2V0KCdyZWNvcmQnKV07XG4gICAgICAgICAgICAgICAgICAgIHNldEVudGl0eU1vZGFsKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmVudGl0eU1vZGFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiByb3cuc2VydmljZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiByb3cubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGU6IE1PREVfRURJVCxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICghcXVlcnkuZ2V0KCdyZWNvcmQnKSAmJiBlbnRpdHlNb2RhbC5vcGVuKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xvc2UgbW9kYWwgaWYgcmVjb3JkIHF1ZXJ5IHBhcmFtIGlzIG5vdCBhdmFpbGFibGUgYW5kIG1vZGFsIGlzIG9wZW5cbiAgICAgICAgICAgICAgICAvLyBOT1RFOiBUaGlzIHNob3VsZCBvbmx5IGJlIGV4ZWN1dGVkIGluIGNhc2Ugb2YgTU9ERV9FRElUIHdoaWNoIGlzIGhhbmRsZWQgYnlcbiAgICAgICAgICAgICAgICAvLyB1c2VFZmZlY3QgZGVwZW5kZW5jeSB3aGljaCB3aWxsIG9ubHkgYmUgY2hhbmdlZCBpbiBjYXNlIG9mIGVkaXRpbmcgZW50aXR5XG4gICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoeyAuLi5lbnRpdHlNb2RhbCwgb3BlbjogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtdKTtcblxuICAgIGNvbnN0IGhhbmRsZUVudGl0eUNsb3NlID0gKCkgPT4ge1xuICAgICAgICBzZXRFbnRpdHlNb2RhbCh7IC4uLmVudGl0eU1vZGFsLCBvcGVuOiBmYWxzZSB9KTtcbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRWRpdEFjdGlvbkNsaWNrID0gdXNlQ2FsbGJhY2soXG4gICAgICAgIChzZWxlY3RlZFJvdykgPT4ge1xuICAgICAgICAgICAgaWYgKHNlcnZpY2VUb1N0eWxlTWFwW3NlbGVjdGVkUm93LnNlcnZpY2VOYW1lXSA9PT0gJ3BhZ2UnKSB7XG4gICAgICAgICAgICAgICAgaGFuZGxlT3BlblBhZ2VTdHlsZURpYWxvZyhzZWxlY3RlZFJvdywgTU9ERV9FRElUKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAuLi5lbnRpdHlNb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlbGVjdGVkUm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiBzZWxlY3RlZFJvdy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBNT0RFX0VESVQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgICAgICAgW2VudGl0eU1vZGFsXVxuICAgICk7XG5cbiAgICBjb25zdCBoYW5kbGVEZWxldGVDbG9zZSA9ICgpID0+IHtcbiAgICAgICAgc2V0RGVsZXRlTW9kYWwoeyAuLi5kZWxldGVNb2RhbCwgb3BlbjogZmFsc2UgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZUNsb25lQWN0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKHNlbGVjdGVkUm93KSA9PiB7XG4gICAgICAgICAgICBpZiAoc2VydmljZVRvU3R5bGVNYXBbc2VsZWN0ZWRSb3cuc2VydmljZU5hbWVdID09PSAncGFnZScpIHtcbiAgICAgICAgICAgICAgICBoYW5kbGVPcGVuUGFnZVN0eWxlRGlhbG9nKHNlbGVjdGVkUm93LCBNT0RFX0NMT05FKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2V0RW50aXR5TW9kYWwoe1xuICAgICAgICAgICAgICAgICAgICAuLi5lbnRpdHlNb2RhbCxcbiAgICAgICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlbGVjdGVkUm93LnNlcnZpY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiBzZWxlY3RlZFJvdy5uYW1lLFxuICAgICAgICAgICAgICAgICAgICBtb2RlOiBNT0RFX0NMT05FLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gICAgICAgIFtlbnRpdHlNb2RhbF1cbiAgICApO1xuXG4gICAgY29uc3QgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2sgPSB1c2VDYWxsYmFjayhcbiAgICAgICAgKHNlbGVjdGVkUm93KSA9PiB7XG4gICAgICAgICAgICBzZXREZWxldGVNb2RhbCh7XG4gICAgICAgICAgICAgICAgLi4uZGVsZXRlTW9kYWwsXG4gICAgICAgICAgICAgICAgb3BlbjogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdGFuemFOYW1lOiBzZWxlY3RlZFJvdy5uYW1lLFxuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZWxlY3RlZFJvdy5zZXJ2aWNlTmFtZSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBbZGVsZXRlTW9kYWxdXG4gICAgKTtcblxuICAgIGNvbnN0IGdlbmVyYXRlTW9kYWxEaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIGlmIChlbnRpdHlNb2RhbC5vcGVuKSB7XG4gICAgICAgICAgICBsZXQgbGFiZWw7XG4gICAgICAgICAgICBpZiAocGFnZSA9PT0gJ2lucHV0cycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHNlcnZpY2VzIH0gPSB1bmlmaWVkQ29uZmlncy5wYWdlcz8uaW5wdXRzO1xuICAgICAgICAgICAgICAgIGxhYmVsID0gc2VydmljZXMuZmluZCgoeCkgPT4geC5uYW1lID09PSBlbnRpdHlNb2RhbC5zZXJ2aWNlTmFtZSk/LnRpdGxlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCB7IHRhYnMgfSA9IHVuaWZpZWRDb25maWdzLnBhZ2VzPy5jb25maWd1cmF0aW9uO1xuICAgICAgICAgICAgICAgIGxhYmVsID0gdGFicy5maW5kKCh4KSA9PiB4Lm5hbWUgPT09IGVudGl0eU1vZGFsLnNlcnZpY2VOYW1lKT8udGl0bGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIDxFbnRpdHlNb2RhbFxuICAgICAgICAgICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgICAgICAgICBvcGVuPXtlbnRpdHlNb2RhbC5vcGVufVxuICAgICAgICAgICAgICAgICAgICBoYW5kbGVSZXF1ZXN0Q2xvc2U9e2hhbmRsZUVudGl0eUNsb3NlfVxuICAgICAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17ZW50aXR5TW9kYWwuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIHN0YW56YU5hbWU9e2VudGl0eU1vZGFsLnN0YW56YU5hbWV9XG4gICAgICAgICAgICAgICAgICAgIG1vZGU9e2VudGl0eU1vZGFsLm1vZGV9XG4gICAgICAgICAgICAgICAgICAgIGZvcm1MYWJlbD17XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHlNb2RhbC5tb2RlID09PSBNT0RFX0NMT05FID8gXyhgQ2xvbmUgYCkgKyBsYWJlbCA6IF8oYFVwZGF0ZSBgKSArIGxhYmVsXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2VuZXJhdGVEZWxldGVEaWFsb2cgPSAoKSA9PiB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RGVsZXRlTW9kYWxcbiAgICAgICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgICAgIG9wZW49e2RlbGV0ZU1vZGFsLm9wZW59XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVxdWVzdENsb3NlPXtoYW5kbGVEZWxldGVDbG9zZX1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlTmFtZT17ZGVsZXRlTW9kYWwuc2VydmljZU5hbWV9XG4gICAgICAgICAgICAgICAgc3RhbnphTmFtZT17ZGVsZXRlTW9kYWwuc3RhbnphTmFtZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICk7XG4gICAgfTtcblxuICAgIGNvbnN0IGdlbmVyYXRlQ29sdW1ucyA9ICgpID0+IHtcbiAgICAgICAgY29uc3QgY29sdW1uID0gW107XG4gICAgICAgIGlmIChoZWFkZXJzICYmIGhlYWRlcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBoZWFkZXJzLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICBjb2x1bW4ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIC4uLml0ZW0sXG4gICAgICAgICAgICAgICAgICAgIHNvcnRLZXk6IGl0ZW0uZmllbGQgfHwgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgaXNDdXN0b21NYXBwaW5nOiBpdGVtLm1hcHBpbmcgPyB0cnVlIDogZmFsc2VcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbHVtbi5wdXNoKHsgbGFiZWw6ICdBY3Rpb25zJywgZmllbGQ6ICdhY3Rpb25zJywgc29ydEtleTogJycgfSk7XG4gICAgICAgIHJldHVybiBjb2x1bW47XG4gICAgfTtcblxuICAgIGNvbnN0IGNvbHVtbnMgPSBnZW5lcmF0ZUNvbHVtbnMoKTtcblxuICAgIGNvbnN0IGdldFRhYmxlSGVhZGVyQ2VsbCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxUYWJsZS5IZWFkPlxuICAgICAgICAgICAgICAgIHtjb2x1bW5zICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMubGVuZ3RoICYmXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtbnMubWFwKChoZWFkRGF0YSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICAgICAgPFRhYmxlLkhlYWRDZWxsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5PXtoZWFkRGF0YS5maWVsZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvblNvcnQ9eyhlKSA9PiBoZWFkRGF0YS5zb3J0S2V5ID8gaGFuZGxlU29ydChlLCBoZWFkRGF0YSkgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvcnRLZXk9e2hlYWREYXRhLnNvcnRLZXkgPyBoZWFkRGF0YS5zb3J0S2V5IDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3J0RGlyPXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZERhdGEuc29ydEtleSAmJiBoZWFkRGF0YS5zb3J0S2V5ID09PSBzb3J0S2V5ID8gc29ydERpciA6ICdub25lJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7aGVhZERhdGEubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1RhYmxlLkhlYWRDZWxsPlxuICAgICAgICAgICAgICAgICAgICApKX1cbiAgICAgICAgICAgIDwvVGFibGUuSGVhZD5cbiAgICAgICAgKTtcbiAgICB9LCBbY29sdW1ucywgaGFuZGxlU29ydCwgc29ydERpciwgc29ydEtleV0pO1xuXG4gICAgY29uc3QgZ2V0VGFibGVCb2R5ID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFRhYmxlLkJvZHk+XG4gICAgICAgICAgICAgICAge2RhdGEgJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICAgICAgZGF0YS5tYXAoKHJvdykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Q3VzdG9tVGFibGVSb3cgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LmJlc3QtcHJhY3RpY2UucmVhY3QtcHJvcHMtc3ByZWFkaW5nLnJlYWN0LXByb3BzLXNwcmVhZGluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk9e3Jvdy5pZH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93PXtyb3d9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbHVtbnM9e2NvbHVtbnN9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlck1hcHBpbmc9e2hlYWRlck1hcHBpbmd9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsuLi57XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVFZGl0QWN0aW9uQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVDbG9uZUFjdGlvbkNsaWNrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlRGVsZXRlQWN0aW9uQ2xpY2ssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZVRvZ2dsZUFjdGlvbkNsaWNrPXtoYW5kbGVUb2dnbGVBY3Rpb25DbGlja31cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgey4uLihtb3JlSW5mb1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHBhbnNpb25Sb3c6IGdldEV4cGFuc2lvblJvdyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb3csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9yZUluZm9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDoge30pfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgIDwvVGFibGUuQm9keT5cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIHtjb2x1bW5zICYmIGNvbHVtbnMubGVuZ3RoICYmIChcbiAgICAgICAgICAgICAgICA8VGFibGUgLy8gbm9zZW1ncmVwOiB0eXBlc2NyaXB0LnJlYWN0LmJlc3QtcHJhY3RpY2UucmVhY3QtcHJvcHMtc3ByZWFkaW5nLnJlYWN0LXByb3BzLXNwcmVhZGluZ1xuICAgICAgICAgICAgICAgICAgICBzdHJpcGVSb3dzXG4gICAgICAgICAgICAgICAgICAgIHsuLi4obW9yZUluZm8gPyB7IHJvd0V4cGFuc2lvbjogJ3NpbmdsZScgfSA6IHt9KX1cbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIHtnZXRUYWJsZUhlYWRlckNlbGwoKX1cbiAgICAgICAgICAgICAgICAgICAge2dldFRhYmxlQm9keSgpfVxuICAgICAgICAgICAgICAgIDwvVGFibGU+XG4gICAgICAgICAgICApfVxuICAgICAgICAgICAgeyFkYXRhLmxlbmd0aCA/IDxOb1JlY29yZHNEaXY+Tm8gcmVjb3JkcyBmb3VuZDwvTm9SZWNvcmRzRGl2PiA6IG51bGx9XG4gICAgICAgICAgICB7Z2VuZXJhdGVNb2RhbERpYWxvZygpfVxuICAgICAgICAgICAge2dlbmVyYXRlRGVsZXRlRGlhbG9nKCl9XG4gICAgICAgIDwvPlxuICAgICk7XG59XG5cbkN1c3RvbVRhYmxlLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZGF0YTogUHJvcFR5cGVzLmFycmF5LmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2s6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2c6IFByb3BUeXBlcy5mdW5jLFxuICAgIGhhbmRsZVNvcnQ6IFByb3BUeXBlcy5mdW5jLFxuICAgIHNvcnREaXI6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc29ydEtleTogUHJvcFR5cGVzLnN0cmluZyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oQ3VzdG9tVGFibGUpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBUZXh0IGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvVGV4dCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuXG5mdW5jdGlvbiBUYWJsZUZpbHRlcihwcm9wcykge1xuICAgIGNvbnN0IGRlYm91bmNlID0gKGZ1bmMsIHdhaXQpID0+IHtcbiAgICAgICAgbGV0IHRpbWVvdXQ7XG5cbiAgICAgICAgLy8gVGhpcyBpcyB0aGUgZnVuY3Rpb24gdGhhdCBpcyByZXR1cm5lZCBhbmQgd2lsbCBiZSBleGVjdXRlZCBtYW55IHRpbWVzXG4gICAgICAgIC8vIFdlIHNwcmVhZCAoLi4uYXJncykgdG8gY2FwdHVyZSBhbnkgbnVtYmVyIG9mIHBhcmFtZXRlcnMgd2Ugd2FudCB0byBwYXNzXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBleGVjdXRlZEZ1bmN0aW9uKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIFRoZSBjYWxsYmFjayBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlclxuICAgICAgICAgICAgLy8gdGhlIGRlYm91bmNlIHRpbWUgaGFzIGVsYXBzZWRcbiAgICAgICAgICAgIGNvbnN0IGxhdGVyID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIG51bGwgdGltZW91dCB0byBpbmRpY2F0ZSB0aGUgZGVib3VuY2UgZW5kZWRcbiAgICAgICAgICAgICAgICB0aW1lb3V0ID0gbnVsbDtcblxuICAgICAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGNhbGxiYWNrXG4gICAgICAgICAgICAgICAgZnVuYyguLi5hcmdzKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgcmVzZXQgdGhlIHdhaXRpbmcgZXZlcnkgZnVuY3Rpb24gZXhlY3V0aW9uLlxuICAgICAgICAgICAgLy8gVGhpcyBpcyB0aGUgc3RlcCB0aGF0IHByZXZlbnRzIHRoZSBmdW5jdGlvbiBmcm9tXG4gICAgICAgICAgICAvLyBiZWluZyBleGVjdXRlZCBiZWNhdXNlIGl0IHdpbGwgbmV2ZXIgcmVhY2ggdGhlXG4gICAgICAgICAgICAvLyBpbnNpZGUgb2YgdGhlIHByZXZpb3VzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lb3V0KTtcblxuICAgICAgICAgICAgLy8gUmVzdGFydCB0aGUgZGVib3VuY2Ugd2FpdGluZyBwZXJpb2QuXG4gICAgICAgICAgICAvLyBzZXRUaW1lb3V0IHJldHVybnMgYSB0cnV0aHkgdmFsdWVcbiAgICAgICAgICAgIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgICAgfTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRleHRcbiAgICAgICAgICAgIGFwcGVhcmFuY2U9XCJzZWFyY2hcIlxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJmaWx0ZXJcIlxuICAgICAgICAgICAgb25DaGFuZ2U9e2RlYm91bmNlKHByb3BzLmhhbmRsZUNoYW5nZSwgMjAwKX1cbiAgICAgICAgLz5cbiAgICApO1xufVxuXG5UYWJsZUZpbHRlci5wcm9wVHlwZXMgPSB7XG4gICAgaGFuZGxlQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYyxcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFRhYmxlRmlsdGVyO1xuIiwiaW1wb3J0IFJlYWN0LCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFNlbGVjdCBmcm9tICdAc3BsdW5rL3JlYWN0LXVpL1NlbGVjdCc7XG5pbXBvcnQgQnV0dG9uIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQnV0dG9uJztcbmltcG9ydCBQYWdpbmF0b3IgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9QYWdpbmF0b3InO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdzdHlsZWQtY29tcG9uZW50cyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcblxuaW1wb3J0IFRhYmxlRmlsdGVyIGZyb20gJy4vVGFibGVGaWx0ZXInO1xuaW1wb3J0IFRhYmxlQ29udGV4dCBmcm9tICcuLi8uLi9jb250ZXh0L1RhYmxlQ29udGV4dCc7XG5pbXBvcnQgeyBUYWJsZVNlbGVjdEJveFdyYXBwZXIgfSBmcm9tICcuL0N1c3RvbVRhYmxlU3R5bGUnO1xuaW1wb3J0IHsgUEFHRV9JTlBVVCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cy9wYWdlcyc7XG5cbmNvbnN0IFRhYmxlSGVhZGVyV3JhcHBlciA9IHN0eWxlZC5kaXZgXG4gICAgZGlzcGxheTogZmxleDtcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XG4gICAgYm9yZGVyLXRvcDogMXB4IHNvbGlkICNjY2M7XG4gICAgcGFkZGluZy10b3A6IDVweDtcbiAgICBtYXJnaW4tYm90dG9tOiA1cHg7XG5gO1xuXG5jb25zdCBUYWJsZUZpbHRlcldyYXBwZXIgPSBzdHlsZWQuZGl2YFxuICAgIG1heC13aWR0aDogMzAwcHg7XG4gICAgd2lkdGg6IDEwMCU7XG5gO1xuXG5mdW5jdGlvbiBUYWJsZUhlYWRlcih7IHBhZ2UsIHNlcnZpY2VzLCB0b3RhbEVsZW1lbnQsIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW4gfSkge1xuICAgIGNvbnN0IHtcbiAgICAgICAgcGFnZVNpemUsXG4gICAgICAgIGN1cnJlbnRQYWdlLFxuICAgICAgICBzZXRDdXJyZW50UGFnZSxcbiAgICAgICAgc2V0UGFnZVNpemUsXG4gICAgICAgIHNlYXJjaFR5cGUsXG4gICAgICAgIHNldFNlYXJjaFR5cGUsXG4gICAgICAgIHNldFNlYXJjaFRleHQsXG4gICAgfSA9IHVzZUNvbnRleHQoVGFibGVDb250ZXh0KTtcblxuICAgIGNvbnN0IGl0ZW1MYWJlbCA9IHBhZ2UgPT09IFBBR0VfSU5QVVQgPyAnSW5wdXQnIDogJ0l0ZW0nO1xuXG4gICAgY29uc3QgZ2V0U2VhcmNoVHlwZURyb3Bkb3duID0gKCkgPT4ge1xuICAgICAgICBpZiAoc2VydmljZXMubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICBhcnIgPSBzZXJ2aWNlcy5tYXAoKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgIHJldHVybiA8U2VsZWN0Lk9wdGlvbiBrZXk9e3NlcnZpY2UubmFtZX0gbGFiZWw9e3NlcnZpY2UudGl0bGV9IHZhbHVlPXtzZXJ2aWNlLm5hbWV9IC8+O1xuICAgICAgICB9KTtcblxuICAgICAgICBhcnIudW5zaGlmdCg8U2VsZWN0Lk9wdGlvbiBrZXk9XCJhbGxcIiBsYWJlbD17XygnQWxsJyl9IHZhbHVlPVwiYWxsXCIgLz4pO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPFNlbGVjdFxuICAgICAgICAgICAgICAgIHZhbHVlPXtzZWFyY2hUeXBlfVxuICAgICAgICAgICAgICAgIGNsYXNzTmFtZT1cImRyb3Bkb3duSW5wdXRcIlxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSwgeyB2YWx1ZSB9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHNldEN1cnJlbnRQYWdlKDApO1xuICAgICAgICAgICAgICAgICAgICBzZXRTZWFyY2hUeXBlKHZhbHVlKTtcbiAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHthcnJ9XG4gICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIChcbiAgICAgICAgPFRhYmxlSGVhZGVyV3JhcHBlcj5cbiAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3NOYW1lPVwiaW5wdXROdW1iZXJcIj5cbiAgICAgICAgICAgICAgICAgICAge3RvdGFsRWxlbWVudH1cbiAgICAgICAgICAgICAgICAgICAge3RvdGFsRWxlbWVudCA+IDEgPyBfKGAgJHtpdGVtTGFiZWx9c2ApIDogXyhgICR7aXRlbUxhYmVsfWApfVxuICAgICAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgICAgICB7cGFnZSA9PT0gUEFHRV9JTlBVVCA/IChcbiAgICAgICAgICAgICAgICAgICAgPFRhYmxlU2VsZWN0Qm94V3JhcHBlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3RcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17cGFnZVNpemV9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiZHJvcGRvd25QYWdlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbkNoYW5nZT17KGUsIHsgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDdXJyZW50UGFnZSgwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0UGFnZVNpemUodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH19XG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPFNlbGVjdC5PcHRpb24ga2V5PVwiMTBcIiBsYWJlbD17XygnMTAgUGVyIFBhZ2UnKX0gdmFsdWU9ezEwfSAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxTZWxlY3QuT3B0aW9uIGtleT1cIjI1XCIgbGFiZWw9e18oJzI1IFBlciBQYWdlJyl9IHZhbHVlPXsyNX0gLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8U2VsZWN0Lk9wdGlvbiBrZXk9XCI1MFwiIGxhYmVsPXtfKCc1MCBQZXIgUGFnZScpfSB2YWx1ZT17NTB9IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L1NlbGVjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgIHtnZXRTZWFyY2hUeXBlRHJvcGRvd24oKX1cbiAgICAgICAgICAgICAgICAgICAgPC9UYWJsZVNlbGVjdEJveFdyYXBwZXI+XG4gICAgICAgICAgICAgICAgKSA6IG51bGx9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxUYWJsZUZpbHRlcldyYXBwZXI+XG4gICAgICAgICAgICAgICAgPFRhYmxlRmlsdGVyXG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZUNoYW5nZT17KGUsIHsgdmFsdWUgfSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2V0Q3VycmVudFBhZ2UoMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRTZWFyY2hUZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgPC9UYWJsZUZpbHRlcldyYXBwZXI+XG4gICAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgICAgIDxQYWdpbmF0b3JcbiAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlLCB7IHBhZ2U6IHBhZ2VOdW1iZXIgfSkgPT4gc2V0Q3VycmVudFBhZ2UocGFnZU51bWJlciAtIDEpfVxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50PXtjdXJyZW50UGFnZSArIDF9XG4gICAgICAgICAgICAgICAgICAgIGFsd2F5c1Nob3dMYXN0UGFnZUxpbmtcbiAgICAgICAgICAgICAgICAgICAgdG90YWxQYWdlcz17TWF0aC5jZWlsKHRvdGFsRWxlbWVudCAvIHBhZ2VTaXplKX1cbiAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgIHtwYWdlID09PSBQQUdFX0lOUFVUID8gbnVsbCA6IChcbiAgICAgICAgICAgICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw9e18oJ0FkZCcpfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXBwZWFyYW5jZT1cInByaW1hcnlcIlxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlUmVxdWVzdE1vZGFsT3Blbn1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICApfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvVGFibGVIZWFkZXJXcmFwcGVyPlxuICAgICk7XG59XG5cblRhYmxlSGVhZGVyLnByb3BUeXBlcyA9IHtcbiAgICBwYWdlOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHNlcnZpY2VzOiBQcm9wVHlwZXMuYXJyYXksXG4gICAgdG90YWxFbGVtZW50OiBQcm9wVHlwZXMubnVtYmVyLFxuICAgIGhhbmRsZVJlcXVlc3RNb2RhbE9wZW46IFByb3BUeXBlcy5mdW5jLFxufTtcblxuZXhwb3J0IGRlZmF1bHQgVGFibGVIZWFkZXI7XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlU3RhdGUsIHVzZUNvbnRleHQsIHVzZUVmZmVjdCwgbWVtbyB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB1cGRhdGUgZnJvbSAnaW1tdXRhYmlsaXR5LWhlbHBlcic7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcblxuaW1wb3J0IHsgV2FpdFNwaW5uZXJXcmFwcGVyIH0gZnJvbSAnLi9DdXN0b21UYWJsZVN0eWxlJztcbmltcG9ydCB7IGF4aW9zQ2FsbFdyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlsL2F4aW9zQ2FsbFdyYXBwZXInO1xuaW1wb3J0IHsgZ2V0VW5pZmllZENvbmZpZ3MsIGdlbmVyYXRlVG9hc3QsIGlzVHJ1ZSB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgQ3VzdG9tVGFibGUgZnJvbSAnLi9DdXN0b21UYWJsZSc7XG5pbXBvcnQgVGFibGVIZWFkZXIgZnJvbSAnLi9UYWJsZUhlYWRlcic7XG5pbXBvcnQgVGFibGVDb250ZXh0IGZyb20gJy4uLy4uL2NvbnRleHQvVGFibGVDb250ZXh0JztcbmltcG9ydCB7IFBBR0VfSU5QVVQgfSBmcm9tICcuLi8uLi9jb25zdGFudHMvcGFnZXMnO1xuXG5mdW5jdGlvbiBUYWJsZVdyYXBwZXIoeyBwYWdlLCBzZXJ2aWNlTmFtZSwgaGFuZGxlUmVxdWVzdE1vZGFsT3BlbiwgaGFuZGxlT3BlblBhZ2VTdHlsZURpYWxvZyB9KSB7XG4gICAgY29uc3QgW3NvcnRLZXksIHNldFNvcnRLZXldID0gdXNlU3RhdGUoJ25hbWUnKTtcbiAgICBjb25zdCBbc29ydERpciwgc2V0U29ydERpcl0gPSB1c2VTdGF0ZSgnYXNjJyk7XG4gICAgY29uc3QgW2lzQ3VzdG9tTWFwcGluZywgc2V0Q3VzdG9tTWFwcGluZ1N0YXR1c10gPSB1c2VTdGF0ZShmYWxzZSk7XG4gICAgY29uc3QgW2xvYWRpbmcsIHNldExvYWRpbmddID0gdXNlU3RhdGUodHJ1ZSk7XG4gICAgY29uc3QgW2Vycm9yLCBzZXRFcnJvcl0gPSB1c2VTdGF0ZShudWxsKTtcblxuICAgIGNvbnN0IHsgcm93RGF0YSwgc2V0Um93RGF0YSwgcGFnZVNpemUsIGN1cnJlbnRQYWdlLCBzZWFyY2hUZXh0LCBzZWFyY2hUeXBlIH0gPSB1c2VDb250ZXh0KFxuICAgICAgICBUYWJsZUNvbnRleHRcbiAgICApO1xuXG4gICAgY29uc3QgdW5pZmllZENvbmZpZ3MgPSBnZXRVbmlmaWVkQ29uZmlncygpO1xuICAgIGNvbnN0IHRhYmxlQ29uZmlnID1cbiAgICAgICAgcGFnZSA9PT0gUEFHRV9JTlBVVFxuICAgICAgICAgICAgPyB1bmlmaWVkQ29uZmlncy5wYWdlcy5pbnB1dHMudGFibGVcbiAgICAgICAgICAgIDogdW5pZmllZENvbmZpZ3MucGFnZXMuY29uZmlndXJhdGlvbi50YWJzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBzZXJ2aWNlTmFtZSlbMF1cbiAgICAgICAgICAgICAgICAgIC50YWJsZTtcbiAgICBjb25zdCBoZWFkZXJzID0gdGFibGVDb25maWcuaGVhZGVyO1xuICAgIGNvbnN0IHsgbW9yZUluZm8gfSA9IHRhYmxlQ29uZmlnO1xuICAgIGNvbnN0IHNlcnZpY2VzID1cbiAgICAgICAgcGFnZSA9PT0gUEFHRV9JTlBVVFxuICAgICAgICAgICAgPyB1bmlmaWVkQ29uZmlncy5wYWdlcy5pbnB1dHMuc2VydmljZXNcbiAgICAgICAgICAgIDogdW5pZmllZENvbmZpZ3MucGFnZXMuY29uZmlndXJhdGlvbi50YWJzLmZpbHRlcigoeCkgPT4geC5uYW1lID09PSBzZXJ2aWNlTmFtZSk7XG5cbiAgICBjb25zdCBtb2RpZnlBUElSZXNwb25zZSA9IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IG9iaiA9IHt9O1xuICAgICAgICBzZXJ2aWNlcy5mb3JFYWNoKChzZXJ2aWNlLCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgaWYgKHNlcnZpY2UgJiYgc2VydmljZS5uYW1lICYmIGRhdGEpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0bXBPYmogPSB7fTtcbiAgICAgICAgICAgICAgICBkYXRhW2luZGV4XS5mb3JFYWNoKCh2YWwpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdG1wT2JqW3ZhbC5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLnZhbC5jb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IHZhbC5pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHZhbC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VydmljZU5hbWU6IHNlcnZpY2UubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlcnZpY2VUaXRsZTogc2VydmljZS50aXRsZSB8fCAnJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9ialtzZXJ2aWNlLm5hbWVdID0gdG1wT2JqO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgc2V0Um93RGF0YShvYmopO1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgZmV0Y2hJbnB1dHMgPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHJlcXVlc3RzID0gW107XG4gICAgICAgIHNlcnZpY2VzLmZvckVhY2goKHNlcnZpY2UpID0+IHtcbiAgICAgICAgICAgIHJlcXVlc3RzLnB1c2goXG4gICAgICAgICAgICAgICAgYXhpb3NDYWxsV3JhcHBlcih7XG4gICAgICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lOiBzZXJ2aWNlLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBjb3VudDogLTEgfSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIGF4aW9zXG4gICAgICAgICAgICAuYWxsKHJlcXVlc3RzKVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNoYWRvd1xuICAgICAgICAgICAgLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICAgICAgbGV0IGVycm9yQ29kZSA9ICcnO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvci5yZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgcmVxdWVzdCB3YXMgbWFkZSBhbmQgdGhlIHNlcnZlciByZXNwb25kZWQgd2l0aCBhIHN0YXR1cyBjb2RlXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgcmVjZWl2ZWQgZnJvbSBzZXJ2ZXI6ICR7ZXJyb3IucmVzcG9uc2UuZGF0YS5tZXNzYWdlc1swXS50ZXh0fWA7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9IHBhZ2UgPT09IFBBR0VfSU5QVVQgPyAnRVJSMDAwMScgOiAnRVJSMDAwMic7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlcnJvci5yZXF1ZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRoZSByZXF1ZXN0IHdhcyBtYWRlIGJ1dCBubyByZXNwb25zZSB3YXMgcmVjZWl2ZWRcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBObyByZXNwb25zZSByZWNlaXZlZCB3aGlsZSBtYWtpbmcgcmVxdWVzdCB0byAke3BhZ2V9IHNlcnZpY2VzYDtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JDb2RlID0gJ0VSUjAwMDMnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNvbWV0aGluZyBoYXBwZW5lZCBpbiBzZXR0aW5nIHVwIHRoZSByZXF1ZXN0IHRoYXQgdHJpZ2dlcmVkIGFuIEVycm9yXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgRXJyb3IgbWFraW5nIHJlcXVlc3QgdG8gJHtwYWdlfSBzZXJ2aWNlc2A7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yQ29kZSA9ICdFUlIwMDA0JztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgICAgICAgICAgZXJyb3IudWNjRXJyb3JDb2RlID0gZXJyb3JDb2RlO1xuICAgICAgICAgICAgICAgIGdlbmVyYXRlVG9hc3QobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgc2V0TG9hZGluZyhmYWxzZSk7XG4gICAgICAgICAgICAgICAgc2V0RXJyb3IoZXJyb3IpO1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChlcnJvcik7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgICAgICAgbW9kaWZ5QVBJUmVzcG9uc2UocmVzcG9uc2UubWFwKChyZXMpID0+IHJlcy5kYXRhLmVudHJ5KSk7XG4gICAgICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgZmV0Y2hJbnB1dHMoKTtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL2V4aGF1c3RpdmUtZGVwc1xuICAgIH0sIFtdKTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHJvdyB7T2JqZWN0fSByb3dcbiAgICAgKi9cbiAgICBjb25zdCBjaGFuZ2VUb2dnbGVTdGF0dXMgPSAocm93KSA9PiB7XG4gICAgICAgIHNldFJvd0RhdGEoKGN1cnJlbnRSb3dEYXRhKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdXBkYXRlKGN1cnJlbnRSb3dEYXRhLCB7XG4gICAgICAgICAgICAgICAgW3Jvdy5zZXJ2aWNlTmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgW3Jvdy5uYW1lXToge1xuICAgICAgICAgICAgICAgICAgICAgICAgX190b2dnbGVTaG93U3Bpbm5lcjogeyAkc2V0OiB0cnVlIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgYm9keSA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICAgICAgYm9keS5hcHBlbmQoJ2Rpc2FibGVkJywgIXJvdy5kaXNhYmxlZCk7XG4gICAgICAgIGF4aW9zQ2FsbFdyYXBwZXIoe1xuICAgICAgICAgICAgc2VydmljZU5hbWU6IGAke3Jvdy5zZXJ2aWNlTmFtZX0vJHtyb3cubmFtZX1gLFxuICAgICAgICAgICAgYm9keSxcbiAgICAgICAgICAgIGN1c3RvbUhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnIH0sXG4gICAgICAgICAgICBtZXRob2Q6ICdwb3N0JyxcbiAgICAgICAgICAgIGhhbmRsZUVycm9yOiB0cnVlLFxuICAgICAgICAgICAgY2FsbGJhY2tPbkVycm9yOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgc2V0Um93RGF0YSgoY3VycmVudFJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZShjdXJyZW50Um93RGF0YSwge1xuICAgICAgICAgICAgICAgICAgICAgICAgW3Jvdy5zZXJ2aWNlTmFtZV06IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbcm93Lm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdG9nZ2xlU2hvd1NwaW5uZXI6IHsgJHNldDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICAgICAgc2V0Um93RGF0YSgoY3VycmVudFJvd0RhdGEpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlKGN1cnJlbnRSb3dEYXRhLCB7XG4gICAgICAgICAgICAgICAgICAgIFtyb3cuc2VydmljZU5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBbcm93Lm5hbWVdOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gQURET04tMzkxMjU6IGlzVHJ1ZSByZXF1aXJlZCBpZiBzcGx1bmt0YXVjY2xpYiByZXN0aGFuZGxlcnMnIHN1cGVyKCkgaXMgbm90IGludm9rZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZDogeyAkc2V0OiBpc1RydWUocmVzcG9uc2UuZGF0YS5lbnRyeVswXS5jb250ZW50LmRpc2FibGVkKSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdG9nZ2xlU2hvd1NwaW5uZXI6IHsgJHNldDogZmFsc2UgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGhhbmRsZVNvcnQgPSAoZSwgdmFsKSA9PiB7XG4gICAgICAgIGNvbnN0IHByZXZTb3J0S2V5ID0gc29ydEtleTtcbiAgICAgICAgY29uc3QgcHJldlNvcnREaXIgPSBwcmV2U29ydEtleSA9PT0gdmFsLnNvcnRLZXkgPyBzb3J0RGlyIDogJ25vbmUnO1xuICAgICAgICBjb25zdCBuZXh0U29ydERpciA9IHByZXZTb3J0RGlyID09PSAnYXNjJyA/ICdkZXNjJyA6ICdhc2MnO1xuICAgICAgICBzZXRTb3J0RGlyKG5leHRTb3J0RGlyKTtcbiAgICAgICAgc2V0U29ydEtleSh2YWwuc29ydEtleSk7XG4gICAgICAgIHNldEN1c3RvbU1hcHBpbmdTdGF0dXModmFsLmlzQ3VzdG9tTWFwcGluZyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheX0gZGF0YVxuICAgICAqIFRoaXMgZnVuY3Rpb24gd2lsbCBpdGVyYXRlIGFuIGFycnJheSBhbmQgbWF0Y2ggZWFjaCBrZXktdmFsdWUgd2l0aCB0aGUgc2VhcmNoVGV4dFxuICAgICAqIEl0IHdpbGwgcmV0dXJuIGEgbmV3IGFycmF5IHdoaWNoIHdpbGwgbWF0Y2ggd2l0aCBzZWFyY2hUZXh0XG4gICAgICovXG4gICAgY29uc3QgZmluZEJ5TWF0Y2hpbmdWYWx1ZSA9IChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xuICAgICAgICBjb25zdCB0YWJsZUZpZWxkcyA9IFtdO1xuXG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaCgoaGVhZERhdGEpID0+IHtcbiAgICAgICAgICAgIHRhYmxlRmllbGRzLnB1c2goaGVhZERhdGEuZmllbGQpO1xuICAgICAgICB9KTtcbiAgICAgICAgbW9yZUluZm8/LmZvckVhY2goKG1vcmVJbmZvRGF0YSkgPT4ge1xuICAgICAgICAgICAgdGFibGVGaWVsZHMucHVzaChtb3JlSW5mb0RhdGEuZmllbGQpO1xuICAgICAgICB9KTtcblxuICAgICAgICBPYmplY3Qua2V5cyhkYXRhKS5mb3JFYWNoKCh2KSA9PiB7XG4gICAgICAgICAgICBsZXQgZm91bmQgPSBmYWxzZTtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKGRhdGFbdl0pLmZvckVhY2goKHZ2KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICB0YWJsZUZpZWxkcy5pbmNsdWRlcyh2dikgJiZcbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIGRhdGFbdl1bdnZdID09PSAnc3RyaW5nJyAmJlxuICAgICAgICAgICAgICAgICAgICBkYXRhW3ZdW3Z2XS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHNlYXJjaFRleHQudG9Mb3dlckNhc2UoKS50cmltKCkpICYmXG4gICAgICAgICAgICAgICAgICAgICFmb3VuZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBhcnIucHVzaChkYXRhW3ZdKTtcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICB9O1xuXG4gICAgY29uc3QgZ2V0Um93RGF0YSA9ICgpID0+IHtcbiAgICAgICAgbGV0IGFyciA9IFtdO1xuICAgICAgICBpZiAoc2VhcmNoVHlwZSA9PT0gJ2FsbCcpIHtcbiAgICAgICAgICAgIE9iamVjdC5rZXlzKHJvd0RhdGEpLmZvckVhY2goKGtleSkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCBuZXdBcnIgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoVGV4dCAmJiBzZWFyY2hUZXh0Lmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdBcnIgPSBmaW5kQnlNYXRjaGluZ1ZhbHVlKHJvd0RhdGFba2V5XSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbmV3QXJyID0gT2JqZWN0LmtleXMocm93RGF0YVtrZXldKS5tYXAoKHZhbCkgPT4gcm93RGF0YVtrZXldW3ZhbF0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBhcnIgPSBhcnIuY29uY2F0KG5ld0Fycik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFyciA9IGZpbmRCeU1hdGNoaW5nVmFsdWUocm93RGF0YVtzZWFyY2hUeXBlXSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBfc29ydEtleSA9IGlzQ3VzdG9tTWFwcGluZyA/ICdzZXJ2aWNlVGl0bGUnIDogc29ydEtleTtcblxuICAgICAgICAvLyBTb3J0IHRoZSBhcnJheSBiYXNlZCBvbiB0aGUgc29ydCB2YWx1ZVxuICAgICAgICBjb25zdCBzb3J0ZWRBcnIgPSBhcnIuc29ydCgocm93QSwgcm93QikgPT4ge1xuICAgICAgICAgICAgaWYgKHNvcnREaXIgPT09ICdhc2MnKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm93QVZhbHVlID0gcm93QVtfc29ydEtleV0gPT09IHVuZGVmaW5lZCA/ICcnIDogcm93QVtfc29ydEtleV07XG4gICAgICAgICAgICAgICAgY29uc3Qgcm93QlZhbHVlID0gcm93Qltfc29ydEtleV0gPT09IHVuZGVmaW5lZCA/ICcnIDogcm93Qltfc29ydEtleV07XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJvd0FWYWx1ZSA+IHJvd0JWYWx1ZSA/IDEgOiAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzb3J0RGlyID09PSAnZGVzYycpIHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3dBVmFsdWUgPSByb3dBW19zb3J0S2V5XSA9PT0gdW5kZWZpbmVkID8gJycgOiByb3dBW19zb3J0S2V5XTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3dCVmFsdWUgPSByb3dCW19zb3J0S2V5XSA9PT0gdW5kZWZpbmVkID8gJycgOiByb3dCW19zb3J0S2V5XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93QlZhbHVlID4gcm93QVZhbHVlID8gMSA6IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCB1cGRhdGVkQXJyID0gc29ydGVkQXJyLnNsaWNlKGN1cnJlbnRQYWdlICogcGFnZVNpemUsIChjdXJyZW50UGFnZSArIDEpICogcGFnZVNpemUpO1xuXG4gICAgICAgIGlmIChjdXJyZW50UGFnZSA+IDAgJiYgIXVwZGF0ZWRBcnIubGVuZ3RoKSB7XG4gICAgICAgICAgICB1cGRhdGVkQXJyID0gc29ydGVkQXJyLnNsaWNlKChjdXJyZW50UGFnZSAtIDEpICogcGFnZVNpemUsIHBhZ2VTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBbdXBkYXRlZEFyciwgYXJyLmxlbmd0aF07XG4gICAgfTtcblxuICAgIGlmIChlcnJvcj8udWNjRXJyb3JDb2RlKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgIH1cblxuICAgIGlmIChsb2FkaW5nKSB7XG4gICAgICAgIHJldHVybiA8V2FpdFNwaW5uZXJXcmFwcGVyIC8+O1xuICAgIH1cblxuICAgIGNvbnN0IFtmaWx0ZXJlZERhdGEsIHRvdGFsRWxlbWVudF0gPSBnZXRSb3dEYXRhKCk7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFRhYmxlSGVhZGVyXG4gICAgICAgICAgICAgICAgcGFnZT17cGFnZX1cbiAgICAgICAgICAgICAgICBzZXJ2aWNlcz17c2VydmljZXN9XG4gICAgICAgICAgICAgICAgdG90YWxFbGVtZW50PXt0b3RhbEVsZW1lbnR9XG4gICAgICAgICAgICAgICAgaGFuZGxlUmVxdWVzdE1vZGFsT3Blbj17aGFuZGxlUmVxdWVzdE1vZGFsT3Blbn1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8Q3VzdG9tVGFibGVcbiAgICAgICAgICAgICAgICBwYWdlPXtwYWdlfVxuICAgICAgICAgICAgICAgIHNlcnZpY2VOYW1lPXtzZXJ2aWNlTmFtZX1cbiAgICAgICAgICAgICAgICBkYXRhPXtmaWx0ZXJlZERhdGF9XG4gICAgICAgICAgICAgICAgaGFuZGxlVG9nZ2xlQWN0aW9uQ2xpY2s9eyhyb3cpID0+IGNoYW5nZVRvZ2dsZVN0YXR1cyhyb3cpfVxuICAgICAgICAgICAgICAgIGhhbmRsZVNvcnQ9e2hhbmRsZVNvcnR9XG4gICAgICAgICAgICAgICAgc29ydERpcj17c29ydERpcn1cbiAgICAgICAgICAgICAgICBzb3J0S2V5PXtzb3J0S2V5fVxuICAgICAgICAgICAgICAgIGhhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2c9e2hhbmRsZU9wZW5QYWdlU3R5bGVEaWFsb2d9XG4gICAgICAgICAgICAvPlxuICAgICAgICA8Lz5cbiAgICApO1xufVxuXG5UYWJsZVdyYXBwZXIucHJvcFR5cGVzID0ge1xuICAgIHBhZ2U6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgc2VydmljZU5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgaGFuZGxlUmVxdWVzdE1vZGFsT3BlbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFuZGxlT3BlblBhZ2VTdHlsZURpYWxvZzogUHJvcFR5cGVzLmZ1bmMsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vKFRhYmxlV3JhcHBlcik7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IExpbmsgZnJvbSAnQHNwbHVuay9yZWFjdC11aS9MaW5rJztcblxuZXhwb3J0IGRlZmF1bHQge1xuICAgIEVSUjAwMDE6IChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIFRoaXMgaXMgbm9ybWFsIG9uIFNwbHVuayBzZWFyY2ggaGVhZHMgYXMgdGhleSBkbyBub3QgcmVxdWlyZSBhbiBJbnB1dCBwYWdlLiBDaGVjayB5b3VyXG4gICAgICAgICAgICBpbnN0YWxsYXRpb24gb3IgcmV0dXJuIHRvIHRoZSA8TGluayB0bz1cImNvbmZpZ3VyYXRpb25cIj5jb25maWd1cmF0aW9uIHBhZ2U8L0xpbms+LlxuICAgICAgICA8Lz5cbiAgICApLFxuICAgIEVSUjAwMDI6XG4gICAgICAgICdDb25maWd1cmF0aW9uIHBhZ2UgZmFpbGVkIHRvIGxvYWQsIHRoZSBzZXJ2ZXIgcmVwb3J0ZWQgaW50ZXJuYWwgZXJyb3JzIHdoaWNoIG1heSBpbmRpY2F0ZSB5b3UgZG8gbm90IGhhdmUgYWNjZXNzIHRvIHRoaXMgcGFnZS4nLFxuICAgIEVSUjAwMDM6ICdGYWlsZWQgdG8gbG9hZCBjb250ZW50IGR1ZSB0byBubyByZXNwb25zZSBmcm9tIHNlcnZlciEnLFxuICAgIEVSUjAwMDQ6ICdGYWlsZWQgdG8gbG9hZCBjb250ZW50IGR1ZSB0byBmYWlsZWQgcmVxdWVzdCBwcm9jZXNzaW5nIScsXG4gICAgRVJSMDAwNTogJ0ZhaWxlZCB0byBsb2FkIGN1cnJlbnQgc3RhdGUgZm9yIHNlbGVjdGVkIGVudGl0eSBpbiBmb3JtIScsXG59O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5cbmltcG9ydCBIZWFkaW5nIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvSGVhZGluZyc7XG5pbXBvcnQgeyBfIH0gZnJvbSAnQHNwbHVuay91aS11dGlscy9pMThuJztcbmltcG9ydCBDYXJkIGZyb20gJ0BzcGx1bmsvcmVhY3QtdWkvQ2FyZCc7XG5pbXBvcnQgV2FybmluZ0ljb24gZnJvbSAnQHNwbHVuay9yZWFjdC1pY29ucy9XYXJuaW5nJztcbmltcG9ydCBlcnJvckNvZGVzIGZyb20gJy4uL2NvbnN0YW50cy9lcnJvckNvZGVzJztcblxuY2xhc3MgRXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICAgICAgc3VwZXIocHJvcHMpO1xuICAgICAgICB0aGlzLnN0YXRlID0geyBlcnJvckNvZGU6IG51bGwsIGVycm9yOiBudWxsLCBlcnJvckluZm86IG51bGwgfTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yKSB7XG4gICAgICAgIC8vIFVwZGF0ZSBzdGF0ZSBzbyB0aGUgbmV4dCByZW5kZXIgd2lsbCBzaG93IHRoZSBmYWxsYmFjayBVSS5cbiAgICAgICAgcmV0dXJuIHsgZXJyb3JDb2RlOiBlcnJvci51Y2NFcnJvckNvZGUgfTtcbiAgICB9XG5cbiAgICBjb21wb25lbnREaWRDYXRjaChlcnJvciwgZXJyb3JJbmZvKSB7XG4gICAgICAgIC8vIENhdGNoIGVycm9ycyBpbiBhbnkgY29tcG9uZW50cyBiZWxvdyBhbmQgcmUtcmVuZGVyIHdpdGggZXJyb3IgbWVzc2FnZVxuICAgICAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgZXJyb3JJbmZvLFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gWW91IGNhbiBhbHNvIGxvZyBlcnJvciBtZXNzYWdlcyB0byBhbiBlcnJvciByZXBvcnRpbmcgc2VydmljZSBoZXJlXG4gICAgfVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5lcnJvcikge1xuICAgICAgICAgICAgLy8gRXJyb3IgcGF0aFxuICAgICAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgICAgICA8ZGl2IGFsaWduPVwiY2VudGVyXCIgc3R5bGU9e3sgbWFyZ2luVG9wOiAnMTAlJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgPENhcmQgc3R5bGU9e3sgYm94U2hhZG93OiAnMTBweCAxMHB4IDVweCAjYWFhYWFhJyB9fT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkLkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8SGVhZGluZyBzdHlsZT17eyB0ZXh0QWxpZ246ICdjZW50ZXInIH19IGxldmVsPXsyfT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPFdhcm5pbmdJY29uIHN0eWxlPXt7IGZvbnRTaXplOiAnMTIwcHgnLCBjb2xvcjogJyNmZjk5MDAnIH19IC8+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JDb2RlID09PSAnRVJSMDAwMSdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXygnRmFpbGVkIHRvIGxvYWQgSW5wdXRzIFBhZ2UnKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBfKCdTb21ldGhpbmcgd2VudCB3cm9uZyEnKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L0hlYWRpbmc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmQuSGVhZGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPENhcmQuQm9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lcnJvckNvZGUgPyAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDw+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XyhlcnJvckNvZGVzW3RoaXMuc3RhdGUuZXJyb3JDb2RlXSl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnIgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxiciAvPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApIDogbnVsbH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGV0YWlscyBzdHlsZT17eyB3aGl0ZVNwYWNlOiAncHJlLXdyYXAnIH19PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7dGhpcy5zdGF0ZS5lcnJvcj8udG9TdHJpbmcoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2RldGFpbHM+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L0NhcmQuQm9keT5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxDYXJkLkZvb3RlciBzaG93Qm9yZGVyPXtmYWxzZX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuZXJyb3JDb2RlID8gdGhpcy5zdGF0ZS5lcnJvckNvZGUgOiBudWxsfVxuICAgICAgICAgICAgICAgICAgICAgICAgPC9DYXJkLkZvb3Rlcj5cbiAgICAgICAgICAgICAgICAgICAgPC9DYXJkPlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBOb3JtYWxseSwganVzdCByZW5kZXIgY2hpbGRyZW5cbiAgICAgICAgcmV0dXJuIHRoaXMucHJvcHMuY2hpbGRyZW47XG4gICAgfVxufVxuXG5FcnJvckJvdW5kYXJ5LnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmFycmF5T2YoUHJvcFR5cGVzLm5vZGUpLCBQcm9wVHlwZXMubm9kZV0pLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFcnJvckJvdW5kYXJ5O1xuIl0sInNvdXJjZVJvb3QiOiIifQ==