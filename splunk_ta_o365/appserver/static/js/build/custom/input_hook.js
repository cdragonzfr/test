var t={2411:(t,e,r)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractAppName=l,e.versionLabel=e.username=e.splunkdPath=e.serverTimezoneInfo=e.rootPath=e.portNumber=e.locale=e.config=e.buildPushNumber=e.buildNumber=e.appBuild=e.app=e.isAvailable=e.CSRFToken=void 0;var n,o=(n=r(2281))&&n.__esModule?n:{default:n},a=r(9327),i="undefined"==typeof window?r.g:window;function u(t){return(0,o.default)(i,["$C",t])}var s=(0,a.getEntry)("splunkweb_csrf_token_".concat(u("MRSPARKLE_PORT_NUMBER")));e.CSRFToken=s;var c=!!u("SPLUNKD_PATH");function l(){var t=(arguments.length>0&&void 0!==arguments[0]?arguments[0]:(0,o.default)(i,["document","location","pathname"],"")).match(/\w\w.\w\w\/(app|manager)\/([^/]+)/);return t?t[2]:void 0}e.isAvailable=c;var p=l();e.app=p;var f=u("APP_BUILD");e.appBuild=f;var v=u("BUILD_NUMBER");e.buildNumber=v;var d=u("BUILD_PUSH_NUMBER");e.buildPushNumber=d;var h=(0,o.default)(i,"$C");e.config=h;var y=u("LOCALE");e.locale=y;var b=u("MRSPARKLE_PORT_NUMBER");e.portNumber=b;var _=u("MRSPARKLE_ROOT_PATH");e.rootPath=_;var g=u("SERVER_ZONEINFO");e.serverTimezoneInfo=g;var m=u("SPLUNKD_PATH");e.splunkdPath=m;var O=u("USERNAME");e.username=O;var w=u("VERSION_LABEL");e.versionLabel=w},7212:(t,e,r)=>{function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}e.Ng=void 0;var o=r(7735);function a(){if("function"!=typeof WeakMap)return null;var t=new WeakMap;return a=function(){return t},t}function i(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function u(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?i(Object(r),!0).forEach((function(e){s(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function s(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}var c=function(t){var e=t.appBuild,r=t.buildNumber,n=t.buildPushNumber,a=t.locale,i=t.rootPath,s=t.splunkdPath;function c(t){var o=u({appBuild:e,buildPushNumber:n,buildNumber:r},arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}),a=t.match(/(^|\w\w-\w\w\/)static\//);if(!a)return t;var i=a.index+a[0].length-1,s=t.match(/(^|\w\w-\w\w|)static\/app/)?":".concat(o.appBuild||0):"",c=o.buildPushNumber?".".concat(o.buildPushNumber):"",l="/@".concat(o.buildNumber).concat(c).concat(s),p=t.substr(0,i),f=t.substr(i);return"".concat(p).concat(l).concat(f)}function l(t,s){var l=u({appBuild:e,buildPushNumber:n,buildNumber:r,rootPath:i,locale:a},arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}),p=t||"/",f=s?"?".concat((0,o.stringify)(s)):"";return"/"!==p.charAt(0)&&(p="/".concat(p)),c(p="".concat(l.rootPath||"","/").concat(l.locale).concat(p).concat(f),l)}function p(t,e){return l("/help",t,e)}return{createAppDocsURL:function(t,e,r){var n=e.appName,o=e.appVersion;return p({location:"[".concat(n,":").concat(o,"]").concat(t)},r)},createDocsURL:function(t,e){return p({location:t},e)},createRESTURL:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};if(/^http[s]?:\/\//.test(t))return t;var n,o,a=r.splunkdPath||s||"";return/^\/.*/.test(t)?/^\/services/.test(t)?"".concat(a).concat(t):t:e.app||e.owner?(n=e.sharing?"nobody":e.owner?encodeURIComponent(e.owner):"-",o="system"===e.sharing?"system":e.app?encodeURIComponent(e.app):"-","".concat(a,"/servicesNS/").concat(n,"/").concat(o,"/").concat(t)):"".concat(a,"/services/").concat(t)},createStaticURL:function(t){for(var e=arguments.length,r=new Array(e>1?e-1:0),n=1;n<e;n++)r[n-1]=arguments[n];return l.apply(void 0,["static/".concat(t)].concat(r))},createURL:l,insertCacheBuster:c}}(function(t){if(t&&t.__esModule)return t;if(null===t||"object"!==n(t)&&"function"!=typeof t)return{default:t};var e=a();if(e&&e.has(t))return e.get(t);var r={},o=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var i in t)if(Object.prototype.hasOwnProperty.call(t,i)){var u=o?Object.getOwnPropertyDescriptor(t,i):null;u&&(u.get||u.set)?Object.defineProperty(r,i,u):r[i]=t[i]}return r.default=t,e&&e.set(t,r),r}(r(2411))),l=(c.createAppDocsURL,c.createDocsURL,c.createRESTURL);c.createStaticURL,c.createURL;c.insertCacheBuster,e.Ng=l},9327:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getEntry=function(t){if("undefined"==typeof document)return null;var e=new RegExp("(^|; ?)".concat(t,"=([^;]+)")),r=null;try{var n=document.cookie.match(e);r=n?n[2]:null}catch(t){}return r}},361:(t,e,r)=>{var n=r(2427),o=r(8003),a=r(7407),i=r(2536),u=r(9097);function s(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}s.prototype.clear=n,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=i,s.prototype.set=u,t.exports=s},259:(t,e,r)=>{var n=r(4958),o=r(7975),a=r(5139),i=r(6774),u=r(7230);function s(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}s.prototype.clear=n,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=i,s.prototype.set=u,t.exports=s},6299:(t,e,r)=>{var n=r(3446)(r(6695),"Map");t.exports=n},3209:(t,e,r)=>{var n=r(6975),o=r(7899),a=r(8554),i=r(1029),u=r(6053);function s(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}s.prototype.clear=n,s.prototype.delete=o,s.prototype.get=a,s.prototype.has=i,s.prototype.set=u,t.exports=s},4380:(t,e,r)=>{var n=r(6695).Symbol;t.exports=n},1743:t=>{t.exports=function(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}},2112:(t,e,r)=>{var n=r(4904);t.exports=function(t,e){for(var r=t.length;r--;)if(n(t[r][0],e))return r;return-1}},435:(t,e,r)=>{var n=r(8637),o=r(2351);t.exports=function(t,e){for(var r=0,a=(e=n(e,t)).length;null!=t&&r<a;)t=t[o(e[r++])];return r&&r==a?t:void 0}},7486:(t,e,r)=>{var n=r(4380),o=r(9527),a=r(5736),i=n?n.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?"[object Undefined]":"[object Null]":i&&i in Object(t)?o(t):a(t)}},1326:(t,e,r)=>{var n=r(9657),o=r(5070),a=r(4538),i=r(6154),u=/^\[object .+?Constructor\]$/,s=Function.prototype,c=Object.prototype,l=s.toString,p=c.hasOwnProperty,f=RegExp("^"+l.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!a(t)||o(t))&&(n(t)?f:u).test(i(t))}},9968:(t,e,r)=>{var n=r(4380),o=r(1743),a=r(6753),i=r(9530),u=n?n.prototype:void 0,s=u?u.toString:void 0;t.exports=function t(e){if("string"==typeof e)return e;if(a(e))return o(e,t)+"";if(i(e))return s?s.call(e):"";var r=e+"";return"0"==r&&1/e==-1/0?"-0":r}},8637:(t,e,r)=>{var n=r(6753),o=r(3865),a=r(8960),i=r(708);t.exports=function(t,e){return n(t)?t:o(t,e)?[t]:a(i(t))}},8793:(t,e,r)=>{var n=r(6695)["__core-js_shared__"];t.exports=n},8552:(t,e,r)=>{var n="object"==typeof r.g&&r.g&&r.g.Object===Object&&r.g;t.exports=n},8561:(t,e,r)=>{var n=r(3766);t.exports=function(t,e){var r=t.__data__;return n(e)?r["string"==typeof e?"string":"hash"]:r.map}},3446:(t,e,r)=>{var n=r(1326),o=r(7983);t.exports=function(t,e){var r=o(t,e);return n(r)?r:void 0}},9527:(t,e,r)=>{var n=r(4380),o=Object.prototype,a=o.hasOwnProperty,i=o.toString,u=n?n.toStringTag:void 0;t.exports=function(t){var e=a.call(t,u),r=t[u];try{t[u]=void 0;var n=!0}catch(t){}var o=i.call(t);return n&&(e?t[u]=r:delete t[u]),o}},7983:t=>{t.exports=function(t,e){return null==t?void 0:t[e]}},2427:(t,e,r)=>{var n=r(1027);t.exports=function(){this.__data__=n?n(null):{},this.size=0}},8003:t=>{t.exports=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e}},7407:(t,e,r)=>{var n=r(1027),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;if(n){var r=e[t];return"__lodash_hash_undefined__"===r?void 0:r}return o.call(e,t)?e[t]:void 0}},2536:(t,e,r)=>{var n=r(1027),o=Object.prototype.hasOwnProperty;t.exports=function(t){var e=this.__data__;return n?void 0!==e[t]:o.call(e,t)}},9097:(t,e,r)=>{var n=r(1027);t.exports=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=n&&void 0===e?"__lodash_hash_undefined__":e,this}},3865:(t,e,r)=>{var n=r(6753),o=r(9530),a=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,i=/^\w*$/;t.exports=function(t,e){if(n(t))return!1;var r=typeof t;return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!o(t))||i.test(t)||!a.test(t)||null!=e&&t in Object(e)}},3766:t=>{t.exports=function(t){var e=typeof t;return"string"==e||"number"==e||"symbol"==e||"boolean"==e?"__proto__"!==t:null===t}},5070:(t,e,r)=>{var n,o=r(8793),a=(n=/[^.]+$/.exec(o&&o.keys&&o.keys.IE_PROTO||""))?"Symbol(src)_1."+n:"";t.exports=function(t){return!!a&&a in t}},4958:t=>{t.exports=function(){this.__data__=[],this.size=0}},7975:(t,e,r)=>{var n=r(2112),o=Array.prototype.splice;t.exports=function(t){var e=this.__data__,r=n(e,t);return!(r<0||(r==e.length-1?e.pop():o.call(e,r,1),--this.size,0))}},5139:(t,e,r)=>{var n=r(2112);t.exports=function(t){var e=this.__data__,r=n(e,t);return r<0?void 0:e[r][1]}},6774:(t,e,r)=>{var n=r(2112);t.exports=function(t){return n(this.__data__,t)>-1}},7230:(t,e,r)=>{var n=r(2112);t.exports=function(t,e){var r=this.__data__,o=n(r,t);return o<0?(++this.size,r.push([t,e])):r[o][1]=e,this}},6975:(t,e,r)=>{var n=r(361),o=r(259),a=r(6299);t.exports=function(){this.size=0,this.__data__={hash:new n,map:new(a||o),string:new n}}},7899:(t,e,r)=>{var n=r(8561);t.exports=function(t){var e=n(this,t).delete(t);return this.size-=e?1:0,e}},8554:(t,e,r)=>{var n=r(8561);t.exports=function(t){return n(this,t).get(t)}},1029:(t,e,r)=>{var n=r(8561);t.exports=function(t){return n(this,t).has(t)}},6053:(t,e,r)=>{var n=r(8561);t.exports=function(t,e){var r=n(this,t),o=r.size;return r.set(t,e),this.size+=r.size==o?0:1,this}},704:(t,e,r)=>{var n=r(9776);t.exports=function(t){var e=n(t,(function(t){return 500===r.size&&r.clear(),t})),r=e.cache;return e}},1027:(t,e,r)=>{var n=r(3446)(Object,"create");t.exports=n},5736:t=>{var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},6695:(t,e,r)=>{var n=r(8552),o="object"==typeof self&&self&&self.Object===Object&&self,a=n||o||Function("return this")();t.exports=a},8960:(t,e,r)=>{var n=r(704),o=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,a=/\\(\\)?/g,i=n((function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(o,(function(t,r,n,o){e.push(n?o.replace(a,"$1"):r||t)})),e}));t.exports=i},2351:(t,e,r)=>{var n=r(9530);t.exports=function(t){if("string"==typeof t||n(t))return t;var e=t+"";return"0"==e&&1/t==-1/0?"-0":e}},6154:t=>{var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},4904:t=>{t.exports=function(t,e){return t===e||t!=t&&e!=e}},2281:(t,e,r)=>{var n=r(435);t.exports=function(t,e,r){var o=null==t?void 0:n(t,e);return void 0===o?r:o}},6753:t=>{var e=Array.isArray;t.exports=e},9657:(t,e,r)=>{var n=r(7486),o=r(4538);t.exports=function(t){if(!o(t))return!1;var e=n(t);return"[object Function]"==e||"[object GeneratorFunction]"==e||"[object AsyncFunction]"==e||"[object Proxy]"==e}},4538:t=>{t.exports=function(t){var e=typeof t;return null!=t&&("object"==e||"function"==e)}},7101:t=>{t.exports=function(t){return null!=t&&"object"==typeof t}},9530:(t,e,r)=>{var n=r(7486),o=r(7101);t.exports=function(t){return"symbol"==typeof t||o(t)&&"[object Symbol]"==n(t)}},9776:(t,e,r)=>{var n=r(3209);function o(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError("Expected a function");var r=function(){var n=arguments,o=e?e.apply(this,n):n[0],a=r.cache;if(a.has(o))return a.get(o);var i=t.apply(this,n);return r.cache=a.set(o,i)||a,i};return r.cache=new(o.Cache||n),r}o.Cache=n,t.exports=o},708:(t,e,r)=>{var n=r(9968);t.exports=function(t){return null==t?"":n(t)}},9335:t=>{function e(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,n,o,a){n=n||"&",o=o||"=";var i={};if("string"!=typeof t||0===t.length)return i;var u=/\+/g;t=t.split(n);var s=1e3;a&&"number"==typeof a.maxKeys&&(s=a.maxKeys);var c=t.length;s>0&&c>s&&(c=s);for(var l=0;l<c;++l){var p,f,v,d,h=t[l].replace(u,"%20"),y=h.indexOf(o);y>=0?(p=h.substr(0,y),f=h.substr(y+1)):(p=h,f=""),v=decodeURIComponent(p),d=decodeURIComponent(f),e(i,v)?r(i[v])?i[v].push(d):i[v]=[i[v],d]:i[v]=d}return i};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},8795:t=>{var e=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,a,i,u){return a=a||"&",i=i||"=",null===t&&(t=void 0),"object"==typeof t?n(o(t),(function(o){var u=encodeURIComponent(e(o))+i;return r(t[o])?n(t[o],(function(t){return u+encodeURIComponent(e(t))})).join(a):u+encodeURIComponent(e(t[o]))})).join(a):u?encodeURIComponent(e(u))+i+encodeURIComponent(e(t)):""};var r=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function n(t,e){if(t.map)return t.map(e);for(var r=[],n=0;n<t.length;n++)r.push(e(t[n],n));return r}var o=Object.keys||function(t){var e=[];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&e.push(r);return e}},7735:(t,e,r)=>{e.decode=e.parse=r(9335),e.encode=e.stringify=r(8795)}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var a=e[n]={exports:{}};return t[n](a,a.exports,r),a.exports}r.d=(t,e)=>{for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),r.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var n={};(()=>{r.d(n,{Z:()=>l});var t=r(2411),e=r(7212);function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function a(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,n)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?a(Object(r),!0).forEach((function(e){u(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function u(t,e,r){return(e=c(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function s(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,c(n.key),n)}}function c(t){var e=function(t,e){if("object"!==o(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var n=r.call(t,"string");if("object"!==o(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(t)}(t);return"symbol"===o(e)?e:String(e)}const l=function(){function r(t,e,n,o,a,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,r),this.globalConfig=t,this.serviceName=e,this.state=n,this.mode=o,this.util=a,this.groupName=i}var n,o;return n=r,(o=[{key:"onCreate",value:function(){if("create"===this.mode&&(this._isTenantConfigured(),"msg_trace"===this.serviceName&&this._setValue("start_date_time",this._getDefaultMessageTraceStartDate()),"mgmt_activity"===this.serviceName&&this._setValue("start_date_time",this._getDefaultMgmtStartDate())),"edit"===this.mode&&("msg_trace"!==this.serviceName&&this.util.setState((function(t){return i(i({},t),{},{warningMsg:"Updating Content-Type is same as creating a new Input."})})),"msg_trace"===this.serviceName&&"continuously_monitor"===this.state.data.input_mode.value&&this.util.setState((function(t){return i(i({},t),{},{warningMsg:"Updating Query Window Size may lead to data duplication for the first window if the data collection of previous window was not completed."})})),"msg_trace"===this.serviceName)){var t=document.querySelector('[type="button"][data-test-value="continuously_monitor"]'),e=document.querySelector('[type="button"][data-test-value="index_once"]');t.disabled=!0,e.disabled=!0}}},{key:"onChange",value:function(t,e,r){var n="";"input_mode"===t&&(n=r.data.input_mode.value,this.toggleObject(n))}},{key:"onRender",value:function(){if("msg_trace"===this.serviceName){var t=this.state.data.input_mode.value;this.toggleObject(t)}}},{key:"onSave",value:function(t){var e,r=this;if(e=t.input_mode,"mgmt_activity"===this.serviceName){var n=Date.parse(new Date(t.start_date_time+"Z").toUTCString());if(Date.parse((new Date).toUTCString())-n<0)return this.util.setErrorMsg("The Start date/time cannot be in the future"),!1;t.start_date_time||this.util.setState((function(t){var e=i({},t.data);return e.start_date_time.value=r._getDefaultMgmtStartDate(),{data:e}}))}if("msg_trace"===this.serviceName&&"index_once"===e){var o=t.start_date_time,a=t.end_date_time;if(!o)return this.util.setErrorMsg("Start date/time is required for an Index Once input."),!1;if(!a)return this.util.setErrorMsg("End date/time is required for an Index Once input."),!1;this._setValue("interval","-1"),this._setValue("query_window_size",void 0),this._setValue("delay_throttle",void 0)}if("msg_trace"===this.serviceName&&"continuously_monitor"===e){var u=t.interval,s=t.query_window_size,c=t.delay_throttle,l=t.start_date_time;if(!u)return this.util.setErrorMsg("Field Interval (seconds) is required"),!1;if(u<1||u>864e3||!/^\d+$/.test(u))return this.util.setErrorMsg("Interval should be in the range of 1 to 864000 seconds."),!1;if(!s)return this.util.setErrorMsg("Field Query Window Size (minutes) is required"),!1;if(!/^\d+$/.test(s))return this.util.setErrorMsg("Query Window Size should be positive number (in minutes)."),!1;if(s<1||s>14400)return this.util.setErrorMsg("Query Window Size should be in the range of 1 to 14400 minutes."),!1;if(!c)return this.util.setErrorMsg("Field Delay Throttle (minutes) is required"),!1;if(!/^\d+$/.test(c))return this.util.setErrorMsg("Delay Throttle should be positive number (in minutes)."),!1;if(c<0||c>14400)return this.util.setErrorMsg("Delay Throttle should be in the range of 0 to 14400 minutes."),!1;l||this._setValue("start_date_time",this._getDefaultMessageTraceStartDate()),this._setValue("end_date_time",void 0)}return!0}},{key:"toggleObject",value:function(t){var e=!1,r=!0;"index_once"===t?(e=!0,r=!1,document.querySelector('[data-test="collapsible-panel"]').style.display="none"):(e=!1,r=!0,document.querySelector('[data-test="collapsible-panel"]').style.display="block"),this.util.setState((function(t){var n=i({},t.data);return n.end_date_time.display=e,n.interval.display=r,{data:n}}))}},{key:"_setValue",value:function(t,e){this.util.setState((function(r){var n=i({},r.data);return n[t].value=e,{data:n}}))}},{key:"_getDefaultMessageTraceStartDate",value:function(){var t=new Date;return t.setDate(t.getDate()-5),t.toISOString().substring(0,19)}},{key:"_getDefaultMgmtStartDate",value:function(){var t=new Date;return t.setHours(t.getHours()-4),t.toISOString().substring(0,19)}},{key:"_isTenantConfigured",value:function(){var r=(0,e.Ng)("splunk_ta_o365_tenants?output_mode=json",{app:"splunk_ta_o365",sharing:"app"});try{var n=new XMLHttpRequest;n.open("GET",r,!1),n.setRequestHeader("X-Splunk-Form-Key",t.CSRFToken),n.setRequestHeader("X-Requested-With","XMLHttpRequest"),n.setRequestHeader("Content-Type","application/json"),n.send(),200===n.status?0===JSON.parse(n.responseText).entry.length&&this.util.setErrorMsg("Please create a Tenant first under the Tenant page."):this.util.setErrorMsg("Error while fetching Tenant")}catch(t){this.util.setErrorMsg("Error while fetching Tenant")}}}])&&s(n.prototype,o),Object.defineProperty(n,"prototype",{writable:!1}),r}()})();var o=n.Z;export{o as default};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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LFFBR2IsSUFDSSxJQUFNaU4sRUFBUyxJQUFJQyxlQUNuQkQsRUFBT0UsS0FBSyxNQUFPSCxHQUFLLEdBQ3hCQyxFQUFPRyxpQkFBaUIsb0JBQXFCdlMsRUFBQUEsV0FDN0NvUyxFQUFPRyxpQkFBaUIsbUJBQW9CLGtCQUM1Q0gsRUFBT0csaUJBQWlCLGVBQWdCLG9CQUN4Q0gsRUFBT0ksT0FFZSxNQUFsQkosRUFBT0ssT0FFbUIsSUFEYkMsS0FBS25FLE1BQU02RCxFQUFPTyxjQUN0QnhMLE1BQU1yRyxRQUNYbUcsS0FBS3NJLEtBQUt5QixZQUFZLHVEQUcxQi9KLEtBQUtzSSxLQUFLeUIsWUFBWSw4QkFFOUIsQ0FBRSxNQUFPNEIsR0FDTDNMLEtBQUtzSSxLQUFLeUIsWUFBWSw4QkFDMUIsQ0FDSixNLG9FQUFDOUIsQ0FBQSxDQXRQVSxFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvQHNwbHVuay9zcGx1bmstdXRpbHMvY29uZmlnLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL0BzcGx1bmsvc3BsdW5rLXV0aWxzL3VybC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9Ac3BsdW5rL3VpLXV0aWxzL2Nvb2tpZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX0hhc2guanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19MaXN0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXAuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2FycmF5TWFwLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYXNzb2NJbmRleE9mLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fYmFzZUdldC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2Jhc2VHZXRUYWcuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlSXNOYXRpdmUuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19iYXNlVG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19jYXN0UGF0aC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFJhd1RhZy5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2dldFZhbHVlLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaENsZWFyLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaERlbGV0ZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19oYXNoSGFzLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faGFzaFNldC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2lzS2V5LmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNLZXlhYmxlLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9faXNNYXNrZWQuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19saXN0Q2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX2xpc3RDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21hcENhY2hlR2V0LmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9fbWFwQ2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX21lbW9pemVDYXBwZWQuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19uYXRpdmVDcmVhdGUuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19vYmplY3RUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvbG9kYXNoL190b0tleS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvX3RvU291cmNlLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9lcS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvZ2V0LmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0FycmF5LmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc09iamVjdC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvaXNPYmplY3RMaWtlLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL2xvZGFzaC9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvbWVtb2l6ZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9sb2Rhc2gvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvLi9ub2RlX21vZHVsZXMvcXVlcnlzdHJpbmctZXMzL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS8uL25vZGVfbW9kdWxlcy9xdWVyeXN0cmluZy1lczMvZW5jb2RlLmpzIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vbm9kZV9tb2R1bGVzL3F1ZXJ5c3RyaW5nLWVzMy9pbmRleC5qcyIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vc3BsdW5rX3RhX28zNjUvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9zcGx1bmtfdGFfbzM2NS93ZWJwYWNrL3J1bnRpbWUvaGFzT3duUHJvcGVydHkgc2hvcnRoYW5kIiwid2VicGFjazovL3NwbHVua190YV9vMzY1Ly4vanMvaW5wdXRfaG9vay5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZXh0cmFjdEFwcE5hbWUgPSBleHRyYWN0QXBwTmFtZTtcbmV4cG9ydHMudmVyc2lvbkxhYmVsID0gZXhwb3J0cy51c2VybmFtZSA9IGV4cG9ydHMuc3BsdW5rZFBhdGggPSBleHBvcnRzLnNlcnZlclRpbWV6b25lSW5mbyA9IGV4cG9ydHMucm9vdFBhdGggPSBleHBvcnRzLnBvcnROdW1iZXIgPSBleHBvcnRzLmxvY2FsZSA9IGV4cG9ydHMuY29uZmlnID0gZXhwb3J0cy5idWlsZFB1c2hOdW1iZXIgPSBleHBvcnRzLmJ1aWxkTnVtYmVyID0gZXhwb3J0cy5hcHBCdWlsZCA9IGV4cG9ydHMuYXBwID0gZXhwb3J0cy5pc0F2YWlsYWJsZSA9IGV4cG9ydHMuQ1NSRlRva2VuID0gdm9pZCAwO1xuXG52YXIgX2dldCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImxvZGFzaC9nZXRcIikpO1xuXG52YXIgX2Nvb2tpZSA9IHJlcXVpcmUoXCJAc3BsdW5rL3VpLXV0aWxzL2Nvb2tpZVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgXCJkZWZhdWx0XCI6IG9iaiB9OyB9XG5cbi8qKlxuICogQSBzZXQgb2YgY29uc3RhbnRzIGRlc2NyaWJpbmcgdGhlIHNlcnZlciBlbnZpcm9ubWVudC4gSWYgd2luZG93LiRDIGlzbid0IGRlZmluZWQsIG1vc3Qgb2YgdGhlXG4gKiB2YWx1ZXMgb24gdGhpcyBwYWdlIGFyZSBhbHNvIHVuZGVmaW5lZC5cbiAqXG4gKiBUaGUgY29uc3RhbnRzIG1heSBiZSBpbXBvcnRlZCBpbmRlcGVuZGVudGx5LCBzdWNoIGFzOlxuICogYGBgXG4gKiBpbXBvcnQgeyBidWlsZE51bWJlciwgbG9jYWxlLCByb290UGF0aCB9IGZyb20gJ0BzcGx1bmsvc3BsdW5rLXV0aWxzL2NvbmZpZyc7XG4gKiBAZmlsZVxuICovXG5cbi8qIGdsb2JhbCBnbG9iYWwgKi9cbi8vIElmIHRoaXMgaXMgcnVubmluZyBpbiBOb2RlLCB0aGUgcm9vdCBpcyB0aGUgYGdsb2JhbGAgb2JqZWN0LiBJZiBpdCdzIHJ1bm5pbmcgaW4gdGhlIGJyb3dzZXIsXG4vLyByb290IGlzIHRoZSBgd2luZG93YCBvYmplY3QuXG52YXIgcm9vdCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93O1xuLyoqXG4gKiBBIGZ1bmN0aW9uIHRvIGdldCBhICRDIHByb3AuIFJldHVybnMgdW5kZWZpbmVkIGlmICRDIGlzbid0IGF2YWlsYWJsZS5cbiAqIEBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gZ2V0JENFbnRyeShwcm9wKSB7XG4gIHJldHVybiAoMCwgX2dldFtcImRlZmF1bHRcIl0pKHJvb3QsIFsnJEMnLCBwcm9wXSk7XG59XG4vKipcbiAqIFRoZSBDU1JGIHRva2VuLiBUaGlzIG1heSBiZSBgbnVsbGAgaWYgdGhlIHRva2VuIGlzbid0IGZvdW5kIGluIHRoZSBjb29raWUuXG4gKlxuICogQGNvbnN0YW50XG4gKlxuICogQHB1YmxpY1xuICovXG5cblxudmFyIENTUkZUb2tlbiA9ICgwLCBfY29va2llLmdldEVudHJ5KShcInNwbHVua3dlYl9jc3JmX3Rva2VuX1wiLmNvbmNhdChnZXQkQ0VudHJ5KCdNUlNQQVJLTEVfUE9SVF9OVU1CRVInKSkpO1xuLyoqXG4gKiBJZiBgd2luZG93LiRDYCBpcyB1bmRlZmluZWQgb3IgaW52YWxpZCwgaXNBdmFpbGFibGUgaXMgYGZhbHNlYC5cbiAqIEBjb25zdGFudFxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMuQ1NSRlRva2VuID0gQ1NSRlRva2VuO1xudmFyIGlzQXZhaWxhYmxlID0gISFnZXQkQ0VudHJ5KCdTUExVTktEX1BBVEgnKTtcbi8qKlxuICogRXh0cmFjdHMgYXBwIG5hbWUgZnJvbSB0aGUgVVJMLiBUbyBlbmFibGUgdGVzdGluZywgdGhpcyBmdW5jdGlvbiBpcyBleHBvcnRlZCBhbmQgcGF0aG5hbWVcbiAqIGNhbiBiZSBvdmVycmlkZGVuLlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmlzQXZhaWxhYmxlID0gaXNBdmFpbGFibGU7XG5cbmZ1bmN0aW9uIGV4dHJhY3RBcHBOYW1lKCkge1xuICB2YXIgcGF0aG5hbWUgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6ICgwLCBfZ2V0W1wiZGVmYXVsdFwiXSkocm9vdCwgWydkb2N1bWVudCcsICdsb2NhdGlvbicsICdwYXRobmFtZSddLCAnJyk7XG4gIHZhciBwYXRoTWF0Y2ggPSBwYXRobmFtZS5tYXRjaCgvXFx3XFx3Llxcd1xcd1xcLyhhcHB8bWFuYWdlcilcXC8oW14vXSspLyk7XG4gIHJldHVybiBwYXRoTWF0Y2ggPyBwYXRoTWF0Y2hbMl0gOiB1bmRlZmluZWQ7XG59XG4vKipcbiAqIFRoZSBuYW1lIG9mIHRoZSBjdXJyZW50IGFwcCBhcyBzaG93biBpbiB0aGUgVVJMIChub3QgdGhlIGRpc3BsYXkgbmFtZSkuXG4gKiBAY29uc3RhbnRcbiAqIEBwdWJsaWNcbiAqL1xuXG5cbnZhciBhcHAgPSBleHRyYWN0QXBwTmFtZSgpO1xuLyoqXG4gKiBUaGUgYnVpbGQgbnVtYmVyIG9mIHRoZSBjdXJyZW50IGFwcC5cbiAqIEBjb25zdGFudFxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMuYXBwID0gYXBwO1xudmFyIGFwcEJ1aWxkID0gZ2V0JENFbnRyeSgnQVBQX0JVSUxEJyk7XG4vKipcbiAqIEEgaGFzaCBzdHJpbmcgb2YgdGhlIGN1cnJlbnQgYnVpbGQuXG4gKiBAY29uc3RhbnRcbiAqIEB0eXBlIHtzdHJpbmd9XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5hcHBCdWlsZCA9IGFwcEJ1aWxkO1xudmFyIGJ1aWxkTnVtYmVyID0gZ2V0JENFbnRyeSgnQlVJTERfTlVNQkVSJyk7XG4vKipcbiAqIEEgaW5jcmVtZW50ZWQgbnVtYmVyIGNvbmZpZ3VyZWQgcGVyIGluc3RhbmNlLiBEZWZhdWx0cyB0byAwLlxuICogQGNvbnN0YW50XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5idWlsZE51bWJlciA9IGJ1aWxkTnVtYmVyO1xudmFyIGJ1aWxkUHVzaE51bWJlciA9IGdldCRDRW50cnkoJ0JVSUxEX1BVU0hfTlVNQkVSJyk7XG4vKipcbiAqIFRoZSBmdWxsIG9iamVjdCBvZiB3aW5kb3cuJEMuXG4gKiBAY29uc3RhbnRcbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLmJ1aWxkUHVzaE51bWJlciA9IGJ1aWxkUHVzaE51bWJlcjtcbnZhciBjb25maWcgPSAoMCwgX2dldFtcImRlZmF1bHRcIl0pKHJvb3QsICckQycpO1xuLyoqXG4gKiBUaGUgY3VycmVudCBsb2NhbGUsIHN1Y2ggYXMgXCJlbi1VU1wiLlxuICogQGNvbnN0YW50XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5jb25maWcgPSBjb25maWc7XG52YXIgbG9jYWxlID0gZ2V0JENFbnRyeSgnTE9DQUxFJyk7XG4vKipcbiAqIFRoZSBwb3J0IHRoYXQgU3BsdW5rIFdlYiBpcyB1c2luZy4gRGVmYXVsdHMgdG8gODAwMC5cbiAqIEBjb25zdGFudFxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMubG9jYWxlID0gbG9jYWxlO1xudmFyIHBvcnROdW1iZXIgPSBnZXQkQ0VudHJ5KCdNUlNQQVJLTEVfUE9SVF9OVU1CRVInKTtcbi8qKlxuICogU3BsdW5rIG1heSBub3QgYmUgcnVubmluZyBpbiB0aGUgcm9vdCBkaXJlY3RvcnksIHNvIHRoZSBsb2NhbGUgbWF5IG5vdCBiZSB0aGUgZmlyc3QgZWxlbWVudFxuICogaW4gdGhlIHBhdGhuYW1lLiBJZiBpdCBpcyBydW5uaW5nIGluIHRoZSByb290IGRpcmVjdG9yeSwgYGBgcm9vdFBhdGhgYGAgaXMgYW4gZW1wdHlcbiAqIHN0cmluZy4gT3RoZXJ3aXNlIGl0IHJldHVybnMgdGhlIHJvb3QuIEZvciBleGFtcGxlLCBpbiB0aGUgcGFnZVxuICogYGBgXG4gKiBodHRwOi8vc3BsdW5rLmRvbWFpbi5jb20vbXktcm9vdC1kaXIvZW4tVVMvYXBwL3NlYXJjaC9zZWFyY2hcbiAqIGBgYFxuICogYGBgcm9vdFBhdGhgYGAgaXMgc2V0IHRvIGBgYCdteS1yb290LWRpcidgYGAuXG4gKiBAY29uc3RhbnRcbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnBvcnROdW1iZXIgPSBwb3J0TnVtYmVyO1xudmFyIHJvb3RQYXRoID0gZ2V0JENFbnRyeSgnTVJTUEFSS0xFX1JPT1RfUEFUSCcpO1xuLyoqXG4gKiBUaGUgc2VyaWFsaXplZCBTcGx1bmsgRW50ZXJwcmlzZSB0aW1lIHpvbmUgZGF0YS4gVGhpcyBjYW4gYmUgcGFyc2VkIGZvciB1c2UgaW4gZm9ybWF0dGluZyBFcG9jaCB0aW1lc1xuICogb24gdGhlIGNsaWVudC5cbiAqIEBjb25zdGFudFxuICogQHB1YmxpY1xuICovXG5cbmV4cG9ydHMucm9vdFBhdGggPSByb290UGF0aDtcbnZhciBzZXJ2ZXJUaW1lem9uZUluZm8gPSBnZXQkQ0VudHJ5KCdTRVJWRVJfWk9ORUlORk8nKTtcbi8qKlxuICogVGhlIFNwbHVuayBXZWIgcHJveGluZyB0byBzcGx1bmtkLCBzdWNoIGFzIGBgYC9lbi1VUy9zcGx1bmtkL19fcmF3YGBgLlxuICogQGNvbnN0YW50XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy5zZXJ2ZXJUaW1lem9uZUluZm8gPSBzZXJ2ZXJUaW1lem9uZUluZm87XG52YXIgc3BsdW5rZFBhdGggPSBnZXQkQ0VudHJ5KCdTUExVTktEX1BBVEgnKTtcbi8qKlxuICogVGhlIHVzZXJuYW1lIG9mIHRoZSBjdXJyZW50IHVzZXIuXG4gKiBAY29uc3RhbnRcbiAqIEBwdWJsaWNcbiAqL1xuXG5leHBvcnRzLnNwbHVua2RQYXRoID0gc3BsdW5rZFBhdGg7XG52YXIgdXNlcm5hbWUgPSBnZXQkQ0VudHJ5KCdVU0VSTkFNRScpO1xuLyoqXG4gKiBUaGUgdmVyc2lvbiBsYWJlbCBvZiBzcGx1bmtkLlxuICogQGNvbnN0YW50XG4gKiBAcHVibGljXG4gKi9cblxuZXhwb3J0cy51c2VybmFtZSA9IHVzZXJuYW1lO1xudmFyIHZlcnNpb25MYWJlbCA9IGdldCRDRW50cnkoJ1ZFUlNJT05fTEFCRUwnKTtcbmV4cG9ydHMudmVyc2lvbkxhYmVsID0gdmVyc2lvbkxhYmVsOyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikgeyBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLndpdGhDb25maWcgPSB3aXRoQ29uZmlnO1xuZXhwb3J0cy5pbnNlcnRDYWNoZUJ1c3RlciA9IGV4cG9ydHMuY3JlYXRlVVJMID0gZXhwb3J0cy5jcmVhdGVTdGF0aWNVUkwgPSBleHBvcnRzLmNyZWF0ZVJFU1RVUkwgPSBleHBvcnRzLmNyZWF0ZURvY3NVUkwgPSBleHBvcnRzLmNyZWF0ZUFwcERvY3NVUkwgPSB2b2lkIDA7XG5cbnZhciBfcXVlcnlzdHJpbmcgPSByZXF1aXJlKFwicXVlcnlzdHJpbmdcIik7XG5cbnZhciBjb25maWcgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwiLi9jb25maWdcIikpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgX3R5cGVvZihvYmopICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBcImRlZmF1bHRcIjogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqW1wiZGVmYXVsdFwiXSA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHsgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KTsgaWYgKGVudW1lcmFibGVPbmx5KSBzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSk7IGtleXMucHVzaC5hcHBseShrZXlzLCBzeW1ib2xzKTsgfSByZXR1cm4ga2V5czsgfVxuXG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldICE9IG51bGwgPyBhcmd1bWVudHNbaV0gOiB7fTsgaWYgKGkgJSAyKSB7IG93bktleXMoT2JqZWN0KHNvdXJjZSksIHRydWUpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSk7IH0gZWxzZSBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMpIHsgT2JqZWN0LmRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhzb3VyY2UpKTsgfSBlbHNlIHsgb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBBIHNldCBvZiBmdW5jdGlvbnMgZm9yIGdlbmVyYXRpbmcgU3BsdW5rIFdlYiBVUkxzLiBUaGV5IG1heSBiZSBpbXBvcnRlZCBpbmRlcGVuZGVudGx5LCBzdWNoIGFzOlxuICogYGBgXG4gKiBpbXBvcnQgeyBjcmVhdGVVUkwsIGNyZWF0ZVN0YXRpY1VSTCB9IGZyb20gJ0BzcGx1bmsvc3BsdW5rLXV0aWxzL3VybCc7XG4gKiBgYGBcbiAqIEBmaWxlXG4gKi9cbmZ1bmN0aW9uIHdpdGhDb25maWcoX3JlZikge1xuICB2YXIgYXBwQnVpbGQgPSBfcmVmLmFwcEJ1aWxkLFxuICAgICAgYnVpbGROdW1iZXIgPSBfcmVmLmJ1aWxkTnVtYmVyLFxuICAgICAgYnVpbGRQdXNoTnVtYmVyID0gX3JlZi5idWlsZFB1c2hOdW1iZXIsXG4gICAgICBsb2NhbGUgPSBfcmVmLmxvY2FsZSxcbiAgICAgIHJvb3RQYXRoID0gX3JlZi5yb290UGF0aCxcbiAgICAgIHNwbHVua2RQYXRoID0gX3JlZi5zcGx1bmtkUGF0aDtcblxuICAvKipcbiAgICogSW5zZXJ0cyBhIGNhY2hlIGJ1c3RlciBpbnRvIHRoZSBnaXZlbiBwYXRoLlxuICAgKlxuICAgKiBAcGFyYW0gcGF0aCB7U3RyaW5nfSAtIFRoZSBwYXRoIHRvIGluamVjdCB0aGUgY2FjaGUgYnVzdGVyIGludG8uXG4gICAqIEBwYXJhbSBjb25maWdPcHRpb25zIHtPYmplY3R9IC0gQ29uZmlnIG9wdGlvbnMgaW5jbHVkaW5nIGBhcHBCdWlsZGAsIGBidWlsZFB1c2hOdW1iZXJgLCBhbmRcbiAgICogYGJ1aWxkTnVtYmVyYC4gRGVmYXVsdHMgdG8gdGhlIHZhbHVlcyBwcm92aWRlZCBieSBgQHNwbHVuay9zcGx1bmstdXRpbHMvY29uZmlnYC5cbiAgICogQHJldHVybiB7U3RyaW5nfSBSZXR1cm5zIHRoZSBwYXRoIHdpdGggdGhlIGNhY2hlIGJ1c3RlciBgL0A5ODUwZmM4N2E1ZWVgLlxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgZnVuY3Rpb24gaW5zZXJ0Q2FjaGVCdXN0ZXIocGF0aCkge1xuICAgIHZhciBjb25maWdPcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICAgIHZhciBvcHRpb25zID0gX29iamVjdFNwcmVhZCh7XG4gICAgICBhcHBCdWlsZDogYXBwQnVpbGQsXG4gICAgICBidWlsZFB1c2hOdW1iZXI6IGJ1aWxkUHVzaE51bWJlcixcbiAgICAgIGJ1aWxkTnVtYmVyOiBidWlsZE51bWJlclxuICAgIH0sIGNvbmZpZ09wdGlvbnMpO1xuXG4gICAgdmFyIG1hdGNoID0gcGF0aC5tYXRjaCgvKF58XFx3XFx3LVxcd1xcd1xcLylzdGF0aWNcXC8vKTtcblxuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgIHJldHVybiBwYXRoO1xuICAgIH1cblxuICAgIHZhciBpbnNlcnRQb3NpdGlvbiA9IG1hdGNoLmluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoIC0gMTtcbiAgICB2YXIgaXNBcHAgPSBwYXRoLm1hdGNoKC8oXnxcXHdcXHctXFx3XFx3fClzdGF0aWNcXC9hcHAvKTtcbiAgICB2YXIgYXBwQnVpbGRTdHJpbmcgPSBpc0FwcCA/IFwiOlwiLmNvbmNhdChvcHRpb25zLmFwcEJ1aWxkIHx8IDApIDogJyc7XG4gICAgdmFyIGJ1aWxkUHVzaFN0cmluZyA9IG9wdGlvbnMuYnVpbGRQdXNoTnVtYmVyID8gXCIuXCIuY29uY2F0KG9wdGlvbnMuYnVpbGRQdXNoTnVtYmVyKSA6ICcnO1xuICAgIHZhciBjYWNoZUJ1c3RlclN0cmluZyA9IFwiL0BcIi5jb25jYXQob3B0aW9ucy5idWlsZE51bWJlcikuY29uY2F0KGJ1aWxkUHVzaFN0cmluZykuY29uY2F0KGFwcEJ1aWxkU3RyaW5nKTtcbiAgICB2YXIgYmVmb3JlID0gcGF0aC5zdWJzdHIoMCwgaW5zZXJ0UG9zaXRpb24pO1xuICAgIHZhciBhZnRlciA9IHBhdGguc3Vic3RyKGluc2VydFBvc2l0aW9uKTtcbiAgICByZXR1cm4gXCJcIi5jb25jYXQoYmVmb3JlKS5jb25jYXQoY2FjaGVCdXN0ZXJTdHJpbmcpLmNvbmNhdChhZnRlcik7XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgYSBmdWxsIHBhdGggZm9yIHRoZSBjdXJyZW50IGFwcHNlcnZlciBsb2NhdGlvbi5cbiAgICogVGhpcyBpcyByZXF1aXJlZCBmb3IgcHJveHkgY29tcGF0aWJsaXR5LCBsb2NhbGl6YXRpb24sIGFuZCBjYWNoZSBidXN0aW5nLlxuICAgKlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogYGBganNcbiAgICogY3JlYXRlVVJMKCdhcHAvc2VhcmNoL2pvYicpOyAvLyBcIi9zcGx1bmsvZW4tVVMvYXBwL3NlYXJjaC9qb2JcIlxuICAgKiBjcmVhdGVVUkwoJy9hcHAvc2VhcmNoL2pvYicpOyAvLyBcIi9zcGx1bmsvZW4tVVMvYXBwL3NlYXJjaC9qb2JcIlxuICAgKiBjcmVhdGVVUkwoJ2FwcC9zZWFyY2gvam9iJywge2lkOjMsIHVzZXI6J21lJyB9KTsgLy8gXCIvc3BsdW5rL2VuLVVTL2FwcC9zZWFyY2gvam9iP2lkPTMmdXNlcj1tZVwiXG4gICAqIGBgYFxuICAgKlxuICAgKiBTdGF0aWMgcGF0aHMgYXJlIGF1Z21lbnRlZCB3aXRoIGEgY2FjaGUgYnVzdGVyOlxuICAgKiBgYGBqc1xuICAgKiBjcmVhdGVVUkwoJy9zdGF0aWMvanMvZm9vLmpzJyk7IC8vIFwiL3NwbHVuay9lbi1VUy9zdGF0aWMvQDEyMzQ1L2pzL2Zvby5qc1wiXG4gICAqIGNyZWF0ZVVSTCgnL3N0YXRpYy9qcy9mb28uanMnKTsgLy8gXCIvc3BsdW5rL2VuLVVTL3N0YXRpYy9AMTIzNDUuMS9qcy9mb28uanNcIlxuICAgKiBjcmVhdGVVUkwoJy9zdGF0aWMvYXBwL3NlYXJjaC9qcy9mb28uanMnKTsgLy8gXCIvc3BsdW5rL2VuLVVTL3N0YXRpYy9AMTIzNDUuMTowL2FwcC9zZWFyY2gvanMvZm9vLmpzXCJcbiAgICogYGBgXG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHBhdGgge1N0cmluZ31cbiAgICogQHBhcmFtIFtxdWVyeVBhcmFtc10ge09iamVjdH0gQW4gb2JqZWN0IG9mIHRoZSBxdWVyeSBwYXJhbWV0ZXJzLlxuICAgKiBAcGFyYW0gY29uZmlnT3B0aW9ucyB7T2JqZWN0fSAtIENvbmZpZyBvcHRpb25zIGluY2x1ZGluZyBgYXBwQnVpbGRgLCBgYnVpbGRQdXNoTnVtYmVyYCxcbiAgICogYGJ1aWxkTnVtYmVyYCwgYHJvb3RQYXRoYCwgYW5kIGBsb2NhbGVgLiBEZWZhdWx0cyB0byB0aGUgdmFsdWVzIHByb3ZpZGVkIGJ5XG4gICAqIGBAc3BsdW5rL3NwbHVuay11dGlscy9jb25maWdgLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFJldHVybnMgYSB2YWxpZCBVUkwgd2l0aCBjb3JyZWN0IHJvb3QgcGF0aCwgbG9jYWxlLCBhbmQgY2FjaGUgYnVzdGVyLlxuICAgKiBAYWxpYXMgY3JlYXRlVVJMXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gY3JlYXRlVVJMKHBhdGhJbnB1dCwgcXVlcnlQYXJhbXMpIHtcbiAgICB2YXIgY29uZmlnT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG5cbiAgICB2YXIgb3B0aW9ucyA9IF9vYmplY3RTcHJlYWQoe1xuICAgICAgYXBwQnVpbGQ6IGFwcEJ1aWxkLFxuICAgICAgYnVpbGRQdXNoTnVtYmVyOiBidWlsZFB1c2hOdW1iZXIsXG4gICAgICBidWlsZE51bWJlcjogYnVpbGROdW1iZXIsXG4gICAgICByb290UGF0aDogcm9vdFBhdGgsXG4gICAgICBsb2NhbGU6IGxvY2FsZVxuICAgIH0sIGNvbmZpZ09wdGlvbnMpO1xuXG4gICAgdmFyIHBhdGggPSBwYXRoSW5wdXQgfHwgJy8nO1xuICAgIHZhciBxdWVyeSA9IHF1ZXJ5UGFyYW1zID8gXCI/XCIuY29uY2F0KCgwLCBfcXVlcnlzdHJpbmcuc3RyaW5naWZ5KShxdWVyeVBhcmFtcykpIDogJyc7XG5cbiAgICBpZiAocGF0aC5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgcGF0aCA9IFwiL1wiLmNvbmNhdChwYXRoKTtcbiAgICB9XG5cbiAgICBwYXRoID0gXCJcIi5jb25jYXQob3B0aW9ucy5yb290UGF0aCB8fCAnJywgXCIvXCIpLmNvbmNhdChvcHRpb25zLmxvY2FsZSkuY29uY2F0KHBhdGgpLmNvbmNhdChxdWVyeSk7XG4gICAgcmV0dXJuIGluc2VydENhY2hlQnVzdGVyKHBhdGgsIG9wdGlvbnMpO1xuICB9XG4gIC8qKlxuICAgKiBQcmVwZW5kcyBTcGx1bmsgV2ViIHBhdGggaW5mb3JtYXRpb24gbmVjZXNzYXJ5IHRvIGFjY2VzcyBhIHN0YXRpYyBhc3NldC4gRm9yIGV4YW1wbGU6XG4gICAqIGBgYFxuICAgKiBjcmVhdGVVUkwoJ2ZvbnRzL3JvYm90by1yZWd1bGFyLXdlYmZvbnQud29mZicpOyAvLyBcIi9zcGx1bmsvZW4tVVMvc3RhdGljL0AxMjM0NS9mb250cy9yb2JvdG8tcmVndWxhci13ZWJmb250LndvZmZcIlxuICAgKiBjcmVhdGVVUkwoJ2FwcC9zZWFyY2gvZm9udHMvcm9ib3RvLXJlZ3VsYXItd2ViZm9udC53b2ZmJyk7IC8vIFwiL3NwbHVuay9lbi1VUy9zdGF0aWMvQDEyMzQ1LjE6MC9hcHAvc2VhcmNoL2ZvbnRzL3JvYm90by1yZWd1bGFyLXdlYmZvbnQud29mZlwiXG4gICAqIGBgYFxuICAgKiBAcHVibGljXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoIC0gQSBwYXRoIHRvIGEgc3RhdGljIHJlc291cmNlLlxuICAgKiBAcGFyYW0gW3F1ZXJ5UGFyYW1zXSB7T2JqZWN0fSBBbiBvYmplY3Qgb2YgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG4gICAqIEBwYXJhbSBjb25maWdPcHRpb25zIHtPYmplY3R9IC0gQ29uZmlnIG9wdGlvbnMgaW5jbHVkaW5nIGBhcHBCdWlsZGAsIGBidWlsZFB1c2hOdW1iZXJgLFxuICAgKiBgYnVpbGROdW1iZXJgLCBgcm9vdFBhdGhgLCBhbmQgYGxvY2FsZWAuIERlZmF1bHRzIHRvIHRoZSB2YWx1ZXMgcHJvdmlkZWQgYnlcbiAgICogYEBzcGx1bmsvc3BsdW5rLXV0aWxzL2NvbmZpZ2AuXG4gICAqIEByZXR1cm4ge1N0cmluZ30gUmV0dXJucyBhIHZhbGlkIFVSTCB3aXRoIGNvcnJlY3Qgcm9vdCBwYXRoLCBsb2NhbGUsIGFuZCBjYWNoZSBidXN0ZXIuXG4gICAqIEBhbGlhcyBjcmVhdGVTdGF0aWNVUkxcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVTdGF0aWNVUkwocGF0aCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIHJlc3RbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHJldHVybiBjcmVhdGVVUkwuYXBwbHkodm9pZCAwLCBbXCJzdGF0aWMvXCIuY29uY2F0KHBhdGgpXS5jb25jYXQocmVzdCkpO1xuICB9XG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZnVsbHkgcXVhbGlmaWVkIFVSTCBmb3IgdGhlIHNwZWNpZmllZCBlbmRwb2ludC5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIGBgYFxuICAgKiBjcmVhdGVSRVNUVVJMKCdzZXJ2ZXIvaW5mbycpOyAvLyBcIi9lbi1VUy9zcGx1bmtkL19fcmF3L3NlcnZpY2VzL3NlcnZlci9pbmZvXCJcbiAgICogY3JlYXRlUkVTVFVSTCgnc2F2ZWQvc2VhcmNoZXMnLCB7YXBwOiAnc2VhcmNoJ30pOyAvLyBcIi9lbi1VUy9zcGx1bmtkL19fcmF3L3NlcnZpY2VzTlMvLS9zZWFyY2gvc2F2ZWQvc2VhcmNoZXNcIlxuICAgKiBgYGBcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge1N0cmluZ30gZW5kcG9pbnQgLSBBbiBlbmRwb2ludCB0byBhIFJFU1QgQVBJLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMuYXBwXSAtIEFwcCBuYW1lc3BhY2UgdG8gdXNlLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gW29wdGlvbnMub3duZXJdIC0gVXNlciBuYW1lc3BhY2UgdG8gdXNlLlxuICAgKiBAcGFyYW0ge1N0aW5nfSBbb3B0aW9ucy5zaGFyaW5nXSAtIE11c3QgYmUgb25lIG9mIFsgJycgfCAnYXBwJyB8ICdnbG9iYWwnIHwgJ3N5c3RlbScgXS5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtjb25maWdPcHRpb25zXSAtIENvbmZpZyBvcHRpb25zIGluY2x1ZGluZyBgc3BsdW5rZFBhdGhgLiBEZWZhdWx0cyB0byB0aGUgdmFsdWVcbiAgICogIHByb3ZpZGVkIGJ5IGBAc3BsdW5rL3NwbHVuay11dGlscy9jb25maWdgLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBVUkwgb2YgdGhlIFJFU1QgQVBJIGVuZHBvaW50LlxuICAgKiBAYWxpYXMgY3JlYXRlUkVTVFVSTFxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVJFU1RVUkwoZW5kcG9pbnQpIHtcbiAgICB2YXIgbmFtZXNwYWNlT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIGNvbmZpZ09wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgLy8gUmV0dXJuIHRoZSBlbmRwb2ludCBpZiBpdCdzIGEgZnVsbCBwYXRoLlxuICAgIGlmICgvXmh0dHBbc10/OlxcL1xcLy8udGVzdChlbmRwb2ludCkpIHtcbiAgICAgIHJldHVybiBlbmRwb2ludDtcbiAgICB9XG5cbiAgICB2YXIgYmFzZVBhdGggPSBjb25maWdPcHRpb25zLnNwbHVua2RQYXRoIHx8IHNwbHVua2RQYXRoIHx8ICcnOyAvLyBJZiBpdCdzIGFuIGFic29sdXRlIHBhdGgsXG5cbiAgICBpZiAoL15cXC8uKi8udGVzdChlbmRwb2ludCkpIHtcbiAgICAgIC8vIEFwcGVuZCB0aGUgc3BsdW5rZFBhdGggaWYgdGhlIGVuZHBvaW50IGluY2x1ZGVzIHNlcnZpY2VzLiBPdGhlcndpc2UsIHJldHVybiB0aGUgZW5kcG9pbnQuXG4gICAgICByZXR1cm4gL15cXC9zZXJ2aWNlcy8udGVzdChlbmRwb2ludCkgPyBcIlwiLmNvbmNhdChiYXNlUGF0aCkuY29uY2F0KGVuZHBvaW50KSA6IGVuZHBvaW50O1xuICAgIH0gLy8gSWYgbmVpdGhlciBhbiBhcHAgbm9yIG93bmVyIGlzIHByb3ZpZGVkLCB1c2UgL3NlcnZpY2VzLyBlbmRwb2ludC5cblxuXG4gICAgaWYgKCFuYW1lc3BhY2VPcHRpb25zLmFwcCAmJiAhbmFtZXNwYWNlT3B0aW9ucy5vd25lcikge1xuICAgICAgcmV0dXJuIFwiXCIuY29uY2F0KGJhc2VQYXRoLCBcIi9zZXJ2aWNlcy9cIikuY29uY2F0KGVuZHBvaW50KTtcbiAgICB9IC8vIEJ1aWxkIGEgbmFtZXNwYWNlZCBwYXRoLlxuXG5cbiAgICB2YXIgb3duZXI7XG5cbiAgICBpZiAobmFtZXNwYWNlT3B0aW9ucy5zaGFyaW5nKSB7XG4gICAgICBvd25lciA9ICdub2JvZHknO1xuICAgIH0gZWxzZSBpZiAobmFtZXNwYWNlT3B0aW9ucy5vd25lcikge1xuICAgICAgb3duZXIgPSBlbmNvZGVVUklDb21wb25lbnQobmFtZXNwYWNlT3B0aW9ucy5vd25lcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG93bmVyID0gJy0nO1xuICAgIH1cblxuICAgIHZhciBhcHA7XG5cbiAgICBpZiAobmFtZXNwYWNlT3B0aW9ucy5zaGFyaW5nID09PSAnc3lzdGVtJykge1xuICAgICAgYXBwID0gJ3N5c3RlbSc7XG4gICAgfSBlbHNlIGlmIChuYW1lc3BhY2VPcHRpb25zLmFwcCkge1xuICAgICAgYXBwID0gZW5jb2RlVVJJQ29tcG9uZW50KG5hbWVzcGFjZU9wdGlvbnMuYXBwKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBwID0gJy0nO1xuICAgIH1cblxuICAgIHJldHVybiBcIlwiLmNvbmNhdChiYXNlUGF0aCwgXCIvc2VydmljZXNOUy9cIikuY29uY2F0KG93bmVyLCBcIi9cIikuY29uY2F0KGFwcCwgXCIvXCIpLmNvbmNhdChlbmRwb2ludCk7XG4gIH1cbiAgLyoqIENyZWF0ZSBkb2NzIFVSTCBwcml2YXRlIG1ldGhvZC5cbiAgICogQHBhcmFtIHtPYmplY3R9IFtwYXJhbXNdXG4gICAqIEBwcml2YXRlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gY3JlYXRlRG9jc1VSTEZyb21QYXJhbXMocGFyYW1zLCBjb25maWdPcHRpb25zKSB7XG4gICAgcmV0dXJuIGNyZWF0ZVVSTCgnL2hlbHAnLCBwYXJhbXMsIGNvbmZpZ09wdGlvbnMpO1xuICB9XG4gIC8qKiBDcmVhdGUgZG9jcyBVUkwgdXNpbmcgbG9jYXRpb24gc3RyaW5nLlxuICAgKiBGb3IgZXhhbXBsZTpcbiAgICogYGBgXG4gICAqIGNyZWF0ZURvY3NVUkwoJ2xlYXJubW9yZS50aW1lcmFuZ2UucGlja2VyJyk7IC8vIFwiL2VuLVVTL2hlbHA/bG9jYXRpb249bGVhcm5tb3JlLnRpbWVyYW5nZS5waWNrZXJcIlxuICAgKiBgYGBcbiAgICogQHB1YmxpY1xuICAgKiBAcGFyYW0ge1N0cmluZ30gbG9jYXRpb24gLSBSZXF1aXJlZC5cbiAgICogQHJldHVybiB7U3RyaW5nfSBUaGUgVVJMIG9mIHRoZSBTcGx1bmsgaGVscCBkb2N1bWVudC5cbiAgICogQGFsaWFzIGNyZWF0ZURvY3NVUkxcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVEb2NzVVJMKGxvY2F0aW9uLCBjb25maWdPcHRpb25zKSB7XG4gICAgcmV0dXJuIGNyZWF0ZURvY3NVUkxGcm9tUGFyYW1zKHtcbiAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgIH0sIGNvbmZpZ09wdGlvbnMpO1xuICB9XG4gIC8qKiBDcmVhdGUgYXBwIGRvY3MgVVJMIHVzaW5nIGxvY2F0aW9uIHN0cmluZywgd2hpY2ggbmVlZHMgdG8gYWRkIFthcHBOYW1lOmFwcFZlcnNpb25dIHByZWZpeCBiZWZvcmUgdGhlIGxvY2F0aW9uIHN0cmluZy5cbiAgICogRm9yIGV4YW1wbGU6XG4gICAqIGBgYFxuICAgKiBjcmVhdGVBcHBEb2NzVVJMKCdsZWFybm1vcmUudGltZXJhbmdlLnBpY2tlcicsIHsgYXBwTmFtZTogJ3NwbHVua19hcHBfYXdzJywgYXBwVmVyc2lvbjogJzUuMC4zJ30pOyAvLyBcIi9lbi1VUy9oZWxwP2xvY2F0aW9uPWxlYXJubW9yZS50aW1lcmFuZ2UucGlja2VyXCJcbiAgICogYGBgXG4gICAqIEBwdWJsaWNcbiAgICogQHBhcmFtIHtTdHJpbmd9IGxvY2F0aW9uIC0gUmVxdWlyZWQuXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gUmVxdWlyZWQuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBvcHRpb25zLmFwcE5hbWUgLSBBcHAgbmFtZS5cbiAgICogQHBhcmFtIHtTdHJpbmd9IG9wdGlvbnMuYXBwVmVyc2lvbiAtIEFwcCB2ZXJzaW9uLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IFRoZSBVUkwgb2YgdGhlIFNwbHVuayBhcHAgaGVscCBkb2N1bWVudC5cbiAgICogQGFsaWFzIGNyZWF0ZUFwcERvY3NVUkxcbiAgICovXG5cblxuICBmdW5jdGlvbiBjcmVhdGVBcHBEb2NzVVJMKGxvY2F0aW9uLCBfcmVmMiwgY29uZmlnT3B0aW9ucykge1xuICAgIHZhciBhcHBOYW1lID0gX3JlZjIuYXBwTmFtZSxcbiAgICAgICAgYXBwVmVyc2lvbiA9IF9yZWYyLmFwcFZlcnNpb247XG4gICAgcmV0dXJuIGNyZWF0ZURvY3NVUkxGcm9tUGFyYW1zKHtcbiAgICAgIGxvY2F0aW9uOiBcIltcIi5jb25jYXQoYXBwTmFtZSwgXCI6XCIpLmNvbmNhdChhcHBWZXJzaW9uLCBcIl1cIikuY29uY2F0KGxvY2F0aW9uKVxuICAgIH0sIGNvbmZpZ09wdGlvbnMpO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBjcmVhdGVBcHBEb2NzVVJMOiBjcmVhdGVBcHBEb2NzVVJMLFxuICAgIGNyZWF0ZURvY3NVUkw6IGNyZWF0ZURvY3NVUkwsXG4gICAgY3JlYXRlUkVTVFVSTDogY3JlYXRlUkVTVFVSTCxcbiAgICBjcmVhdGVTdGF0aWNVUkw6IGNyZWF0ZVN0YXRpY1VSTCxcbiAgICBjcmVhdGVVUkw6IGNyZWF0ZVVSTCxcbiAgICBpbnNlcnRDYWNoZUJ1c3RlcjogaW5zZXJ0Q2FjaGVCdXN0ZXJcbiAgfTtcbn1cblxudmFyIF93aXRoQ29uZmlnID0gd2l0aENvbmZpZyhjb25maWcpLFxuICAgIGNyZWF0ZUFwcERvY3NVUkwgPSBfd2l0aENvbmZpZy5jcmVhdGVBcHBEb2NzVVJMLFxuICAgIGNyZWF0ZURvY3NVUkwgPSBfd2l0aENvbmZpZy5jcmVhdGVEb2NzVVJMLFxuICAgIGNyZWF0ZVJFU1RVUkwgPSBfd2l0aENvbmZpZy5jcmVhdGVSRVNUVVJMLFxuICAgIGNyZWF0ZVN0YXRpY1VSTCA9IF93aXRoQ29uZmlnLmNyZWF0ZVN0YXRpY1VSTCxcbiAgICBjcmVhdGVVUkwgPSBfd2l0aENvbmZpZy5jcmVhdGVVUkwsXG4gICAgaW5zZXJ0Q2FjaGVCdXN0ZXIgPSBfd2l0aENvbmZpZy5pbnNlcnRDYWNoZUJ1c3RlcjtcblxuZXhwb3J0cy5pbnNlcnRDYWNoZUJ1c3RlciA9IGluc2VydENhY2hlQnVzdGVyO1xuZXhwb3J0cy5jcmVhdGVVUkwgPSBjcmVhdGVVUkw7XG5leHBvcnRzLmNyZWF0ZVN0YXRpY1VSTCA9IGNyZWF0ZVN0YXRpY1VSTDtcbmV4cG9ydHMuY3JlYXRlUkVTVFVSTCA9IGNyZWF0ZVJFU1RVUkw7XG5leHBvcnRzLmNyZWF0ZURvY3NVUkwgPSBjcmVhdGVEb2NzVVJMO1xuZXhwb3J0cy5jcmVhdGVBcHBEb2NzVVJMID0gY3JlYXRlQXBwRG9jc1VSTDsiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0RW50cnkgPSBnZXRFbnRyeTtcblxuLyogZXNsaW50LWRpc2FibGUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydCAqL1xuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgY29va2llIHZhbHVlIGZvciB0aGUgcmVmZXJlbmNlIG5hbWUgcGFzc2VkIGluLlxuICogVGhpcyBjYW4gYmUgYG51bGxgIGlmIHRoZSB0b2tlbiBvciB0aGUgcmVmZXJlbmNlIG5hbWUgaXMgbm90IGZvdW5kIGluIHRoZSBjb29raWUuXG4gKlxuICogRm9yIGV4YW1wbGU6XG4gKiBgYGBcbiAqICAgIGNvbnN0IENTUkZUb2tlbiA9IGdldEVudHJ5KCdzcGx1bmt3ZWJfY3NyZl90b2tlbl84MDAwJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZSBSZWZlcmVuY2UgdG8gdGhlIG5hbWUgaW4gdGhlIGNvb2tpZS5cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfG51bGx9IElmIGZvdW5kLCByZXR1cm5zIHRoZSBjb29raWUgdmFsdWUgYXNzb2NpYXRlZCB3aXRoIHRoZSBuYW1lOyBudWxsIG90aGVyd2lzZS5cbiAqXG4gKiBAcHVibGljXG4gKlxuICovXG5mdW5jdGlvbiBnZXRFbnRyeShuYW1lKSB7XG4gIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiKF58OyA/KVwiLmNvbmNhdChuYW1lLCBcIj0oW147XSspXCIpKTtcbiAgdmFyIHZhbHVlID0gbnVsbDtcblxuICB0cnkge1xuICAgIHZhciBtYXRjaCA9IGRvY3VtZW50LmNvb2tpZS5tYXRjaChyZWdleCk7XG4gICAgdmFsdWUgPSBtYXRjaCA/IG1hdGNoWzJdIDogbnVsbDtcbiAgfSBjYXRjaCAoZSkgey8vIG5vLW9wLCBsZXQgYHZhbHVlYCByZW1haW4gbnVsbFxuICB9XG5cbiAgcmV0dXJuIHZhbHVlO1xufSIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGhhc2hDbGVhciA9IHJlcXVpcmUoJy4vX2hhc2hDbGVhcicpLFxuICAgIGhhc2hEZWxldGUgPSByZXF1aXJlKCcuL19oYXNoRGVsZXRlJyksXG4gICAgaGFzaEdldCA9IHJlcXVpcmUoJy4vX2hhc2hHZXQnKSxcbiAgICBoYXNoSGFzID0gcmVxdWlyZSgnLi9faGFzaEhhcycpLFxuICAgIGhhc2hTZXQgPSByZXF1aXJlKCcuL19oYXNoU2V0Jyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEhhc2g7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGxpc3RDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbGlzdENhY2hlQ2xlYXInKSxcbiAgICBsaXN0Q2FjaGVEZWxldGUgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVEZWxldGUnKSxcbiAgICBsaXN0Q2FjaGVHZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVHZXQnKSxcbiAgICBsaXN0Q2FjaGVIYXMgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVIYXMnKSxcbiAgICBsaXN0Q2FjaGVTZXQgPSByZXF1aXJlKCcuL19saXN0Q2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGxpc3QgY2FjaGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBMaXN0Q2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTGlzdENhY2hlYC5cbkxpc3RDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBsaXN0Q2FjaGVDbGVhcjtcbkxpc3RDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbGlzdENhY2hlRGVsZXRlO1xuTGlzdENhY2hlLnByb3RvdHlwZS5nZXQgPSBsaXN0Q2FjaGVHZXQ7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmhhcyA9IGxpc3RDYWNoZUhhcztcbkxpc3RDYWNoZS5wcm90b3R5cGUuc2V0ID0gbGlzdENhY2hlU2V0O1xuXG5tb2R1bGUuZXhwb3J0cyA9IExpc3RDYWNoZTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgZ2V0TmF0aXZlID0gcmVxdWlyZSgnLi9fZ2V0TmF0aXZlJyksXG4gICAgcm9vdCA9IHJlcXVpcmUoJy4vX3Jvb3QnKTtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBtYXBDYWNoZUNsZWFyID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVDbGVhcicpLFxuICAgIG1hcENhY2hlRGVsZXRlID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVEZWxldGUnKSxcbiAgICBtYXBDYWNoZUdldCA9IHJlcXVpcmUoJy4vX21hcENhY2hlR2V0JyksXG4gICAgbWFwQ2FjaGVIYXMgPSByZXF1aXJlKCcuL19tYXBDYWNoZUhhcycpLFxuICAgIG1hcENhY2hlU2V0ID0gcmVxdWlyZSgnLi9fbWFwQ2FjaGVTZXQnKTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbm1vZHVsZS5leHBvcnRzID0gTWFwQ2FjaGU7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIHJvb3QgPSByZXF1aXJlKCcuL19yb290Jyk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFN5bWJvbDtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tYXBgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlNYXAoYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGFycmF5TWFwO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBlcSA9IHJlcXVpcmUoJy4vZXEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBhc3NvY0luZGV4T2Y7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGNhc3RQYXRoID0gcmVxdWlyZSgnLi9fY2FzdFBhdGgnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZUdldDtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgU3ltYm9sID0gcmVxdWlyZSgnLi9fU3ltYm9sJyksXG4gICAgZ2V0UmF3VGFnID0gcmVxdWlyZSgnLi9fZ2V0UmF3VGFnJyksXG4gICAgb2JqZWN0VG9TdHJpbmcgPSByZXF1aXJlKCcuL19vYmplY3RUb1N0cmluZycpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlR2V0VGFnO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBpc0Z1bmN0aW9uID0gcmVxdWlyZSgnLi9pc0Z1bmN0aW9uJyksXG4gICAgaXNNYXNrZWQgPSByZXF1aXJlKCcuL19pc01hc2tlZCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIHRvU291cmNlID0gcmVxdWlyZSgnLi9fdG9Tb3VyY2UnKTtcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlSXNOYXRpdmU7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpLFxuICAgIGFycmF5TWFwID0gcmVxdWlyZSgnLi9fYXJyYXlNYXAnKSxcbiAgICBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYmFzZVRvU3RyaW5nO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNLZXkgPSByZXF1aXJlKCcuL19pc0tleScpLFxuICAgIHN0cmluZ1RvUGF0aCA9IHJlcXVpcmUoJy4vX3N0cmluZ1RvUGF0aCcpLFxuICAgIHRvU3RyaW5nID0gcmVxdWlyZSgnLi90b1N0cmluZycpO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNhc3RQYXRoO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciByb290ID0gcmVxdWlyZSgnLi9fcm9vdCcpO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvcmVKc0RhdGE7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmcmVlR2xvYmFsO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBpc0tleWFibGUgPSByZXF1aXJlKCcuL19pc0tleWFibGUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldE1hcERhdGE7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGJhc2VJc05hdGl2ZSA9IHJlcXVpcmUoJy4vX2Jhc2VJc05hdGl2ZScpLFxuICAgIGdldFZhbHVlID0gcmVxdWlyZSgnLi9fZ2V0VmFsdWUnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXROYXRpdmU7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIFN5bWJvbCA9IHJlcXVpcmUoJy4vX1N5bWJvbCcpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlR2V0VGFnYCB3aGljaCBpZ25vcmVzIGBTeW1ib2wudG9TdHJpbmdUYWdgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSByYXcgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gZ2V0UmF3VGFnKHZhbHVlKSB7XG4gIHZhciBpc093biA9IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIHN5bVRvU3RyaW5nVGFnKSxcbiAgICAgIHRhZyA9IHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcblxuICB0cnkge1xuICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHVuZGVmaW5lZDtcbiAgICB2YXIgdW5tYXNrZWQgPSB0cnVlO1xuICB9IGNhdGNoIChlKSB7fVxuXG4gIHZhciByZXN1bHQgPSBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbiAgaWYgKHVubWFza2VkKSB7XG4gICAgaWYgKGlzT3duKSB7XG4gICAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB0YWc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0UmF3VGFnO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcHJvcGVydHkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGdldFZhbHVlKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGdldFZhbHVlO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaENsZWFyO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaGFzaERlbGV0ZTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgbmF0aXZlQ3JlYXRlID0gcmVxdWlyZSgnLi9fbmF0aXZlQ3JlYXRlJyk7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoR2V0O1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBuYXRpdmVDcmVhdGUgPSByZXF1aXJlKCcuL19uYXRpdmVDcmVhdGUnKTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhhc2hIYXM7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIG5hdGl2ZUNyZWF0ZSA9IHJlcXVpcmUoJy4vX25hdGl2ZUNyZWF0ZScpO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBoYXNoU2V0O1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBpc0FycmF5ID0gcmVxdWlyZSgnLi9pc0FycmF5JyksXG4gICAgaXNTeW1ib2wgPSByZXF1aXJlKCcuL2lzU3ltYm9sJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0tleTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNLZXlhYmxlO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBjb3JlSnNEYXRhID0gcmVxdWlyZSgnLi9fY29yZUpzRGF0YScpO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzTWFza2VkO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVDbGVhcjtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBhcnJheVByb3RvID0gQXJyYXkucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzcGxpY2UgPSBhcnJheVByb3RvLnNwbGljZTtcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGxhc3RJbmRleCA9IGRhdGEubGVuZ3RoIC0gMTtcbiAgaWYgKGluZGV4ID09IGxhc3RJbmRleCkge1xuICAgIGRhdGEucG9wKCk7XG4gIH0gZWxzZSB7XG4gICAgc3BsaWNlLmNhbGwoZGF0YSwgaW5kZXgsIDEpO1xuICB9XG4gIC0tdGhpcy5zaXplO1xuICByZXR1cm4gdHJ1ZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVEZWxldGU7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGFzc29jSW5kZXhPZiA9IHJlcXVpcmUoJy4vX2Fzc29jSW5kZXhPZicpO1xuXG4vKipcbiAqIEdldHMgdGhlIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgcmV0dXJuIGluZGV4IDwgMCA/IHVuZGVmaW5lZCA6IGRhdGFbaW5kZXhdWzFdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUdldDtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBhc3NvY0luZGV4T2YodGhpcy5fX2RhdGFfXywga2V5KSA+IC0xO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGxpc3RDYWNoZUhhcztcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgYXNzb2NJbmRleE9mID0gcmVxdWlyZSgnLi9fYXNzb2NJbmRleE9mJyk7XG5cbi8qKlxuICogU2V0cyB0aGUgbGlzdCBjYWNoZSBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbGlzdCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgKyt0aGlzLnNpemU7XG4gICAgZGF0YS5wdXNoKFtrZXksIHZhbHVlXSk7XG4gIH0gZWxzZSB7XG4gICAgZGF0YVtpbmRleF1bMV0gPSB2YWx1ZTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0Q2FjaGVTZXQ7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIEhhc2ggPSByZXF1aXJlKCcuL19IYXNoJyksXG4gICAgTGlzdENhY2hlID0gcmVxdWlyZSgnLi9fTGlzdENhY2hlJyksXG4gICAgTWFwID0gcmVxdWlyZSgnLi9fTWFwJyk7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZUNsZWFyO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBtYXBDYWNoZURlbGV0ZTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgZ2V0TWFwRGF0YSA9IHJlcXVpcmUoJy4vX2dldE1hcERhdGEnKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlR2V0O1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1hcENhY2hlSGFzO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbnZhciBnZXRNYXBEYXRhID0gcmVxdWlyZSgnLi9fZ2V0TWFwRGF0YScpO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbWFwQ2FjaGVTZXQ7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIG1lbW9pemUgPSByZXF1aXJlKCcuL21lbW9pemUnKTtcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemVDYXBwZWQ7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGdldE5hdGl2ZSA9IHJlcXVpcmUoJy4vX2dldE5hdGl2ZScpO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG5hdGl2ZUNyZWF0ZTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBvYmplY3RUb1N0cmluZztcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgZnJlZUdsb2JhbCA9IHJlcXVpcmUoJy4vX2ZyZWVHbG9iYWwnKTtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvb3Q7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIG1lbW9pemVDYXBwZWQgPSByZXF1aXJlKCcuL19tZW1vaXplQ2FwcGVkJyk7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJpbmdUb1BhdGg7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGlzU3ltYm9sID0gcmVxdWlyZSgnLi9pc1N5bWJvbCcpO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB0b0tleTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9Tb3VyY2U7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxuLyoqXG4gKiBQZXJmb3JtcyBhXG4gKiBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogY29tcGFyaXNvbiBiZXR3ZWVuIHR3byB2YWx1ZXMgdG8gZGV0ZXJtaW5lIGlmIHRoZXkgYXJlIGVxdWl2YWxlbnQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0geyp9IG90aGVyIFRoZSBvdGhlciB2YWx1ZSB0byBjb21wYXJlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdhJzogMSB9O1xuICpcbiAqIF8uZXEob2JqZWN0LCBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoJ2EnLCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uZXEoJ2EnLCBPYmplY3QoJ2EnKSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uZXEoTmFOLCBOYU4pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBlcSh2YWx1ZSwgb3RoZXIpIHtcbiAgcmV0dXJuIHZhbHVlID09PSBvdGhlciB8fCAodmFsdWUgIT09IHZhbHVlICYmIG90aGVyICE9PSBvdGhlcik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXE7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGJhc2VHZXQgPSByZXF1aXJlKCcuL19iYXNlR2V0Jyk7XG5cbi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGBvYmplY3RgLiBJZiB0aGUgcmVzb2x2ZWQgdmFsdWUgaXNcbiAqIGB1bmRlZmluZWRgLCB0aGUgYGRlZmF1bHRWYWx1ZWAgaXMgcmV0dXJuZWQgaW4gaXRzIHBsYWNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy43LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcGFyYW0geyp9IFtkZWZhdWx0VmFsdWVdIFRoZSB2YWx1ZSByZXR1cm5lZCBmb3IgYHVuZGVmaW5lZGAgcmVzb2x2ZWQgdmFsdWVzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IFt7ICdiJzogeyAnYyc6IDMgfSB9XSB9O1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCBbJ2EnLCAnMCcsICdiJywgJ2MnXSk7XG4gKiAvLyA9PiAzXG4gKlxuICogXy5nZXQob2JqZWN0LCAnYS5iLmMnLCAnZGVmYXVsdCcpO1xuICogLy8gPT4gJ2RlZmF1bHQnXG4gKi9cbmZ1bmN0aW9uIGdldChvYmplY3QsIHBhdGgsIGRlZmF1bHRWYWx1ZSkge1xuICB2YXIgcmVzdWx0ID0gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIHJldHVybiByZXN1bHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBnZXQ7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbm1vZHVsZS5leHBvcnRzID0gaXNBcnJheTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpc0Z1bmN0aW9uO1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0O1xuXG4iLCIvKioqIElNUE9SVFMgRlJPTSBpbXBvcnRzLWxvYWRlciAqKiovXG52YXIgZGVmaW5lID0gZmFsc2U7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGlzT2JqZWN0TGlrZTtcblxuIiwiLyoqKiBJTVBPUlRTIEZST00gaW1wb3J0cy1sb2FkZXIgKioqL1xudmFyIGRlZmluZSA9IGZhbHNlO1xuXG52YXIgYmFzZUdldFRhZyA9IHJlcXVpcmUoJy4vX2Jhc2VHZXRUYWcnKSxcbiAgICBpc09iamVjdExpa2UgPSByZXF1aXJlKCcuL2lzT2JqZWN0TGlrZScpO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaXNTeW1ib2w7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIE1hcENhY2hlID0gcmVxdWlyZSgnLi9fTWFwQ2FjaGUnKTtcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5tb2R1bGUuZXhwb3J0cyA9IG1lbW9pemU7XG5cbiIsIi8qKiogSU1QT1JUUyBGUk9NIGltcG9ydHMtbG9hZGVyICoqKi9cbnZhciBkZWZpbmUgPSBmYWxzZTtcblxudmFyIGJhc2VUb1N0cmluZyA9IHJlcXVpcmUoJy4vX2Jhc2VUb1N0cmluZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdG9TdHJpbmc7XG5cbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4ndXNlIHN0cmljdCc7XG5cbi8vIElmIG9iai5oYXNPd25Qcm9wZXJ0eSBoYXMgYmVlbiBvdmVycmlkZGVuLCB0aGVuIGNhbGxpbmdcbi8vIG9iai5oYXNPd25Qcm9wZXJ0eShwcm9wKSB3aWxsIGJyZWFrLlxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vam95ZW50L25vZGUvaXNzdWVzLzE3MDdcbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24ocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgc3RyaW5naWZ5UHJpbWl0aXZlID0gZnVuY3Rpb24odikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbWFwKG9iamVjdEtleXMob2JqKSwgZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG1hcChvYmpba10sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5cbmZ1bmN0aW9uIG1hcCAoeHMsIGYpIHtcbiAgaWYgKHhzLm1hcCkgcmV0dXJuIHhzLm1hcChmKTtcbiAgdmFyIHJlcyA9IFtdO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgcmVzLnB1c2goZih4c1tpXSwgaSkpO1xuICB9XG4gIHJldHVybiByZXM7XG59XG5cbnZhciBvYmplY3RLZXlzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24gKG9iaikge1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgcmVzLnB1c2goa2V5KTtcbiAgfVxuICByZXR1cm4gcmVzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5kZWNvZGUgPSBleHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbmV4cG9ydHMuZW5jb2RlID0gZXhwb3J0cy5zdHJpbmdpZnkgPSByZXF1aXJlKCcuL2VuY29kZScpO1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vXG4vLyAgU1BEWC1GaWxlQ29weXJpZ2h0VGV4dDogMjAyMSBTcGx1bmssIEluYy4gPHNhbGVzQHNwbHVuay5jb20+XG4vLyAgU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IExpY2Vuc2VSZWYtU3BsdW5rLTgtMjAyMVxuLy9cbi8vXG5pbXBvcnQgeyBDU1JGVG9rZW4gfSBmcm9tICdAc3BsdW5rL3NwbHVuay11dGlscy9jb25maWcnXG5pbXBvcnQgeyBjcmVhdGVSRVNUVVJMIH0gZnJvbSAnQHNwbHVuay9zcGx1bmstdXRpbHMvdXJsJ1xuXG5jb25zdCBBUFBfTkFNRSA9ICdzcGx1bmtfdGFfbzM2NSdcblxuY2xhc3MgSW5wdXRIb29rIHtcbiAgICAvKipcbiAgICAgKiBGb3JtIGhvb2tcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gZ2xvYmFsQ29uZmlnIC0gR2xvYmFsIGNvbmZpZ3VyYXRpb24uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHNlcnZpY2VOYW1lIC0gU2VydmljZSBuYW1lXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHN0YXRlIC0gb2JqZWN0IHdpdGggc3RhdGUgb2YgdGhlIGNvbXBvbmVudHMgb24gdGhlIHNlcnZjaWNlL3BhZ2VcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbW9kZSAtIGVkaXQsY3JlYXRlIG9yIGNsb25lXG4gICAgICogQHBhcmFtIHtvYmplY3R9IHV0aWwgLSB0aGUgdXRpbGl0eSBvYmplY3RcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihnbG9iYWxDb25maWcsIHNlcnZpY2VOYW1lLCBzdGF0ZSwgbW9kZSwgdXRpbCwgZ3JvdXBOYW1lKSB7XG4gICAgICAgIHRoaXMuZ2xvYmFsQ29uZmlnID0gZ2xvYmFsQ29uZmlnO1xuICAgICAgICB0aGlzLnNlcnZpY2VOYW1lID0gc2VydmljZU5hbWU7XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdGhpcy5tb2RlID0gbW9kZTtcbiAgICAgICAgdGhpcy51dGlsID0gdXRpbDtcbiAgICAgICAgdGhpcy5ncm91cE5hbWUgPSBncm91cE5hbWU7XG4gICAgfVxuXG4gICAgb25DcmVhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGUgPT09ICdjcmVhdGUnKSB7XG4gICAgICAgICAgICAvLyBjaGVjayB3aGV0aGVyIHRlbmFudCBpcyBjb25maWd1cmVkLCBpZiBub3QgdGhlbiBzaG93IGVycm9yIG1lc3NhZ2VcbiAgICAgICAgICAgIHRoaXMuX2lzVGVuYW50Q29uZmlndXJlZCgpXG5cbiAgICAgICAgICAgIGlmICh0aGlzLnNlcnZpY2VOYW1lID09PSBcIm1zZ190cmFjZVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VmFsdWUoXCJzdGFydF9kYXRlX3RpbWVcIiwgdGhpcy5fZ2V0RGVmYXVsdE1lc3NhZ2VUcmFjZVN0YXJ0RGF0ZSgpKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuc2VydmljZU5hbWUgPT09IFwibWdtdF9hY3Rpdml0eVwiKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VmFsdWUoXCJzdGFydF9kYXRlX3RpbWVcIiwgdGhpcy5fZ2V0RGVmYXVsdE1nbXRTdGFydERhdGUoKSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5tb2RlID09PSAnZWRpdCcpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNlcnZpY2VOYW1lICE9PSBcIm1zZ190cmFjZVwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSAnVXBkYXRpbmcgQ29udGVudC1UeXBlIGlzIHNhbWUgYXMgY3JlYXRpbmcgYSBuZXcgSW5wdXQuJ1xuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IC4uLnByZXZTdGF0ZSwgd2FybmluZ01zZzogd2FybmluZ01lc3NhZ2UgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5zZXJ2aWNlTmFtZSA9PT0gXCJtc2dfdHJhY2VcIiAmJiB0aGlzLnN0YXRlLmRhdGEuaW5wdXRfbW9kZS52YWx1ZSA9PT0gXCJjb250aW51b3VzbHlfbW9uaXRvclwiKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgd2FybmluZ01lc3NhZ2UgPSAnVXBkYXRpbmcgUXVlcnkgV2luZG93IFNpemUgbWF5IGxlYWQgdG8gZGF0YSBkdXBsaWNhdGlvbiBmb3IgdGhlIGZpcnN0IHdpbmRvdyBpZiB0aGUgZGF0YSBjb2xsZWN0aW9uIG9mIHByZXZpb3VzIHdpbmRvdyB3YXMgbm90IGNvbXBsZXRlZC4nXG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnNldFN0YXRlKChwcmV2U3RhdGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ucHJldlN0YXRlLCB3YXJuaW5nTXNnOiB3YXJuaW5nTWVzc2FnZSB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVE9ETzogVGhpcyBzaG91bGQgYmUgcmVwbGFjZWQgd2l0aCB0aGUgZGVmYXVsdCBVQ0MgYmVoYXZpb3VyIG9uY2UgaXQgaXMgZml4ZWQgaW4gdGhlIFVDQy5cbiAgICAgICAgICAgIGlmICh0aGlzLnNlcnZpY2VOYW1lID09PSBcIm1zZ190cmFjZVwiKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRfbW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW3R5cGU9XCJidXR0b25cIl1bZGF0YS10ZXN0LXZhbHVlPVwiY29udGludW91c2x5X21vbml0b3JcIl0nKTtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXhfb25jZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1t0eXBlPVwiYnV0dG9uXCJdW2RhdGEtdGVzdC12YWx1ZT1cImluZGV4X29uY2VcIl0nKTtcbiAgICAgICAgICAgICAgICBjb250X21vbi5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaW5kZXhfb25jZS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNoYW5nZShmaWVsZCwgdmFsdWUsIGRhdGFEaWN0KSB7XG4gICAgICAgIGxldCBzZWxlY3RlZE1vZGUgPSBcIlwiXG4gICAgICAgIGlmIChmaWVsZCA9PT0gXCJpbnB1dF9tb2RlXCIpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkTW9kZSA9IGRhdGFEaWN0LmRhdGEuaW5wdXRfbW9kZS52YWx1ZVxuXG4gICAgICAgICAgICAvLyBiYXNlZCBvbiB0aGUgaW5wdXQgbW9kZSB0b2dnbGUgYnV0dG9uIGhhbmRsZSB0aGUgdmlzaWJpbGl0eSBmb3IgaW50ZXJ2YWwsIGVuZCBkYXRlIHRpbWUgYW5kIGFkdmFuY2VkIHNldHRpbmdzIHNlY3Rpb25cbiAgICAgICAgICAgIHRoaXMudG9nZ2xlT2JqZWN0KHNlbGVjdGVkTW9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblJlbmRlcigpIHtcbiAgICAgICAgaWYgKHRoaXMuc2VydmljZU5hbWUgPT09IFwibXNnX3RyYWNlXCIpIHtcbiAgICAgICAgICAgIGNvbnN0IGlucHV0bW9kZSA9IHRoaXMuc3RhdGUuZGF0YS5pbnB1dF9tb2RlLnZhbHVlXG5cbiAgICAgICAgICAgIC8vIFdoZW4gdGhlIGNyZWF0aW5nIHRoZSBpbnB1dCwgaGFuZGxlIHRoZSB2aWliaWxpdHkgb2YgZmllbGRzIGFuZCBhZHZhbmNlZCBzZXR0aW5nIHNlY3Rpb24gYmFzZWQgb24gaW5wdXQgbW9kZSB2YWx1ZSBzZWxlY3RlZCBieSBkZWZhdWx0XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZU9iamVjdChpbnB1dG1vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgb25TYXZlKGRhdGFEaWN0KSB7XG4gICAgICAgIGxldCBpbnB1dG1vZGUgPSBcIlwiXG4gICAgICAgIGlucHV0bW9kZSA9IGRhdGFEaWN0LmlucHV0X21vZGVcbiAgICAgICAgaWYgKHRoaXMuc2VydmljZU5hbWUgPT09IFwibWdtdF9hY3Rpdml0eVwiKSB7XG4gICAgICAgICAgICBjb25zdCB0aGVuID0gRGF0ZS5wYXJzZShuZXcgRGF0ZShkYXRhRGljdC5zdGFydF9kYXRlX3RpbWUgKyAnWicpLnRvVVRDU3RyaW5nKCkpXG4gICAgICAgICAgICBjb25zdCBub3cgPSBEYXRlLnBhcnNlKG5ldyBEYXRlKCkudG9VVENTdHJpbmcoKSlcbiAgICAgICAgICAgIGNvbnN0IG1zQmV0d2VlbkRhdGVzID0gbm93IC0gdGhlblxuXG4gICAgICAgICAgICBpZiAobXNCZXR3ZWVuRGF0ZXMgPCAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnNldEVycm9yTXNnKCdUaGUgU3RhcnQgZGF0ZS90aW1lIGNhbm5vdCBiZSBpbiB0aGUgZnV0dXJlJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWRhdGFEaWN0LnN0YXJ0X2RhdGVfdGltZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB7IC4uLnByZXZTdGF0ZS5kYXRhIH1cbiAgICAgICAgICAgICAgICAgICAgZGF0YS5zdGFydF9kYXRlX3RpbWUudmFsdWUgPSB0aGlzLl9nZXREZWZhdWx0TWdtdFN0YXJ0RGF0ZSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGEgfVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5zZXJ2aWNlTmFtZSA9PT0gXCJtc2dfdHJhY2VcIiAmJiBpbnB1dG1vZGUgPT09IFwiaW5kZXhfb25jZVwiKSB7XG4gICAgICAgICAgICBjb25zdCBzdGFydF9kYXRlX3RpbWUgPSBkYXRhRGljdC5zdGFydF9kYXRlX3RpbWVcbiAgICAgICAgICAgIGNvbnN0IGVuZF9kYXRlX3RpbWUgPSBkYXRhRGljdC5lbmRfZGF0ZV90aW1lXG5cbiAgICAgICAgICAgIGlmICghc3RhcnRfZGF0ZV90aW1lKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnNldEVycm9yTXNnKCdTdGFydCBkYXRlL3RpbWUgaXMgcmVxdWlyZWQgZm9yIGFuIEluZGV4IE9uY2UgaW5wdXQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWVuZF9kYXRlX3RpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuc2V0RXJyb3JNc2coJ0VuZCBkYXRlL3RpbWUgaXMgcmVxdWlyZWQgZm9yIGFuIEluZGV4IE9uY2UgaW5wdXQuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9zZXRWYWx1ZSgnaW50ZXJ2YWwnLCAnLTEnKVxuICAgICAgICAgICAgdGhpcy5fc2V0VmFsdWUoJ3F1ZXJ5X3dpbmRvd19zaXplJywgdW5kZWZpbmVkKVxuICAgICAgICAgICAgdGhpcy5fc2V0VmFsdWUoJ2RlbGF5X3Rocm90dGxlJywgdW5kZWZpbmVkKVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlcnZpY2VOYW1lID09PSBcIm1zZ190cmFjZVwiICYmIGlucHV0bW9kZSA9PT0gXCJjb250aW51b3VzbHlfbW9uaXRvclwiKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnZhbCA9IGRhdGFEaWN0LmludGVydmFsXG4gICAgICAgICAgICBjb25zdCBxdWVyeV93aW5kb3dfc2l6ZSA9IGRhdGFEaWN0LnF1ZXJ5X3dpbmRvd19zaXplXG4gICAgICAgICAgICBjb25zdCBkZWxheV90aHJvdHRsZSA9IGRhdGFEaWN0LmRlbGF5X3Rocm90dGxlXG4gICAgICAgICAgICBjb25zdCBzdGFydF9kYXRlX3RpbWUgPSBkYXRhRGljdC5zdGFydF9kYXRlX3RpbWVcblxuICAgICAgICAgICAgaWYgKCFpbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXRFcnJvck1zZygnRmllbGQgSW50ZXJ2YWwgKHNlY29uZHMpIGlzIHJlcXVpcmVkJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoKGludGVydmFsIDwgMSB8fCBpbnRlcnZhbCA+IDg2NDAwMCkgfHwgIS9eXFxkKyQvLnRlc3QoaW50ZXJ2YWwpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnNldEVycm9yTXNnKCdJbnRlcnZhbCBzaG91bGQgYmUgaW4gdGhlIHJhbmdlIG9mIDEgdG8gODY0MDAwIHNlY29uZHMuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIXF1ZXJ5X3dpbmRvd19zaXplKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnNldEVycm9yTXNnKCdGaWVsZCBRdWVyeSBXaW5kb3cgU2l6ZSAobWludXRlcykgaXMgcmVxdWlyZWQnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghL15cXGQrJC8udGVzdChxdWVyeV93aW5kb3dfc2l6ZSkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuc2V0RXJyb3JNc2coJ1F1ZXJ5IFdpbmRvdyBTaXplIHNob3VsZCBiZSBwb3NpdGl2ZSBudW1iZXIgKGluIG1pbnV0ZXMpLicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHF1ZXJ5X3dpbmRvd19zaXplIDwgMSB8fCBxdWVyeV93aW5kb3dfc2l6ZSA+IDE0NDAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51dGlsLnNldEVycm9yTXNnKCdRdWVyeSBXaW5kb3cgU2l6ZSBzaG91bGQgYmUgaW4gdGhlIHJhbmdlIG9mIDEgdG8gMTQ0MDAgbWludXRlcy4nKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICghZGVsYXlfdGhyb3R0bGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuc2V0RXJyb3JNc2coJ0ZpZWxkIERlbGF5IFRocm90dGxlIChtaW51dGVzKSBpcyByZXF1aXJlZCcpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCEvXlxcZCskLy50ZXN0KGRlbGF5X3Rocm90dGxlKSkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXRFcnJvck1zZygnRGVsYXkgVGhyb3R0bGUgc2hvdWxkIGJlIHBvc2l0aXZlIG51bWJlciAoaW4gbWludXRlcykuJyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZGVsYXlfdGhyb3R0bGUgPCAwIHx8IGRlbGF5X3Rocm90dGxlID4gMTQ0MDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWwuc2V0RXJyb3JNc2coJ0RlbGF5IFRocm90dGxlIHNob3VsZCBiZSBpbiB0aGUgcmFuZ2Ugb2YgMCB0byAxNDQwMCBtaW51dGVzLicpO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCFzdGFydF9kYXRlX3RpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRWYWx1ZShcInN0YXJ0X2RhdGVfdGltZVwiLCB0aGlzLl9nZXREZWZhdWx0TWVzc2FnZVRyYWNlU3RhcnREYXRlKCkpXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuX3NldFZhbHVlKCdlbmRfZGF0ZV90aW1lJywgdW5kZWZpbmVkKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgdG9nZ2xlT2JqZWN0KG1vZGVWYWx1ZSkge1xuICAgICAgICAvKlxuICAgICAgICAgICAgbW9kZVZhbHVlIDogY29udGludW91c2x5X21vbml0b3Igb3IgaW5kZXhfb25jZVxuICAgICAgICAgICAgRGVzY3JpcHRpb246IElmICdjb250aW51b3VzbHlfbW9uaXRvcicgaXMgc2VsZWN0ZWQgYXMgaW5wdXQgbW9kZSB0aGVuIGhpZGUgdGhlICdFbmQgZGF0ZS90aW1lJyBmaWVsZFxuICAgICAgICAgICAgICAgICAgICAgICAgSWYgJ2luZGV4X29uY2UnIGlzIHNlbGVjdGVkIGFzIGlucHV0IG1vZGUgdGhlbiBoaWRlIHRoZSAnaW50ZXJ2YWwnIGZpZWxkIGFuZCBhZHZhbmNlZCBzZXR0aW5ncyBzZWN0aW9uXG4gICAgICAgICovXG4gICAgICAgIGxldCBzaG93RW5kRGF0ZVRpbWUgPSBmYWxzZVxuICAgICAgICBsZXQgc2hvd0ludGVydmFsID0gdHJ1ZVxuXG4gICAgICAgIGlmIChtb2RlVmFsdWUgPT09IFwiaW5kZXhfb25jZVwiKSB7XG4gICAgICAgICAgICBzaG93RW5kRGF0ZVRpbWUgPSB0cnVlXG4gICAgICAgICAgICBzaG93SW50ZXJ2YWwgPSBmYWxzZVxuICAgICAgICAgICAgdmFyIHBhbmVsID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtdGVzdD1cImNvbGxhcHNpYmxlLXBhbmVsXCJdJylcbiAgICAgICAgICAgIHBhbmVsLnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNob3dFbmREYXRlVGltZSA9IGZhbHNlXG4gICAgICAgICAgICBzaG93SW50ZXJ2YWwgPSB0cnVlXG4gICAgICAgICAgICB2YXIgcGFuZWwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS10ZXN0PVwiY29sbGFwc2libGUtcGFuZWxcIl0nKVxuICAgICAgICAgICAgcGFuZWwuc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudXRpbC5zZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0geyAuLi5wcmV2U3RhdGUuZGF0YSB9XG4gICAgICAgICAgICBkYXRhLmVuZF9kYXRlX3RpbWUuZGlzcGxheSA9IHNob3dFbmREYXRlVGltZVxuICAgICAgICAgICAgZGF0YS5pbnRlcnZhbC5kaXNwbGF5ID0gc2hvd0ludGVydmFsXG4gICAgICAgICAgICByZXR1cm4geyBkYXRhIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICAvLyBNZXRob2QgdG8gc2V0IHRoZSB2YWx1ZXMgaW4gdGhlIGZpZWxkc1xuICAgIF9zZXRWYWx1ZShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMudXRpbC5zZXRTdGF0ZSgocHJldlN0YXRlKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0geyAuLi5wcmV2U3RhdGUuZGF0YSB9XG4gICAgICAgICAgICBkYXRhW2tleV0udmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgcmV0dXJuIHsgZGF0YSB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgX2dldERlZmF1bHRNZXNzYWdlVHJhY2VTdGFydERhdGUoKSB7XG4gICAgICAgIGNvbnN0IGRlZmF1bHRkYXRlID0gbmV3IERhdGUoKVxuICAgICAgICBkZWZhdWx0ZGF0ZS5zZXREYXRlKGRlZmF1bHRkYXRlLmdldERhdGUoKSAtIDUpXG4gICAgICAgIHJldHVybiBkZWZhdWx0ZGF0ZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxOSlcbiAgICB9XG5cbiAgICBfZ2V0RGVmYXVsdE1nbXRTdGFydERhdGUoKSB7XG4gICAgICAgIGxldCBkZWZhdWx0RGF0ZSA9IG5ldyBEYXRlKClcbiAgICAgICAgZGVmYXVsdERhdGUuc2V0SG91cnMoZGVmYXVsdERhdGUuZ2V0SG91cnMoKSAtIDQpXG4gICAgICAgIHJldHVybiBkZWZhdWx0RGF0ZS50b0lTT1N0cmluZygpLnN1YnN0cmluZygwLCAxOSlcbiAgICB9XG5cbiAgICBfaXNUZW5hbnRDb25maWd1cmVkICgpIHtcbiAgICAgICAgY29uc3QgdXJsID0gY3JlYXRlUkVTVFVSTCgnc3BsdW5rX3RhX28zNjVfdGVuYW50cz9vdXRwdXRfbW9kZT1qc29uJywge1xuICAgICAgICAgICAgYXBwOiBBUFBfTkFNRSxcbiAgICAgICAgICAgIHNoYXJpbmc6ICdhcHAnXG4gICAgICAgIH0pXG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNsaWVudCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpIC8qIGdsb2JhbCBYTUxIdHRwUmVxdWVzdDpmYWxzZSAqL1xuICAgICAgICAgICAgY2xpZW50Lm9wZW4oJ0dFVCcsIHVybCwgZmFsc2UpXG4gICAgICAgICAgICBjbGllbnQuc2V0UmVxdWVzdEhlYWRlcignWC1TcGx1bmstRm9ybS1LZXknLCBDU1JGVG9rZW4pXG4gICAgICAgICAgICBjbGllbnQuc2V0UmVxdWVzdEhlYWRlcignWC1SZXF1ZXN0ZWQtV2l0aCcsICdYTUxIdHRwUmVxdWVzdCcpXG4gICAgICAgICAgICBjbGllbnQuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKVxuICAgICAgICAgICAgY2xpZW50LnNlbmQoKVxuXG4gICAgICAgICAgICBpZiAoY2xpZW50LnN0YXR1cyA9PT0gMjAwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZGF0YSA9IEpTT04ucGFyc2UoY2xpZW50LnJlc3BvbnNlVGV4dClcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5lbnRyeS5sZW5ndGggPT09IDApe1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnV0aWwuc2V0RXJyb3JNc2coXCJQbGVhc2UgY3JlYXRlIGEgVGVuYW50IGZpcnN0IHVuZGVyIHRoZSBUZW5hbnQgcGFnZS5cIilcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRpbC5zZXRFcnJvck1zZyhcIkVycm9yIHdoaWxlIGZldGNoaW5nIFRlbmFudFwiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIHRoaXMudXRpbC5zZXRFcnJvck1zZyhcIkVycm9yIHdoaWxlIGZldGNoaW5nIFRlbmFudFwiKVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbnB1dEhvb2s7XG4iXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJleHRyYWN0QXBwTmFtZSIsInZlcnNpb25MYWJlbCIsInVzZXJuYW1lIiwic3BsdW5rZFBhdGgiLCJzZXJ2ZXJUaW1lem9uZUluZm8iLCJyb290UGF0aCIsInBvcnROdW1iZXIiLCJsb2NhbGUiLCJjb25maWciLCJidWlsZFB1c2hOdW1iZXIiLCJidWlsZE51bWJlciIsImFwcEJ1aWxkIiwiYXBwIiwiaXNBdmFpbGFibGUiLCJDU1JGVG9rZW4iLCJvYmoiLCJfZ2V0IiwiX19lc01vZHVsZSIsIl9jb29raWUiLCJyb290Iiwid2luZG93IiwiZyIsImdldCRDRW50cnkiLCJwcm9wIiwiZ2V0RW50cnkiLCJjb25jYXQiLCJwYXRoTWF0Y2giLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJ1bmRlZmluZWQiLCJtYXRjaCIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdG90eXBlIiwiX3F1ZXJ5c3RyaW5nIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwib3duS2V5cyIsIm9iamVjdCIsImVudW1lcmFibGVPbmx5Iiwia2V5cyIsImdldE93blByb3BlcnR5U3ltYm9scyIsInN5bWJvbHMiLCJmaWx0ZXIiLCJzeW0iLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwicHVzaCIsImFwcGx5IiwiX29iamVjdFNwcmVhZCIsInRhcmdldCIsImkiLCJzb3VyY2UiLCJmb3JFYWNoIiwia2V5IiwiX2RlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIl93aXRoQ29uZmlnIiwiX3JlZiIsImluc2VydENhY2hlQnVzdGVyIiwicGF0aCIsIm9wdGlvbnMiLCJpbnNlcnRQb3NpdGlvbiIsImluZGV4IiwiYXBwQnVpbGRTdHJpbmciLCJidWlsZFB1c2hTdHJpbmciLCJjYWNoZUJ1c3RlclN0cmluZyIsImJlZm9yZSIsInN1YnN0ciIsImFmdGVyIiwiY3JlYXRlVVJMIiwicGF0aElucHV0IiwicXVlcnlQYXJhbXMiLCJxdWVyeSIsInN0cmluZ2lmeSIsImNoYXJBdCIsImNyZWF0ZURvY3NVUkxGcm9tUGFyYW1zIiwicGFyYW1zIiwiY29uZmlnT3B0aW9ucyIsImNyZWF0ZUFwcERvY3NVUkwiLCJsb2NhdGlvbiIsIl9yZWYyIiwiYXBwTmFtZSIsImFwcFZlcnNpb24iLCJjcmVhdGVEb2NzVVJMIiwiY3JlYXRlUkVTVFVSTCIsImVuZHBvaW50IiwibmFtZXNwYWNlT3B0aW9ucyIsInRlc3QiLCJvd25lciIsImJhc2VQYXRoIiwic2hhcmluZyIsImVuY29kZVVSSUNvbXBvbmVudCIsImNyZWF0ZVN0YXRpY1VSTCIsIl9sZW4iLCJyZXN0IiwiQXJyYXkiLCJfa2V5Iiwid2l0aENvbmZpZyIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsIm5hbWUiLCJkb2N1bWVudCIsInJlZ2V4IiwiUmVnRXhwIiwiY29va2llIiwiZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwiZW50cmllcyIsInRoaXMiLCJjbGVhciIsImVudHJ5IiwibW9kdWxlIiwibGlzdENhY2hlQ2xlYXIiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJNYXAiLCJnZXROYXRpdmUiLCJtYXBDYWNoZUNsZWFyIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsImFycmF5IiwiaXRlcmF0ZWUiLCJyZXN1bHQiLCJlcSIsImNhc3RQYXRoIiwidG9LZXkiLCJnZXRSYXdUYWciLCJvYmplY3RUb1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJpc0Z1bmN0aW9uIiwiaXNNYXNrZWQiLCJpc09iamVjdCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwiZnVuY1Byb3RvIiwiRnVuY3Rpb24iLCJvYmplY3RQcm90byIsImZ1bmNUb1N0cmluZyIsInRvU3RyaW5nIiwicmVJc05hdGl2ZSIsInJlcGxhY2UiLCJhcnJheU1hcCIsImlzQXJyYXkiLCJpc1N5bWJvbCIsInN5bWJvbFByb3RvIiwic3ltYm9sVG9TdHJpbmciLCJiYXNlVG9TdHJpbmciLCJpc0tleSIsInN0cmluZ1RvUGF0aCIsImNvcmVKc0RhdGEiLCJmcmVlR2xvYmFsIiwiaXNLZXlhYmxlIiwibWFwIiwiZGF0YSIsIl9fZGF0YV9fIiwiYmFzZUlzTmF0aXZlIiwiZ2V0VmFsdWUiLCJuYXRpdmVPYmplY3RUb1N0cmluZyIsImlzT3duIiwidGFnIiwidW5tYXNrZWQiLCJuYXRpdmVDcmVhdGUiLCJzaXplIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsInR5cGUiLCJ1aWQiLCJtYXNrU3JjS2V5IiwiZXhlYyIsIklFX1BST1RPIiwiZnVuYyIsImFzc29jSW5kZXhPZiIsInNwbGljZSIsInBvcCIsImdldE1hcERhdGEiLCJtZW1vaXplIiwiZnJlZVNlbGYiLCJzZWxmIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmciLCJjaGFyQ29kZUF0IiwibnVtYmVyIiwicXVvdGUiLCJzdWJTdHJpbmciLCJvdGhlciIsImJhc2VHZXQiLCJkZWZhdWx0VmFsdWUiLCJiYXNlR2V0VGFnIiwiaXNPYmplY3RMaWtlIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJtZW1vaXplZCIsImFyZ3MiLCJDYWNoZSIsInFzIiwic2VwIiwicmVnZXhwIiwic3BsaXQiLCJtYXhLZXlzIiwibGVuIiwia3N0ciIsInZzdHIiLCJrIiwidiIsIngiLCJpZHgiLCJpbmRleE9mIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwieHMiLCJzdHJpbmdpZnlQcmltaXRpdmUiLCJpc0Zpbml0ZSIsIm9iamVjdEtleXMiLCJrcyIsImpvaW4iLCJmIiwicmVzIiwiZGVjb2RlIiwicGFyc2UiLCJlbmNvZGUiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwiZCIsImRlZmluaXRpb24iLCJvIiwiZ2xvYmFsVGhpcyIsIklucHV0SG9vayIsImdsb2JhbENvbmZpZyIsInNlcnZpY2VOYW1lIiwic3RhdGUiLCJtb2RlIiwidXRpbCIsImdyb3VwTmFtZSIsIl9jbGFzc0NhbGxDaGVjayIsIl9pc1RlbmFudENvbmZpZ3VyZWQiLCJfc2V0VmFsdWUiLCJfZ2V0RGVmYXVsdE1lc3NhZ2VUcmFjZVN0YXJ0RGF0ZSIsIl9nZXREZWZhdWx0TWdtdFN0YXJ0RGF0ZSIsInNldFN0YXRlIiwicHJldlN0YXRlIiwid2FybmluZ01zZyIsImlucHV0X21vZGUiLCJjb250X21vbiIsInF1ZXJ5U2VsZWN0b3IiLCJpbmRleF9vbmNlIiwiZGlzYWJsZWQiLCJmaWVsZCIsImRhdGFEaWN0Iiwic2VsZWN0ZWRNb2RlIiwidG9nZ2xlT2JqZWN0IiwiaW5wdXRtb2RlIiwiX3RoaXMiLCJ0aGVuIiwiRGF0ZSIsInN0YXJ0X2RhdGVfdGltZSIsInRvVVRDU3RyaW5nIiwic2V0RXJyb3JNc2ciLCJlbmRfZGF0ZV90aW1lIiwiaW50ZXJ2YWwiLCJxdWVyeV93aW5kb3dfc2l6ZSIsImRlbGF5X3Rocm90dGxlIiwiX3N0YXJ0X2RhdGVfdGltZSIsIm1vZGVWYWx1ZSIsInNob3dFbmREYXRlVGltZSIsInNob3dJbnRlcnZhbCIsInN0eWxlIiwiZGlzcGxheSIsImRlZmF1bHRkYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJ0b0lTT1N0cmluZyIsInN1YnN0cmluZyIsImRlZmF1bHREYXRlIiwic2V0SG91cnMiLCJnZXRIb3VycyIsInVybCIsImNsaWVudCIsIlhNTEh0dHBSZXF1ZXN0Iiwib3BlbiIsInNldFJlcXVlc3RIZWFkZXIiLCJzZW5kIiwic3RhdHVzIiwiSlNPTiIsInJlc3BvbnNlVGV4dCIsImVyciJdLCJzb3VyY2VSb290IjoiIn0=